
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a64  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c74  08003c74  0000501c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c74  08003c74  00004c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c7c  08003c7c  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c7c  08003c7c  00004c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c80  08003c80  00004c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003c84  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000001c  08003ca0  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08003ca0  000050cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac7d  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c07  00000000  00000000  0000fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  000118d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000061f  00000000  00000000  000120e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025163  00000000  00000000  000126ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb99  00000000  00000000  00037862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5ba2  00000000  00000000  000433fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f38  00000000  00000000  00128fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0012af18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000001c 	.word	0x2000001c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003c14 	.word	0x08003c14

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000020 	.word	0x20000020
 8000204:	08003c14 	.word	0x08003c14

08000208 <strcmp>:
 8000208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000210:	2a01      	cmp	r2, #1
 8000212:	bf28      	it	cs
 8000214:	429a      	cmpcs	r2, r3
 8000216:	d0f7      	beq.n	8000208 <strcmp>
 8000218:	1ad0      	subs	r0, r2, r3
 800021a:	4770      	bx	lr

0800021c <__aeabi_uldivmod>:
 800021c:	b953      	cbnz	r3, 8000234 <__aeabi_uldivmod+0x18>
 800021e:	b94a      	cbnz	r2, 8000234 <__aeabi_uldivmod+0x18>
 8000220:	2900      	cmp	r1, #0
 8000222:	bf08      	it	eq
 8000224:	2800      	cmpeq	r0, #0
 8000226:	bf1c      	itt	ne
 8000228:	f04f 31ff 	movne.w	r1, #4294967295
 800022c:	f04f 30ff 	movne.w	r0, #4294967295
 8000230:	f000 b96a 	b.w	8000508 <__aeabi_idiv0>
 8000234:	f1ad 0c08 	sub.w	ip, sp, #8
 8000238:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800023c:	f000 f806 	bl	800024c <__udivmoddi4>
 8000240:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000244:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000248:	b004      	add	sp, #16
 800024a:	4770      	bx	lr

0800024c <__udivmoddi4>:
 800024c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000250:	9d08      	ldr	r5, [sp, #32]
 8000252:	460c      	mov	r4, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14e      	bne.n	80002f6 <__udivmoddi4+0xaa>
 8000258:	4694      	mov	ip, r2
 800025a:	458c      	cmp	ip, r1
 800025c:	4686      	mov	lr, r0
 800025e:	fab2 f282 	clz	r2, r2
 8000262:	d962      	bls.n	800032a <__udivmoddi4+0xde>
 8000264:	b14a      	cbz	r2, 800027a <__udivmoddi4+0x2e>
 8000266:	f1c2 0320 	rsb	r3, r2, #32
 800026a:	4091      	lsls	r1, r2
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	fa0c fc02 	lsl.w	ip, ip, r2
 8000274:	4319      	orrs	r1, r3
 8000276:	fa00 fe02 	lsl.w	lr, r0, r2
 800027a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027e:	fa1f f68c 	uxth.w	r6, ip
 8000282:	fbb1 f4f7 	udiv	r4, r1, r7
 8000286:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028a:	fb07 1114 	mls	r1, r7, r4, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb04 f106 	mul.w	r1, r4, r6
 8000296:	4299      	cmp	r1, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x64>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f104 30ff 	add.w	r0, r4, #4294967295
 80002a2:	f080 8112 	bcs.w	80004ca <__udivmoddi4+0x27e>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 810f 	bls.w	80004ca <__udivmoddi4+0x27e>
 80002ac:	3c02      	subs	r4, #2
 80002ae:	4463      	add	r3, ip
 80002b0:	1a59      	subs	r1, r3, r1
 80002b2:	fa1f f38e 	uxth.w	r3, lr
 80002b6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ba:	fb07 1110 	mls	r1, r7, r0, r1
 80002be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002c2:	fb00 f606 	mul.w	r6, r0, r6
 80002c6:	429e      	cmp	r6, r3
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x94>
 80002ca:	eb1c 0303 	adds.w	r3, ip, r3
 80002ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80002d2:	f080 80fc 	bcs.w	80004ce <__udivmoddi4+0x282>
 80002d6:	429e      	cmp	r6, r3
 80002d8:	f240 80f9 	bls.w	80004ce <__udivmoddi4+0x282>
 80002dc:	4463      	add	r3, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	1b9b      	subs	r3, r3, r6
 80002e2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11d      	cbz	r5, 80002f2 <__udivmoddi4+0xa6>
 80002ea:	40d3      	lsrs	r3, r2
 80002ec:	2200      	movs	r2, #0
 80002ee:	e9c5 3200 	strd	r3, r2, [r5]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d905      	bls.n	8000306 <__udivmoddi4+0xba>
 80002fa:	b10d      	cbz	r5, 8000300 <__udivmoddi4+0xb4>
 80002fc:	e9c5 0100 	strd	r0, r1, [r5]
 8000300:	2100      	movs	r1, #0
 8000302:	4608      	mov	r0, r1
 8000304:	e7f5      	b.n	80002f2 <__udivmoddi4+0xa6>
 8000306:	fab3 f183 	clz	r1, r3
 800030a:	2900      	cmp	r1, #0
 800030c:	d146      	bne.n	800039c <__udivmoddi4+0x150>
 800030e:	42a3      	cmp	r3, r4
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xcc>
 8000312:	4290      	cmp	r0, r2
 8000314:	f0c0 80f0 	bcc.w	80004f8 <__udivmoddi4+0x2ac>
 8000318:	1a86      	subs	r6, r0, r2
 800031a:	eb64 0303 	sbc.w	r3, r4, r3
 800031e:	2001      	movs	r0, #1
 8000320:	2d00      	cmp	r5, #0
 8000322:	d0e6      	beq.n	80002f2 <__udivmoddi4+0xa6>
 8000324:	e9c5 6300 	strd	r6, r3, [r5]
 8000328:	e7e3      	b.n	80002f2 <__udivmoddi4+0xa6>
 800032a:	2a00      	cmp	r2, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x204>
 8000330:	eba1 040c 	sub.w	r4, r1, ip
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	fa1f f78c 	uxth.w	r7, ip
 800033c:	2101      	movs	r1, #1
 800033e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb08 4416 	mls	r4, r8, r6, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb07 f006 	mul.w	r0, r7, r6
 8000352:	4298      	cmp	r0, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x11c>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 34ff 	add.w	r4, r6, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x11a>
 8000360:	4298      	cmp	r0, r3
 8000362:	f200 80cd 	bhi.w	8000500 <__udivmoddi4+0x2b4>
 8000366:	4626      	mov	r6, r4
 8000368:	1a1c      	subs	r4, r3, r0
 800036a:	fa1f f38e 	uxth.w	r3, lr
 800036e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000372:	fb08 4410 	mls	r4, r8, r0, r4
 8000376:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800037a:	fb00 f707 	mul.w	r7, r0, r7
 800037e:	429f      	cmp	r7, r3
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0x148>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f100 34ff 	add.w	r4, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x146>
 800038c:	429f      	cmp	r7, r3
 800038e:	f200 80b0 	bhi.w	80004f2 <__udivmoddi4+0x2a6>
 8000392:	4620      	mov	r0, r4
 8000394:	1bdb      	subs	r3, r3, r7
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	e7a5      	b.n	80002e8 <__udivmoddi4+0x9c>
 800039c:	f1c1 0620 	rsb	r6, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 f706 	lsr.w	r7, r2, r6
 80003a6:	431f      	orrs	r7, r3
 80003a8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ac:	fa04 f301 	lsl.w	r3, r4, r1
 80003b0:	ea43 030c 	orr.w	r3, r3, ip
 80003b4:	40f4      	lsrs	r4, r6
 80003b6:	fa00 f801 	lsl.w	r8, r0, r1
 80003ba:	0c38      	lsrs	r0, r7, #16
 80003bc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003c0:	fbb4 fef0 	udiv	lr, r4, r0
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	fb00 441e 	mls	r4, r0, lr, r4
 80003cc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d0:	fb0e f90c 	mul.w	r9, lr, ip
 80003d4:	45a1      	cmp	r9, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	d90a      	bls.n	80003f2 <__udivmoddi4+0x1a6>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003e2:	f080 8084 	bcs.w	80004ee <__udivmoddi4+0x2a2>
 80003e6:	45a1      	cmp	r9, r4
 80003e8:	f240 8081 	bls.w	80004ee <__udivmoddi4+0x2a2>
 80003ec:	f1ae 0e02 	sub.w	lr, lr, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	eba4 0409 	sub.w	r4, r4, r9
 80003f6:	fa1f f983 	uxth.w	r9, r3
 80003fa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fe:	fb00 4413 	mls	r4, r0, r3, r4
 8000402:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000406:	fb03 fc0c 	mul.w	ip, r3, ip
 800040a:	45a4      	cmp	ip, r4
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x1d2>
 800040e:	193c      	adds	r4, r7, r4
 8000410:	f103 30ff 	add.w	r0, r3, #4294967295
 8000414:	d267      	bcs.n	80004e6 <__udivmoddi4+0x29a>
 8000416:	45a4      	cmp	ip, r4
 8000418:	d965      	bls.n	80004e6 <__udivmoddi4+0x29a>
 800041a:	3b02      	subs	r3, #2
 800041c:	443c      	add	r4, r7
 800041e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000422:	fba0 9302 	umull	r9, r3, r0, r2
 8000426:	eba4 040c 	sub.w	r4, r4, ip
 800042a:	429c      	cmp	r4, r3
 800042c:	46ce      	mov	lr, r9
 800042e:	469c      	mov	ip, r3
 8000430:	d351      	bcc.n	80004d6 <__udivmoddi4+0x28a>
 8000432:	d04e      	beq.n	80004d2 <__udivmoddi4+0x286>
 8000434:	b155      	cbz	r5, 800044c <__udivmoddi4+0x200>
 8000436:	ebb8 030e 	subs.w	r3, r8, lr
 800043a:	eb64 040c 	sbc.w	r4, r4, ip
 800043e:	fa04 f606 	lsl.w	r6, r4, r6
 8000442:	40cb      	lsrs	r3, r1
 8000444:	431e      	orrs	r6, r3
 8000446:	40cc      	lsrs	r4, r1
 8000448:	e9c5 6400 	strd	r6, r4, [r5]
 800044c:	2100      	movs	r1, #0
 800044e:	e750      	b.n	80002f2 <__udivmoddi4+0xa6>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f103 	lsr.w	r1, r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa24 f303 	lsr.w	r3, r4, r3
 8000460:	4094      	lsls	r4, r2
 8000462:	430c      	orrs	r4, r1
 8000464:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000468:	fa00 fe02 	lsl.w	lr, r0, r2
 800046c:	fa1f f78c 	uxth.w	r7, ip
 8000470:	fbb3 f0f8 	udiv	r0, r3, r8
 8000474:	fb08 3110 	mls	r1, r8, r0, r3
 8000478:	0c23      	lsrs	r3, r4, #16
 800047a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047e:	fb00 f107 	mul.w	r1, r0, r7
 8000482:	4299      	cmp	r1, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x24c>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 36ff 	add.w	r6, r0, #4294967295
 800048e:	d22c      	bcs.n	80004ea <__udivmoddi4+0x29e>
 8000490:	4299      	cmp	r1, r3
 8000492:	d92a      	bls.n	80004ea <__udivmoddi4+0x29e>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1a5b      	subs	r3, r3, r1
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb3 f1f8 	udiv	r1, r3, r8
 80004a0:	fb08 3311 	mls	r3, r8, r1, r3
 80004a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a8:	fb01 f307 	mul.w	r3, r1, r7
 80004ac:	42a3      	cmp	r3, r4
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x276>
 80004b0:	eb1c 0404 	adds.w	r4, ip, r4
 80004b4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b8:	d213      	bcs.n	80004e2 <__udivmoddi4+0x296>
 80004ba:	42a3      	cmp	r3, r4
 80004bc:	d911      	bls.n	80004e2 <__udivmoddi4+0x296>
 80004be:	3902      	subs	r1, #2
 80004c0:	4464      	add	r4, ip
 80004c2:	1ae4      	subs	r4, r4, r3
 80004c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c8:	e739      	b.n	800033e <__udivmoddi4+0xf2>
 80004ca:	4604      	mov	r4, r0
 80004cc:	e6f0      	b.n	80002b0 <__udivmoddi4+0x64>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e706      	b.n	80002e0 <__udivmoddi4+0x94>
 80004d2:	45c8      	cmp	r8, r9
 80004d4:	d2ae      	bcs.n	8000434 <__udivmoddi4+0x1e8>
 80004d6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004da:	eb63 0c07 	sbc.w	ip, r3, r7
 80004de:	3801      	subs	r0, #1
 80004e0:	e7a8      	b.n	8000434 <__udivmoddi4+0x1e8>
 80004e2:	4631      	mov	r1, r6
 80004e4:	e7ed      	b.n	80004c2 <__udivmoddi4+0x276>
 80004e6:	4603      	mov	r3, r0
 80004e8:	e799      	b.n	800041e <__udivmoddi4+0x1d2>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e7d4      	b.n	8000498 <__udivmoddi4+0x24c>
 80004ee:	46d6      	mov	lr, sl
 80004f0:	e77f      	b.n	80003f2 <__udivmoddi4+0x1a6>
 80004f2:	4463      	add	r3, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e74d      	b.n	8000394 <__udivmoddi4+0x148>
 80004f8:	4606      	mov	r6, r0
 80004fa:	4623      	mov	r3, r4
 80004fc:	4608      	mov	r0, r1
 80004fe:	e70f      	b.n	8000320 <__udivmoddi4+0xd4>
 8000500:	3e02      	subs	r6, #2
 8000502:	4463      	add	r3, ip
 8000504:	e730      	b.n	8000368 <__udivmoddi4+0x11c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	@ 0x30
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b77      	ldr	r3, [pc, #476]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000526:	4a76      	ldr	r2, [pc, #472]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	@ 0x30
 800052e:	4b74      	ldr	r3, [pc, #464]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	4b71      	ldr	r3, [pc, #452]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053e:	4a70      	ldr	r2, [pc, #448]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000544:	6313      	str	r3, [r2, #48]	@ 0x30
 8000546:	4b6e      	ldr	r3, [pc, #440]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b6b      	ldr	r3, [pc, #428]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a6a      	ldr	r2, [pc, #424]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b68      	ldr	r3, [pc, #416]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b65      	ldr	r3, [pc, #404]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	4a64      	ldr	r2, [pc, #400]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	@ 0x30
 8000576:	4b62      	ldr	r3, [pc, #392]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000582:	4b5f      	ldr	r3, [pc, #380]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a5e      	ldr	r2, [pc, #376]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
 800058e:	4b5c      	ldr	r3, [pc, #368]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800059a:	4b59      	ldr	r3, [pc, #356]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a58      	ldr	r2, [pc, #352]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 80005a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b56      	ldr	r3, [pc, #344]	@ (8000700 <MX_GPIO_Init+0x1f4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005b8:	4852      	ldr	r0, [pc, #328]	@ (8000704 <MX_GPIO_Init+0x1f8>)
 80005ba:	f000 fea1 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	@ 0x40
 80005c2:	4851      	ldr	r0, [pc, #324]	@ (8000708 <MX_GPIO_Init+0x1fc>)
 80005c4:	f000 fe9c 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	484b      	ldr	r0, [pc, #300]	@ (800070c <MX_GPIO_Init+0x200>)
 80005e0:	f000 fce2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005e4:	2332      	movs	r3, #50	@ 0x32
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f4:	230b      	movs	r3, #11
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4843      	ldr	r0, [pc, #268]	@ (800070c <MX_GPIO_Init+0x200>)
 8000600:	f000 fcd2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000604:	2386      	movs	r3, #134	@ 0x86
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000614:	230b      	movs	r3, #11
 8000616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	483c      	ldr	r0, [pc, #240]	@ (8000710 <MX_GPIO_Init+0x204>)
 8000620:	f000 fcc2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000624:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	4831      	ldr	r0, [pc, #196]	@ (8000704 <MX_GPIO_Init+0x1f8>)
 800063e:	f000 fcb3 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000650:	2303      	movs	r3, #3
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000654:	230b      	movs	r3, #11
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	4829      	ldr	r0, [pc, #164]	@ (8000704 <MX_GPIO_Init+0x1f8>)
 8000660:	f000 fca2 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000664:	2340      	movs	r3, #64	@ 0x40
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4823      	ldr	r0, [pc, #140]	@ (8000708 <MX_GPIO_Init+0x1fc>)
 800067c:	f000 fc94 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	481d      	ldr	r0, [pc, #116]	@ (8000708 <MX_GPIO_Init+0x1fc>)
 8000694:	f000 fc88 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000698:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006aa:	230a      	movs	r3, #10
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	4816      	ldr	r0, [pc, #88]	@ (8000710 <MX_GPIO_Init+0x204>)
 80006b6:	f000 fc77 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4810      	ldr	r0, [pc, #64]	@ (8000710 <MX_GPIO_Init+0x204>)
 80006d0:	f000 fc6a 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006d4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e6:	230b      	movs	r3, #11
 80006e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_GPIO_Init+0x1fc>)
 80006f2:	f000 fc59 	bl	8000fa8 <HAL_GPIO_Init>

}
 80006f6:	bf00      	nop
 80006f8:	3730      	adds	r7, #48	@ 0x30
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40020400 	.word	0x40020400
 8000708:	40021800 	.word	0x40021800
 800070c:	40020800 	.word	0x40020800
 8000710:	40020000 	.word	0x40020000

08000714 <HAL_UART_RxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(huart==&huart3){
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4a3d      	ldr	r2, [pc, #244]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d172      	bne.n	800080a <HAL_UART_RxCpltCallback+0xf6>
	  if(strcmp((char*)Message, "LD1_1")==0){
 8000724:	493c      	ldr	r1, [pc, #240]	@ (8000818 <HAL_UART_RxCpltCallback+0x104>)
 8000726:	483d      	ldr	r0, [pc, #244]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 8000728:	f7ff fd6e 	bl	8000208 <strcmp>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d10a      	bne.n	8000748 <HAL_UART_RxCpltCallback+0x34>
		  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 8000732:	2205      	movs	r2, #5
 8000734:	4939      	ldr	r1, [pc, #228]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 8000736:	4837      	ldr	r0, [pc, #220]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 8000738:	f001 ff72 	bl	8002620 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2101      	movs	r1, #1
 8000740:	4837      	ldr	r0, [pc, #220]	@ (8000820 <HAL_UART_RxCpltCallback+0x10c>)
 8000742:	f000 fddd 	bl	8001300 <HAL_GPIO_WritePin>
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8000746:	e060      	b.n	800080a <HAL_UART_RxCpltCallback+0xf6>
	  else if(strcmp((char*)Message, "LD2_1")==0){
 8000748:	4936      	ldr	r1, [pc, #216]	@ (8000824 <HAL_UART_RxCpltCallback+0x110>)
 800074a:	4834      	ldr	r0, [pc, #208]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 800074c:	f7ff fd5c 	bl	8000208 <strcmp>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d10a      	bne.n	800076c <HAL_UART_RxCpltCallback+0x58>
		  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 8000756:	2205      	movs	r2, #5
 8000758:	4930      	ldr	r1, [pc, #192]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 800075a:	482e      	ldr	r0, [pc, #184]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 800075c:	f001 ff60 	bl	8002620 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2180      	movs	r1, #128	@ 0x80
 8000764:	482e      	ldr	r0, [pc, #184]	@ (8000820 <HAL_UART_RxCpltCallback+0x10c>)
 8000766:	f000 fdcb 	bl	8001300 <HAL_GPIO_WritePin>
}
 800076a:	e04e      	b.n	800080a <HAL_UART_RxCpltCallback+0xf6>
	  else if(strcmp((char*)Message, "LD3_1")==0){
 800076c:	492e      	ldr	r1, [pc, #184]	@ (8000828 <HAL_UART_RxCpltCallback+0x114>)
 800076e:	482b      	ldr	r0, [pc, #172]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 8000770:	f7ff fd4a 	bl	8000208 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d10b      	bne.n	8000792 <HAL_UART_RxCpltCallback+0x7e>
		  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 800077a:	2205      	movs	r2, #5
 800077c:	4927      	ldr	r1, [pc, #156]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 800077e:	4825      	ldr	r0, [pc, #148]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 8000780:	f001 ff4e 	bl	8002620 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800078a:	4825      	ldr	r0, [pc, #148]	@ (8000820 <HAL_UART_RxCpltCallback+0x10c>)
 800078c:	f000 fdb8 	bl	8001300 <HAL_GPIO_WritePin>
}
 8000790:	e03b      	b.n	800080a <HAL_UART_RxCpltCallback+0xf6>
	  else if(strcmp((char*)Message, "LD1_0")==0){
 8000792:	4926      	ldr	r1, [pc, #152]	@ (800082c <HAL_UART_RxCpltCallback+0x118>)
 8000794:	4821      	ldr	r0, [pc, #132]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 8000796:	f7ff fd37 	bl	8000208 <strcmp>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10a      	bne.n	80007b6 <HAL_UART_RxCpltCallback+0xa2>
		  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 80007a0:	2205      	movs	r2, #5
 80007a2:	491e      	ldr	r1, [pc, #120]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 80007a4:	481b      	ldr	r0, [pc, #108]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 80007a6:	f001 ff3b 	bl	8002620 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2101      	movs	r1, #1
 80007ae:	481c      	ldr	r0, [pc, #112]	@ (8000820 <HAL_UART_RxCpltCallback+0x10c>)
 80007b0:	f000 fda6 	bl	8001300 <HAL_GPIO_WritePin>
}
 80007b4:	e029      	b.n	800080a <HAL_UART_RxCpltCallback+0xf6>
	  else if(strcmp((char*)Message, "LD2_0")==0){
 80007b6:	491e      	ldr	r1, [pc, #120]	@ (8000830 <HAL_UART_RxCpltCallback+0x11c>)
 80007b8:	4818      	ldr	r0, [pc, #96]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 80007ba:	f7ff fd25 	bl	8000208 <strcmp>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d10a      	bne.n	80007da <HAL_UART_RxCpltCallback+0xc6>
		  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 80007c4:	2205      	movs	r2, #5
 80007c6:	4915      	ldr	r1, [pc, #84]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 80007c8:	4812      	ldr	r0, [pc, #72]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 80007ca:	f001 ff29 	bl	8002620 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2180      	movs	r1, #128	@ 0x80
 80007d2:	4813      	ldr	r0, [pc, #76]	@ (8000820 <HAL_UART_RxCpltCallback+0x10c>)
 80007d4:	f000 fd94 	bl	8001300 <HAL_GPIO_WritePin>
}
 80007d8:	e017      	b.n	800080a <HAL_UART_RxCpltCallback+0xf6>
	  else if(strcmp((char*)Message, "LD3_0")==0){
 80007da:	4916      	ldr	r1, [pc, #88]	@ (8000834 <HAL_UART_RxCpltCallback+0x120>)
 80007dc:	480f      	ldr	r0, [pc, #60]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 80007de:	f7ff fd13 	bl	8000208 <strcmp>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10b      	bne.n	8000800 <HAL_UART_RxCpltCallback+0xec>
		  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 80007e8:	2205      	movs	r2, #5
 80007ea:	490c      	ldr	r1, [pc, #48]	@ (800081c <HAL_UART_RxCpltCallback+0x108>)
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 80007ee:	f001 ff17 	bl	8002620 <HAL_UART_Receive_IT>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <HAL_UART_RxCpltCallback+0x10c>)
 80007fa:	f000 fd81 	bl	8001300 <HAL_GPIO_WritePin>
}
 80007fe:	e004      	b.n	800080a <HAL_UART_RxCpltCallback+0xf6>
		  HAL_UART_Transmit_IT(&huart3, (unsigned char*)WrongMessage, sizeof(WrongMessage)-1);
 8000800:	220f      	movs	r2, #15
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <HAL_UART_RxCpltCallback+0x124>)
 8000804:	4803      	ldr	r0, [pc, #12]	@ (8000814 <HAL_UART_RxCpltCallback+0x100>)
 8000806:	f001 fead 	bl	8002564 <HAL_UART_Transmit_IT>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000040 	.word	0x20000040
 8000818:	08003c2c 	.word	0x08003c2c
 800081c:	20000038 	.word	0x20000038
 8000820:	40020400 	.word	0x40020400
 8000824:	08003c34 	.word	0x08003c34
 8000828:	08003c3c 	.word	0x08003c3c
 800082c:	08003c44 	.word	0x08003c44
 8000830:	08003c4c 	.word	0x08003c4c
 8000834:	08003c54 	.word	0x08003c54
 8000838:	20000000 	.word	0x20000000

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 f9b1 	bl	8000ba6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f810 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f7ff fe60 	bl	800050c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800084c:	f000 f8ea 	bl	8000a24 <MX_USART3_UART_Init>
#endif
#if TASK==4
  HAL_UART_Transmit_IT(&huart3, &Message, 1);
#endif
#if TASK==5
  HAL_UART_Receive_IT(&huart3, Message, SIZE_OF_MESSAGE);
 8000850:	2205      	movs	r2, #5
 8000852:	4903      	ldr	r1, [pc, #12]	@ (8000860 <main+0x24>)
 8000854:	4803      	ldr	r0, [pc, #12]	@ (8000864 <main+0x28>)
 8000856:	f001 fee3 	bl	8002620 <HAL_UART_Receive_IT>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800085a:	bf00      	nop
 800085c:	e7fd      	b.n	800085a <main+0x1e>
 800085e:	bf00      	nop
 8000860:	20000038 	.word	0x20000038
 8000864:	20000040 	.word	0x20000040

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0320 	add.w	r3, r7, #32
 8000872:	2230      	movs	r2, #48	@ 0x30
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 f99f 	bl	8003bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800088c:	f000 fd52 	bl	8001334 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <SystemClock_Config+0xc8>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	4a26      	ldr	r2, [pc, #152]	@ (8000930 <SystemClock_Config+0xc8>)
 8000896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089a:	6413      	str	r3, [r2, #64]	@ 0x40
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <SystemClock_Config+0xc8>)
 800089e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008a8:	4b22      	ldr	r3, [pc, #136]	@ (8000934 <SystemClock_Config+0xcc>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008b0:	4a20      	ldr	r2, [pc, #128]	@ (8000934 <SystemClock_Config+0xcc>)
 80008b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <SystemClock_Config+0xcc>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008dc:	2348      	movs	r3, #72	@ 0x48
 80008de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008e4:	2303      	movs	r3, #3
 80008e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e8:	f107 0320 	add.w	r3, r7, #32
 80008ec:	4618      	mov	r0, r3
 80008ee:	f000 fd31 	bl	8001354 <HAL_RCC_OscConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f8:	f000 f81e 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008fc:	230f      	movs	r3, #15
 80008fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000900:	2302      	movs	r3, #2
 8000902:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	2102      	movs	r1, #2
 8000918:	4618      	mov	r0, r3
 800091a:	f000 ffbf 	bl	800189c <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000924:	f000 f808 	bl	8000938 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3750      	adds	r7, #80	@ 0x50
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40023800 	.word	0x40023800
 8000934:	40007000 	.word	0x40007000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_MspInit+0x44>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	4a0e      	ldr	r2, [pc, #56]	@ (8000988 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	@ 0x40
 8000956:	4b0c      	ldr	r3, [pc, #48]	@ (8000988 <HAL_MspInit+0x44>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_MspInit+0x44>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <HAL_MspInit+0x44>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_MspInit+0x44>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	bf00      	nop
 80009a2:	e7fd      	b.n	80009a0 <MemManage_Handler+0x4>

080009a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <BusFault_Handler+0x4>

080009ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <UsageFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e2:	f000 f91d 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80009f0:	4802      	ldr	r0, [pc, #8]	@ (80009fc <USART3_IRQHandler+0x10>)
 80009f2:	f001 fe59 	bl	80026a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000040 	.word	0x20000040

08000a00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a2a:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <MX_USART3_UART_Init+0x5c>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_USART3_UART_Init+0x58>)
 8000a68:	f001 fd2e 	bl	80024c8 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a72:	f7ff ff61 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000040 	.word	0x20000040
 8000a80:	40004800 	.word	0x40004800

08000a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b0aa      	sub	sp, #168	@ 0xa8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2284      	movs	r2, #132	@ 0x84
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f003 f888 	bl	8003bba <memset>
  if(uartHandle->Instance==USART3)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a26      	ldr	r2, [pc, #152]	@ (8000b48 <HAL_UART_MspInit+0xc4>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d144      	bne.n	8000b3e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ab8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 f910 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ace:	f7ff ff33 	bl	8000938 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <HAL_UART_MspInit+0xc8>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b4c <HAL_UART_MspInit+0xc8>)
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b1b      	ldr	r3, [pc, #108]	@ (8000b4c <HAL_UART_MspInit+0xc8>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <HAL_UART_MspInit+0xc8>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <HAL_UART_MspInit+0xc8>)
 8000af0:	f043 0308 	orr.w	r3, r3, #8
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_UART_MspInit+0xc8>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b02:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b26:	4619      	mov	r1, r3
 8000b28:	4809      	ldr	r0, [pc, #36]	@ (8000b50 <HAL_UART_MspInit+0xcc>)
 8000b2a:	f000 fa3d 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	2027      	movs	r0, #39	@ 0x27
 8000b34:	f000 f96f 	bl	8000e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b38:	2027      	movs	r0, #39	@ 0x27
 8000b3a:	f000 f988 	bl	8000e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b3e:	bf00      	nop
 8000b40:	37a8      	adds	r7, #168	@ 0xa8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004800 	.word	0x40004800
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b58:	f7ff ff52 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f003 f823 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fe59 	bl	800083c <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b98:	08003c84 	.word	0x08003c84
  ldr r2, =_sbss
 8000b9c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ba0:	200000cc 	.word	0x200000cc

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>

08000ba6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000baa:	2003      	movs	r0, #3
 8000bac:	f000 f928 	bl	8000e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb0:	2000      	movs	r0, #0
 8000bb2:	f000 f805 	bl	8000bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bb6:	f7ff fec5 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc8:	4b12      	ldr	r3, [pc, #72]	@ (8000c14 <HAL_InitTick+0x54>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_InitTick+0x58>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4618      	mov	r0, r3
 8000be0:	f000 f943 	bl	8000e6a <HAL_SYSTICK_Config>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00e      	b.n	8000c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d80a      	bhi.n	8000c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f90b 	bl	8000e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c00:	4a06      	ldr	r2, [pc, #24]	@ (8000c1c <HAL_InitTick+0x5c>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	e000      	b.n	8000c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000010 	.word	0x20000010
 8000c18:	20000018 	.word	0x20000018
 8000c1c:	20000014 	.word	0x20000014

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000018 	.word	0x20000018
 8000c44:	200000c8 	.word	0x200000c8

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200000c8 	.word	0x200000c8

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00
 8000ca4:	05fa0000 	.word	0x05fa0000

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4907      	ldr	r1, [pc, #28]	@ (8000cfc <__NVIC_EnableIRQ+0x38>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000e100 	.word	0xe000e100

08000d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db0a      	blt.n	8000d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	490c      	ldr	r1, [pc, #48]	@ (8000d4c <__NVIC_SetPriority+0x4c>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d28:	e00a      	b.n	8000d40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	b2da      	uxtb	r2, r3
 8000d2e:	4908      	ldr	r1, [pc, #32]	@ (8000d50 <__NVIC_SetPriority+0x50>)
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	3b04      	subs	r3, #4
 8000d38:	0112      	lsls	r2, r2, #4
 8000d3a:	b2d2      	uxtb	r2, r2
 8000d3c:	440b      	add	r3, r1
 8000d3e:	761a      	strb	r2, [r3, #24]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000e100 	.word	0xe000e100
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b089      	sub	sp, #36	@ 0x24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	f1c3 0307 	rsb	r3, r3, #7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	bf28      	it	cs
 8000d72:	2304      	movcs	r3, #4
 8000d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d902      	bls.n	8000d84 <NVIC_EncodePriority+0x30>
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3b03      	subs	r3, #3
 8000d82:	e000      	b.n	8000d86 <NVIC_EncodePriority+0x32>
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	401a      	ands	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	43d9      	mvns	r1, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	4313      	orrs	r3, r2
         );
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3724      	adds	r7, #36	@ 0x24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
	...

08000dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dcc:	d301      	bcc.n	8000dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e00f      	b.n	8000df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <SysTick_Config+0x40>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dda:	210f      	movs	r1, #15
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f7ff ff8e 	bl	8000d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <SysTick_Config+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dea:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <SysTick_Config+0x40>)
 8000dec:	2207      	movs	r2, #7
 8000dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	e000e010 	.word	0xe000e010

08000e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff ff29 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b086      	sub	sp, #24
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff3e 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff8e 	bl	8000d54 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5d 	bl	8000d00 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff31 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa2 	bl	8000dbc <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e90:	f7ff feda 	bl	8000c48 <HAL_GetTick>
 8000e94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d008      	beq.n	8000eb4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2280      	movs	r2, #128	@ 0x80
 8000ea6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e052      	b.n	8000f5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0216 	bic.w	r2, r2, #22
 8000ec2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	695a      	ldr	r2, [r3, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ed2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d103      	bne.n	8000ee4 <HAL_DMA_Abort+0x62>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d007      	beq.n	8000ef4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0208 	bic.w	r2, r2, #8
 8000ef2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f04:	e013      	b.n	8000f2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f06:	f7ff fe9f 	bl	8000c48 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	2b05      	cmp	r3, #5
 8000f12:	d90c      	bls.n	8000f2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2220      	movs	r2, #32
 8000f18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e015      	b.n	8000f5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0301 	and.w	r3, r3, #1
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1e4      	bne.n	8000f06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f40:	223f      	movs	r2, #63	@ 0x3f
 8000f42:	409a      	lsls	r2, r3
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d004      	beq.n	8000f80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2280      	movs	r2, #128	@ 0x80
 8000f7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00c      	b.n	8000f9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2205      	movs	r2, #5
 8000f84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f022 0201 	bic.w	r2, r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	@ 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
 8000fc6:	e175      	b.n	80012b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	697a      	ldr	r2, [r7, #20]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	f040 8164 	bne.w	80012ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d005      	beq.n	8000ffe <HAL_GPIO_Init+0x56>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d130      	bne.n	8001060 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4013      	ands	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001034:	2201      	movs	r2, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	091b      	lsrs	r3, r3, #4
 800104a:	f003 0201 	and.w	r2, r3, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	2b03      	cmp	r3, #3
 800106a:	d017      	beq.n	800109c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	2203      	movs	r2, #3
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	43db      	mvns	r3, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4013      	ands	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d123      	bne.n	80010f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3208      	adds	r2, #8
 80010b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	f003 0307 	and.w	r3, r3, #7
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	220f      	movs	r2, #15
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	691a      	ldr	r2, [r3, #16]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	08da      	lsrs	r2, r3, #3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3208      	adds	r2, #8
 80010ea:	69b9      	ldr	r1, [r7, #24]
 80010ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f003 0203 	and.w	r2, r3, #3
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800112c:	2b00      	cmp	r3, #0
 800112e:	f000 80be 	beq.w	80012ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	4b66      	ldr	r3, [pc, #408]	@ (80012cc <HAL_GPIO_Init+0x324>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a65      	ldr	r2, [pc, #404]	@ (80012cc <HAL_GPIO_Init+0x324>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b63      	ldr	r3, [pc, #396]	@ (80012cc <HAL_GPIO_Init+0x324>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800114a:	4a61      	ldr	r2, [pc, #388]	@ (80012d0 <HAL_GPIO_Init+0x328>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001156:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	220f      	movs	r2, #15
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a58      	ldr	r2, [pc, #352]	@ (80012d4 <HAL_GPIO_Init+0x32c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d037      	beq.n	80011e6 <HAL_GPIO_Init+0x23e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a57      	ldr	r2, [pc, #348]	@ (80012d8 <HAL_GPIO_Init+0x330>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d031      	beq.n	80011e2 <HAL_GPIO_Init+0x23a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a56      	ldr	r2, [pc, #344]	@ (80012dc <HAL_GPIO_Init+0x334>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d02b      	beq.n	80011de <HAL_GPIO_Init+0x236>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a55      	ldr	r2, [pc, #340]	@ (80012e0 <HAL_GPIO_Init+0x338>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d025      	beq.n	80011da <HAL_GPIO_Init+0x232>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a54      	ldr	r2, [pc, #336]	@ (80012e4 <HAL_GPIO_Init+0x33c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d01f      	beq.n	80011d6 <HAL_GPIO_Init+0x22e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a53      	ldr	r2, [pc, #332]	@ (80012e8 <HAL_GPIO_Init+0x340>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d019      	beq.n	80011d2 <HAL_GPIO_Init+0x22a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_GPIO_Init+0x344>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x226>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a51      	ldr	r2, [pc, #324]	@ (80012f0 <HAL_GPIO_Init+0x348>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x222>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a50      	ldr	r2, [pc, #320]	@ (80012f4 <HAL_GPIO_Init+0x34c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x21e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4f      	ldr	r2, [pc, #316]	@ (80012f8 <HAL_GPIO_Init+0x350>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x21a>
 80011be:	2309      	movs	r3, #9
 80011c0:	e012      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011c2:	230a      	movs	r3, #10
 80011c4:	e010      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011c6:	2308      	movs	r3, #8
 80011c8:	e00e      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011ca:	2307      	movs	r3, #7
 80011cc:	e00c      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011ce:	2306      	movs	r3, #6
 80011d0:	e00a      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011d2:	2305      	movs	r3, #5
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011d6:	2304      	movs	r3, #4
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x240>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	@ (80012d0 <HAL_GPIO_Init+0x328>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b3d      	ldr	r3, [pc, #244]	@ (80012fc <HAL_GPIO_Init+0x354>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a34      	ldr	r2, [pc, #208]	@ (80012fc <HAL_GPIO_Init+0x354>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b32      	ldr	r3, [pc, #200]	@ (80012fc <HAL_GPIO_Init+0x354>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a29      	ldr	r2, [pc, #164]	@ (80012fc <HAL_GPIO_Init+0x354>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125a:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <HAL_GPIO_Init+0x354>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127e:	4a1f      	ldr	r2, [pc, #124]	@ (80012fc <HAL_GPIO_Init+0x354>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <HAL_GPIO_Init+0x354>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a8:	4a14      	ldr	r2, [pc, #80]	@ (80012fc <HAL_GPIO_Init+0x354>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f ae86 	bls.w	8000fc8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	@ 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40021400 	.word	0x40021400
 80012ec:	40021800 	.word	0x40021800
 80012f0:	40021c00 	.word	0x40021c00
 80012f4:	40022000 	.word	0x40022000
 80012f8:	40022400 	.word	0x40022400
 80012fc:	40013c00 	.word	0x40013c00

08001300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	807b      	strh	r3, [r7, #2]
 800130c:	4613      	mov	r3, r2
 800130e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001310:	787b      	ldrb	r3, [r7, #1]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800131c:	e003      	b.n	8001326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	041a      	lsls	r2, r3, #16
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	619a      	str	r2, [r3, #24]
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001338:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a04      	ldr	r2, [pc, #16]	@ (8001350 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800133e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40007000 	.word	0x40007000

08001354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800135c:	2300      	movs	r3, #0
 800135e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e291      	b.n	800188e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8087 	beq.w	8001486 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001378:	4b96      	ldr	r3, [pc, #600]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 030c 	and.w	r3, r3, #12
 8001380:	2b04      	cmp	r3, #4
 8001382:	d00c      	beq.n	800139e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001384:	4b93      	ldr	r3, [pc, #588]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 030c 	and.w	r3, r3, #12
 800138c:	2b08      	cmp	r3, #8
 800138e:	d112      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62>
 8001390:	4b90      	ldr	r3, [pc, #576]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001398:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800139c:	d10b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139e:	4b8d      	ldr	r3, [pc, #564]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d06c      	beq.n	8001484 <HAL_RCC_OscConfig+0x130>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d168      	bne.n	8001484 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e26b      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x7a>
 80013c0:	4b84      	ldr	r3, [pc, #528]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a83      	ldr	r2, [pc, #524]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	e02e      	b.n	800142c <HAL_RCC_OscConfig+0xd8>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x9c>
 80013d6:	4b7f      	ldr	r3, [pc, #508]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7e      	ldr	r2, [pc, #504]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b7c      	ldr	r3, [pc, #496]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a7b      	ldr	r2, [pc, #492]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0xd8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0xc0>
 80013fa:	4b76      	ldr	r3, [pc, #472]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a75      	ldr	r2, [pc, #468]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b73      	ldr	r3, [pc, #460]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a72      	ldr	r2, [pc, #456]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0xd8>
 8001414:	4b6f      	ldr	r3, [pc, #444]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a6e      	ldr	r2, [pc, #440]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b6c      	ldr	r3, [pc, #432]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a6b      	ldr	r2, [pc, #428]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d013      	beq.n	800145c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fc08 	bl	8000c48 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc04 	bl	8000c48 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	@ 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e21f      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b61      	ldr	r3, [pc, #388]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0xe8>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145c:	f7ff fbf4 	bl	8000c48 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fbf0 	bl	8000c48 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	@ 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e20b      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001476:	4b57      	ldr	r3, [pc, #348]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x110>
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d069      	beq.n	8001566 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001492:	4b50      	ldr	r3, [pc, #320]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00b      	beq.n	80014b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800149e:	4b4d      	ldr	r3, [pc, #308]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d11c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x190>
 80014aa:	4b4a      	ldr	r3, [pc, #296]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x17a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e1df      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	493d      	ldr	r1, [pc, #244]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014e2:	e040      	b.n	8001566 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a38      	ldr	r2, [pc, #224]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fba6 	bl	8000c48 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fba2 	bl	8000c48 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1bd      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001512:	4b30      	ldr	r3, [pc, #192]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b2d      	ldr	r3, [pc, #180]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4929      	ldr	r1, [pc, #164]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
 8001532:	e018      	b.n	8001566 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001534:	4b27      	ldr	r3, [pc, #156]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a26      	ldr	r2, [pc, #152]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb82 	bl	8000c48 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fb7e 	bl	8000c48 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e199      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d038      	beq.n	80015e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d019      	beq.n	80015ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b16      	ldr	r3, [pc, #88]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 800157c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800157e:	4a15      	ldr	r2, [pc, #84]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001586:	f7ff fb5f 	bl	8000c48 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff fb5b 	bl	8000c48 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e176      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a0:	4b0c      	ldr	r3, [pc, #48]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80015a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x23a>
 80015ac:	e01a      	b.n	80015e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ae:	4b09      	ldr	r3, [pc, #36]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80015b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b2:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_RCC_OscConfig+0x280>)
 80015b4:	f023 0301 	bic.w	r3, r3, #1
 80015b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ba:	f7ff fb45 	bl	8000c48 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c0:	e00a      	b.n	80015d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fb41 	bl	8000c48 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d903      	bls.n	80015d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e15c      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
 80015d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d8:	4b91      	ldr	r3, [pc, #580]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80015da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1ee      	bne.n	80015c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 80a4 	beq.w	800173a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10d      	bne.n	800161a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b88      	ldr	r3, [pc, #544]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	4a87      	ldr	r2, [pc, #540]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	@ 0x40
 800160a:	4b85      	ldr	r3, [pc, #532]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001616:	2301      	movs	r3, #1
 8001618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161a:	4b82      	ldr	r3, [pc, #520]	@ (8001824 <HAL_RCC_OscConfig+0x4d0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d118      	bne.n	8001658 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001626:	4b7f      	ldr	r3, [pc, #508]	@ (8001824 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a7e      	ldr	r2, [pc, #504]	@ (8001824 <HAL_RCC_OscConfig+0x4d0>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb09 	bl	8000c48 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163a:	f7ff fb05 	bl	8000c48 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b64      	cmp	r3, #100	@ 0x64
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e120      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164c:	4b75      	ldr	r3, [pc, #468]	@ (8001824 <HAL_RCC_OscConfig+0x4d0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d106      	bne.n	800166e <HAL_RCC_OscConfig+0x31a>
 8001660:	4b6f      	ldr	r3, [pc, #444]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001664:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	@ 0x70
 800166c:	e02d      	b.n	80016ca <HAL_RCC_OscConfig+0x376>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x33c>
 8001676:	4b6a      	ldr	r3, [pc, #424]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167a:	4a69      	ldr	r2, [pc, #420]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800167c:	f023 0301 	bic.w	r3, r3, #1
 8001680:	6713      	str	r3, [r2, #112]	@ 0x70
 8001682:	4b67      	ldr	r3, [pc, #412]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001686:	4a66      	ldr	r2, [pc, #408]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001688:	f023 0304 	bic.w	r3, r3, #4
 800168c:	6713      	str	r3, [r2, #112]	@ 0x70
 800168e:	e01c      	b.n	80016ca <HAL_RCC_OscConfig+0x376>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2b05      	cmp	r3, #5
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x35e>
 8001698:	4b61      	ldr	r3, [pc, #388]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800169a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800169c:	4a60      	ldr	r2, [pc, #384]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800169e:	f043 0304 	orr.w	r3, r3, #4
 80016a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b0:	e00b      	b.n	80016ca <HAL_RCC_OscConfig+0x376>
 80016b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	4b58      	ldr	r3, [pc, #352]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c2:	4a57      	ldr	r2, [pc, #348]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016c4:	f023 0304 	bic.w	r3, r3, #4
 80016c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff fab9 	bl	8000c48 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff fab5 	bl	8000c48 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e0ce      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ee      	beq.n	80016da <HAL_RCC_OscConfig+0x386>
 80016fc:	e014      	b.n	8001728 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff faa3 	bl	8000c48 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	e00a      	b.n	800171c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fa9f 	bl	8000c48 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0b8      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	4b40      	ldr	r3, [pc, #256]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800171e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1ee      	bne.n	8001706 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4b3c      	ldr	r3, [pc, #240]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001732:	4a3b      	ldr	r2, [pc, #236]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a4 	beq.w	800188c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001744:	4b36      	ldr	r3, [pc, #216]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d06b      	beq.n	8001828 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d149      	bne.n	80017ec <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001758:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a30      	ldr	r2, [pc, #192]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 800175e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff fa70 	bl	8000c48 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fa6c 	bl	8000c48 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e087      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	019b      	lsls	r3, r3, #6
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	041b      	lsls	r3, r3, #16
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	061b      	lsls	r3, r3, #24
 80017ae:	4313      	orrs	r3, r2
 80017b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80017b6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a18      	ldr	r2, [pc, #96]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fa40 	bl	8000c48 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fa3c 	bl	8000c48 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e057      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x478>
 80017ea:	e04f      	b.n	800188c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 80017f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fa26 	bl	8000c48 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff fa22 	bl	8000c48 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e03d      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <HAL_RCC_OscConfig+0x4cc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x4ac>
 800181e:	e035      	b.n	800188c <HAL_RCC_OscConfig+0x538>
 8001820:	40023800 	.word	0x40023800
 8001824:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x544>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d028      	beq.n	8001888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d121      	bne.n	8001888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184e:	429a      	cmp	r2, r3
 8001850:	d11a      	bne.n	8001888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001858:	4013      	ands	r3, r2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800185e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001860:	4293      	cmp	r3, r2
 8001862:	d111      	bne.n	8001888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	3b01      	subs	r3, #1
 8001872:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001874:	429a      	cmp	r2, r3
 8001876:	d107      	bne.n	8001888 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0d0      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 030f 	and.w	r3, r3, #15
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d910      	bls.n	80018e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c2:	4b67      	ldr	r3, [pc, #412]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 020f 	bic.w	r2, r3, #15
 80018ca:	4965      	ldr	r1, [pc, #404]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d2:	4b63      	ldr	r3, [pc, #396]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d001      	beq.n	80018e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e0b8      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d020      	beq.n	8001932 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018fc:	4b59      	ldr	r3, [pc, #356]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a58      	ldr	r2, [pc, #352]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001902:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001906:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001914:	4b53      	ldr	r3, [pc, #332]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a52      	ldr	r2, [pc, #328]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 800191a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001920:	4b50      	ldr	r3, [pc, #320]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	494d      	ldr	r1, [pc, #308]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d040      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d107      	bne.n	8001956 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	4b47      	ldr	r3, [pc, #284]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d115      	bne.n	800197e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e07f      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800195e:	4b41      	ldr	r3, [pc, #260]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d109      	bne.n	800197e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e073      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800196e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06b      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800197e:	4b39      	ldr	r3, [pc, #228]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f023 0203 	bic.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	4936      	ldr	r1, [pc, #216]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 800198c:	4313      	orrs	r3, r2
 800198e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001990:	f7ff f95a 	bl	8000c48 <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff f956 	bl	8000c48 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e053      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 020c 	and.w	r2, r3, #12
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	429a      	cmp	r2, r3
 80019be:	d1eb      	bne.n	8001998 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c0:	4b27      	ldr	r3, [pc, #156]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 030f 	and.w	r3, r3, #15
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d210      	bcs.n	80019f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f023 020f 	bic.w	r2, r3, #15
 80019d6:	4922      	ldr	r1, [pc, #136]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019de:	4b20      	ldr	r3, [pc, #128]	@ (8001a60 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e032      	b.n	8001a56 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	4916      	ldr	r1, [pc, #88]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d009      	beq.n	8001a2e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a1a:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	00db      	lsls	r3, r3, #3
 8001a28:	490e      	ldr	r1, [pc, #56]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2e:	f000 f821 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	490a      	ldr	r1, [pc, #40]	@ (8001a68 <HAL_RCC_ClockConfig+0x1cc>)
 8001a40:	5ccb      	ldrb	r3, [r1, r3]
 8001a42:	fa22 f303 	lsr.w	r3, r2, r3
 8001a46:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1d0>)
 8001a48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <HAL_RCC_ClockConfig+0x1d4>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff f8b6 	bl	8000bc0 <HAL_InitTick>

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08003c5c 	.word	0x08003c5c
 8001a6c:	20000010 	.word	0x20000010
 8001a70:	20000014 	.word	0x20000014

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a78:	b094      	sub	sp, #80	@ 0x50
 8001a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a80:	2300      	movs	r3, #0
 8001a82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a84:	2300      	movs	r3, #0
 8001a86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a8c:	4b79      	ldr	r3, [pc, #484]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d00d      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x40>
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	f200 80e1 	bhi.w	8001c60 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x34>
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa6:	e0db      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aac:	e0db      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aae:	4b73      	ldr	r3, [pc, #460]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ab0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ab2:	e0d8      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001abc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001abe:	4b6d      	ldr	r3, [pc, #436]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d063      	beq.n	8001b92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b6a      	ldr	r3, [pc, #424]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ad4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001adc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	462b      	mov	r3, r5
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af8:	0150      	lsls	r0, r2, #5
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4621      	mov	r1, r4
 8001b00:	1a51      	subs	r1, r2, r1
 8001b02:	6139      	str	r1, [r7, #16]
 8001b04:	4629      	mov	r1, r5
 8001b06:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0a:	617b      	str	r3, [r7, #20]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b18:	4659      	mov	r1, fp
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b22:	4651      	mov	r1, sl
 8001b24:	018a      	lsls	r2, r1, #6
 8001b26:	4651      	mov	r1, sl
 8001b28:	ebb2 0801 	subs.w	r8, r2, r1
 8001b2c:	4659      	mov	r1, fp
 8001b2e:	eb63 0901 	sbc.w	r9, r3, r1
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b46:	4690      	mov	r8, r2
 8001b48:	4699      	mov	r9, r3
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	eb18 0303 	adds.w	r3, r8, r3
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	462b      	mov	r3, r5
 8001b54:	eb49 0303 	adc.w	r3, r9, r3
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b66:	4629      	mov	r1, r5
 8001b68:	024b      	lsls	r3, r1, #9
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b70:	4621      	mov	r1, r4
 8001b72:	024a      	lsls	r2, r1, #9
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b84:	f7fe fb4a 	bl	800021c <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b90:	e058      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ba2:	623b      	str	r3, [r7, #32]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001bac:	4642      	mov	r2, r8
 8001bae:	464b      	mov	r3, r9
 8001bb0:	f04f 0000 	mov.w	r0, #0
 8001bb4:	f04f 0100 	mov.w	r1, #0
 8001bb8:	0159      	lsls	r1, r3, #5
 8001bba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bbe:	0150      	lsls	r0, r2, #5
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4641      	mov	r1, r8
 8001bc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bca:	4649      	mov	r1, r9
 8001bcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001be0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be4:	ebb2 040a 	subs.w	r4, r2, sl
 8001be8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	00eb      	lsls	r3, r5, #3
 8001bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bfa:	00e2      	lsls	r2, r4, #3
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	4643      	mov	r3, r8
 8001c02:	18e3      	adds	r3, r4, r3
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	464b      	mov	r3, r9
 8001c08:	eb45 0303 	adc.w	r3, r5, r3
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	028b      	lsls	r3, r1, #10
 8001c1e:	4621      	mov	r1, r4
 8001c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c24:	4621      	mov	r1, r4
 8001c26:	028a      	lsls	r2, r1, #10
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	61fa      	str	r2, [r7, #28]
 8001c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c38:	f7fe faf0 	bl	800021c <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c44:	4b0b      	ldr	r3, [pc, #44]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	0c1b      	lsrs	r3, r3, #16
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	3301      	adds	r3, #1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c5e:	e002      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3750      	adds	r7, #80	@ 0x50
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c72:	bf00      	nop
 8001c74:	40023800 	.word	0x40023800
 8001c78:	00f42400 	.word	0x00f42400
 8001c7c:	007a1200 	.word	0x007a1200

08001c80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000010 	.word	0x20000010

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff0 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	0a9b      	lsrs	r3, r3, #10
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	@ (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	08003c6c 	.word	0x08003c6c

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff ffdc 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	0b5b      	lsrs	r3, r3, #13
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	@ (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	08003c6c 	.word	0x08003c6c

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d012      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d10:	4b69      	ldr	r3, [pc, #420]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a68      	ldr	r2, [pc, #416]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d16:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001d1a:	6093      	str	r3, [r2, #8]
 8001d1c:	4b66      	ldr	r3, [pc, #408]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d24:	4964      	ldr	r1, [pc, #400]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d017      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d42:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d50:	4959      	ldr	r1, [pc, #356]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d60:	d101      	bne.n	8001d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d017      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d84:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	494a      	ldr	r1, [pc, #296]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 808b 	beq.w	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	4a39      	ldr	r2, [pc, #228]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd8:	4b37      	ldr	r3, [pc, #220]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001de4:	4b35      	ldr	r3, [pc, #212]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a34      	ldr	r2, [pc, #208]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df0:	f7fe ff2a 	bl	8000c48 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7fe ff26 	bl	8000c48 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	@ 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e357      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e16:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d035      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d02e      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e42:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e48:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e54:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e56:	4a18      	ldr	r2, [pc, #96]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e5c:	4b16      	ldr	r3, [pc, #88]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d114      	bne.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7fe feee 	bl	8000c48 <HAL_GetTick>
 8001e6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe feea 	bl	8000c48 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e319      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ee      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e9e:	d111      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001ea0:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001eae:	400b      	ands	r3, r1
 8001eb0:	4901      	ldr	r1, [pc, #4]	@ (8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	608b      	str	r3, [r1, #8]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	0ffffcff 	.word	0x0ffffcff
 8001ec4:	4baa      	ldr	r3, [pc, #680]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4aa9      	ldr	r2, [pc, #676]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eca:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ece:	6093      	str	r3, [r2, #8]
 8001ed0:	4ba7      	ldr	r3, [pc, #668]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	49a4      	ldr	r1, [pc, #656]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0310 	and.w	r3, r3, #16
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d010      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001eee:	4ba0      	ldr	r3, [pc, #640]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ef4:	4a9e      	ldr	r2, [pc, #632]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001efa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001efe:	4b9c      	ldr	r3, [pc, #624]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f00:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f08:	4999      	ldr	r1, [pc, #612]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00a      	beq.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f1c:	4b94      	ldr	r3, [pc, #592]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f2a:	4991      	ldr	r1, [pc, #580]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f3e:	4b8c      	ldr	r3, [pc, #560]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f4c:	4988      	ldr	r1, [pc, #544]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00a      	beq.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f60:	4b83      	ldr	r3, [pc, #524]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f6e:	4980      	ldr	r1, [pc, #512]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00a      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f82:	4b7b      	ldr	r3, [pc, #492]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f90:	4977      	ldr	r1, [pc, #476]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00a      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fa4:	4b72      	ldr	r3, [pc, #456]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	496f      	ldr	r1, [pc, #444]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	f023 020c 	bic.w	r2, r3, #12
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd4:	4966      	ldr	r1, [pc, #408]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fe8:	4b61      	ldr	r3, [pc, #388]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fee:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	495e      	ldr	r1, [pc, #376]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800200a:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002010:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002018:	4955      	ldr	r1, [pc, #340]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800202c:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002032:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800203a:	494d      	ldr	r1, [pc, #308]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800204e:	4b48      	ldr	r3, [pc, #288]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002054:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205c:	4944      	ldr	r1, [pc, #272]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002070:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002076:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800207e:	493c      	ldr	r1, [pc, #240]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002098:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a0:	4933      	ldr	r1, [pc, #204]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020b4:	4b2e      	ldr	r3, [pc, #184]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ba:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020c2:	492b      	ldr	r1, [pc, #172]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d011      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020d6:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020dc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020e4:	4922      	ldr	r1, [pc, #136]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020f4:	d101      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002106:	2301      	movs	r3, #1
 8002108:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002116:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002124:	4912      	ldr	r1, [pc, #72]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00b      	beq.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002138:	4b0d      	ldr	r3, [pc, #52]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800213e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002148:	4909      	ldr	r1, [pc, #36]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d006      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80d9 	beq.w	8002316 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002164:	4b02      	ldr	r3, [pc, #8]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a01      	ldr	r2, [pc, #4]	@ (8002170 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800216e:	e001      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002170:	40023800 	.word	0x40023800
 8002174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002176:	f7fe fd67 	bl	8000c48 <HAL_GetTick>
 800217a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800217c:	e008      	b.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800217e:	f7fe fd63 	bl	8000c48 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	@ 0x64
 800218a:	d901      	bls.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e194      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002190:	4b6c      	ldr	r3, [pc, #432]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d021      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x504>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d11d      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80021b0:	4b64      	ldr	r3, [pc, #400]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021b6:	0c1b      	lsrs	r3, r3, #16
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021be:	4b61      	ldr	r3, [pc, #388]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	019a      	lsls	r2, r3, #6
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	431a      	orrs	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	061b      	lsls	r3, r3, #24
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	071b      	lsls	r3, r3, #28
 80021e4:	4957      	ldr	r1, [pc, #348]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002200:	d00a      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800220a:	2b00      	cmp	r3, #0
 800220c:	d02e      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002216:	d129      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002218:	4b4a      	ldr	r3, [pc, #296]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800221a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800221e:	0c1b      	lsrs	r3, r3, #16
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002226:	4b47      	ldr	r3, [pc, #284]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002228:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800222c:	0f1b      	lsrs	r3, r3, #28
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	019a      	lsls	r2, r3, #6
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	041b      	lsls	r3, r3, #16
 800223e:	431a      	orrs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	431a      	orrs	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	071b      	lsls	r3, r3, #28
 800224c:	493d      	ldr	r1, [pc, #244]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002254:	4b3b      	ldr	r3, [pc, #236]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002256:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800225a:	f023 021f 	bic.w	r2, r3, #31
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002262:	3b01      	subs	r3, #1
 8002264:	4937      	ldr	r1, [pc, #220]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01d      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002278:	4b32      	ldr	r3, [pc, #200]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800227a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800227e:	0e1b      	lsrs	r3, r3, #24
 8002280:	f003 030f 	and.w	r3, r3, #15
 8002284:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002286:	4b2f      	ldr	r3, [pc, #188]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800228c:	0f1b      	lsrs	r3, r3, #28
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	019a      	lsls	r2, r3, #6
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	041b      	lsls	r3, r3, #16
 80022a0:	431a      	orrs	r2, r3
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	431a      	orrs	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	071b      	lsls	r3, r3, #28
 80022ac:	4925      	ldr	r1, [pc, #148]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d011      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	019a      	lsls	r2, r3, #6
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	041b      	lsls	r3, r3, #16
 80022cc:	431a      	orrs	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	071b      	lsls	r3, r3, #28
 80022dc:	4919      	ldr	r1, [pc, #100]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a16      	ldr	r2, [pc, #88]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80022ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80022ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022f0:	f7fe fcaa 	bl	8000c48 <HAL_GetTick>
 80022f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80022f8:	f7fe fca6 	bl	8000c48 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	@ 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0d7      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0f0      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b01      	cmp	r3, #1
 800231a:	f040 80cd 	bne.w	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232a:	f7fe fc8d 	bl	8000c48 <HAL_GetTick>
 800232e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002332:	f7fe fc89 	bl	8000c48 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b64      	cmp	r3, #100	@ 0x64
 800233e:	d903      	bls.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0ba      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002344:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002348:	4b5e      	ldr	r3, [pc, #376]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002354:	d0ed      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002372:	2b00      	cmp	r3, #0
 8002374:	d02e      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12a      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800237e:	4b51      	ldr	r3, [pc, #324]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800238c:	4b4d      	ldr	r3, [pc, #308]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002392:	0f1b      	lsrs	r3, r3, #28
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	019a      	lsls	r2, r3, #6
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	041b      	lsls	r3, r3, #16
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	431a      	orrs	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	071b      	lsls	r3, r3, #28
 80023b2:	4944      	ldr	r1, [pc, #272]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80023ba:	4b42      	ldr	r3, [pc, #264]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023c0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	3b01      	subs	r3, #1
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	493d      	ldr	r1, [pc, #244]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d022      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023e8:	d11d      	bne.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80023ea:	4b36      	ldr	r3, [pc, #216]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f0:	0e1b      	lsrs	r3, r3, #24
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023f8:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	0f1b      	lsrs	r3, r3, #28
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	019a      	lsls	r2, r3, #6
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	061b      	lsls	r3, r3, #24
 8002418:	431a      	orrs	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	4929      	ldr	r1, [pc, #164]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d028      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002432:	4b24      	ldr	r3, [pc, #144]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002438:	0e1b      	lsrs	r3, r3, #24
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002440:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	019a      	lsls	r2, r3, #6
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	431a      	orrs	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	071b      	lsls	r3, r3, #28
 8002466:	4917      	ldr	r1, [pc, #92]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800246e:	4b15      	ldr	r3, [pc, #84]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002474:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247c:	4911      	ldr	r1, [pc, #68]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002484:	4b0f      	ldr	r3, [pc, #60]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0e      	ldr	r2, [pc, #56]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800248e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002490:	f7fe fbda 	bl	8000c48 <HAL_GetTick>
 8002494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002498:	f7fe fbd6 	bl	8000c48 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	@ 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e007      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b6:	d1ef      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800

080024c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e040      	b.n	800255c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe faca 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2224      	movs	r2, #36	@ 0x24
 80024f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0201 	bic.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fe20 	bl	8003154 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fbb9 	bl	8002c8c <UART_SetConfig>
 800251a:	4603      	mov	r3, r0
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e01b      	b.n	800255c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689a      	ldr	r2, [r3, #8]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fe9f 	bl	8003298 <UART_CheckIdleState>
 800255a:	4603      	mov	r3, r0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002564:	b480      	push	{r7}
 8002566:	b08b      	sub	sp, #44	@ 0x2c
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	4613      	mov	r3, r2
 8002570:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002576:	2b20      	cmp	r3, #32
 8002578:	d147      	bne.n	800260a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d002      	beq.n	8002586 <HAL_UART_Transmit_IT+0x22>
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e040      	b.n	800260c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2221      	movs	r2, #33	@ 0x21
 80025b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025bc:	d107      	bne.n	80025ce <HAL_UART_Transmit_IT+0x6a>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d103      	bne.n	80025ce <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <HAL_UART_Transmit_IT+0xb4>)
 80025ca:	66da      	str	r2, [r3, #108]	@ 0x6c
 80025cc:	e002      	b.n	80025d4 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a12      	ldr	r2, [pc, #72]	@ (800261c <HAL_UART_Transmit_IT+0xb8>)
 80025d2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	e853 3f00 	ldrex	r3, [r3]
 80025e0:	613b      	str	r3, [r7, #16]
   return(result);
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f6:	69f9      	ldr	r1, [r7, #28]
 80025f8:	6a3a      	ldr	r2, [r7, #32]
 80025fa:	e841 2300 	strex	r3, r2, [r1]
 80025fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e6      	bne.n	80025d4 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	4618      	mov	r0, r3
 800260e:	372c      	adds	r7, #44	@ 0x2c
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	08003757 	.word	0x08003757
 800261c:	080036a1 	.word	0x080036a1

08002620 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	4613      	mov	r3, r2
 800262c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002634:	2b20      	cmp	r3, #32
 8002636:	d132      	bne.n	800269e <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <HAL_UART_Receive_IT+0x24>
 800263e:	88fb      	ldrh	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e02b      	b.n	80026a0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d018      	beq.n	800268e <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	613b      	str	r3, [r7, #16]
   return(result);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267e:	69f9      	ldr	r1, [r7, #28]
 8002680:	6a3a      	ldr	r2, [r7, #32]
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	61bb      	str	r3, [r7, #24]
   return(result);
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e6      	bne.n	800265c <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800268e:	88fb      	ldrh	r3, [r7, #6]
 8002690:	461a      	mov	r2, r3
 8002692:	68b9      	ldr	r1, [r7, #8]
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fec3 	bl	8003420 <UART_Start_Receive_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	e000      	b.n	80026a0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800269e:	2302      	movs	r3, #2
  }
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3728      	adds	r7, #40	@ 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b0ba      	sub	sp, #232	@ 0xe8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80026d2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80026d6:	4013      	ands	r3, r2
 80026d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80026dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d115      	bne.n	8002710 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80026e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026e8:	f003 0320 	and.w	r3, r3, #32
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00f      	beq.n	8002710 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026f4:	f003 0320 	and.w	r3, r3, #32
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8297 	beq.w	8002c34 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	4798      	blx	r3
      }
      return;
 800270e:	e291      	b.n	8002c34 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8117 	beq.w	8002948 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800271a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d106      	bne.n	8002734 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002726:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800272a:	4b85      	ldr	r3, [pc, #532]	@ (8002940 <HAL_UART_IRQHandler+0x298>)
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 810a 	beq.w	8002948 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d011      	beq.n	8002764 <HAL_UART_IRQHandler+0xbc>
 8002740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d00b      	beq.n	8002764 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d011      	beq.n	8002794 <HAL_UART_IRQHandler+0xec>
 8002770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2202      	movs	r2, #2
 8002782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800278a:	f043 0204 	orr.w	r2, r3, #4
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002798:	f003 0304 	and.w	r3, r3, #4
 800279c:	2b00      	cmp	r3, #0
 800279e:	d011      	beq.n	80027c4 <HAL_UART_IRQHandler+0x11c>
 80027a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00b      	beq.n	80027c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2204      	movs	r2, #4
 80027b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ba:	f043 0202 	orr.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d017      	beq.n	8002800 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027d4:	f003 0320 	and.w	r3, r3, #32
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d105      	bne.n	80027e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2208      	movs	r2, #8
 80027ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027f6:	f043 0208 	orr.w	r2, r3, #8
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_UART_IRQHandler+0x18a>
 800280c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002810:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00c      	beq.n	8002832 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002820:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 81fd 	beq.w	8002c38 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800283e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002842:	f003 0320 	and.w	r3, r3, #32
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00d      	beq.n	8002866 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800284a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287a:	2b40      	cmp	r3, #64	@ 0x40
 800287c:	d005      	beq.n	800288a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800287e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002882:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002886:	2b00      	cmp	r3, #0
 8002888:	d04f      	beq.n	800292a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fe8e 	bl	80035ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289a:	2b40      	cmp	r3, #64	@ 0x40
 800289c:	d141      	bne.n	8002922 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3308      	adds	r3, #8
 80028a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80028b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3308      	adds	r3, #8
 80028c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80028ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80028ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80028d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80028e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1d9      	bne.n	800289e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d013      	beq.n	800291a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f6:	4a13      	ldr	r2, [pc, #76]	@ (8002944 <HAL_UART_IRQHandler+0x29c>)
 80028f8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fb2f 	bl	8000f62 <HAL_DMA_Abort_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d017      	beq.n	800293a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800290e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002914:	4610      	mov	r0, r2
 8002916:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002918:	e00f      	b.n	800293a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9a0 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002920:	e00b      	b.n	800293a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f99c 	bl	8002c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	e007      	b.n	800293a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f998 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002938:	e17e      	b.n	8002c38 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293a:	bf00      	nop
    return;
 800293c:	e17c      	b.n	8002c38 <HAL_UART_IRQHandler+0x590>
 800293e:	bf00      	nop
 8002940:	04000120 	.word	0x04000120
 8002944:	08003675 	.word	0x08003675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800294c:	2b01      	cmp	r3, #1
 800294e:	f040 814c 	bne.w	8002bea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 8145 	beq.w	8002bea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 813e 	beq.w	8002bea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2210      	movs	r2, #16
 8002974:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	f040 80b6 	bne.w	8002af2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002992:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8150 	beq.w	8002c3c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80029a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029a6:	429a      	cmp	r2, r3
 80029a8:	f080 8148 	bcs.w	8002c3c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80029b2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c0:	f000 8086 	beq.w	8002ad0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029d0:	e853 3f00 	ldrex	r3, [r3]
 80029d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80029d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80029ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80029f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029fe:	e841 2300 	strex	r3, r2, [r1]
 8002a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1da      	bne.n	80029c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3308      	adds	r3, #8
 8002a14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a18:	e853 3f00 	ldrex	r3, [r3]
 8002a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002a3e:	e841 2300 	strex	r3, r2, [r1]
 8002a42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e1      	bne.n	8002a0e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a54:	e853 3f00 	ldrex	r3, [r3]
 8002a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a76:	e841 2300 	strex	r3, r2, [r1]
 8002a7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1e3      	bne.n	8002a4a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002aa0:	f023 0310 	bic.w	r3, r3, #16
 8002aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ab4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ab8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e4      	bne.n	8002a90 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe f9d9 	bl	8000e82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f8c2 	bl	8002c74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002af0:	e0a4      	b.n	8002c3c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8096 	beq.w	8002c40 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8002b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8091 	beq.w	8002c40 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002b48:	e841 2300 	strex	r3, r2, [r1]
 8002b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1e4      	bne.n	8002b1e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	3308      	adds	r3, #8
 8002b5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	e853 3f00 	ldrex	r3, [r3]
 8002b62:	623b      	str	r3, [r7, #32]
   return(result);
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3308      	adds	r3, #8
 8002b74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b78:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e3      	bne.n	8002b54 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	e853 3f00 	ldrex	r3, [r3]
 8002bac:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f023 0310 	bic.w	r3, r3, #16
 8002bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	e841 2300 	strex	r3, r2, [r1]
 8002bce:	617b      	str	r3, [r7, #20]
   return(result);
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1e4      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002be0:	4619      	mov	r1, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f846 	bl	8002c74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002be8:	e02a      	b.n	8002c40 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00e      	beq.n	8002c14 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d01c      	beq.n	8002c44 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	4798      	blx	r3
    }
    return;
 8002c12:	e017      	b.n	8002c44 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <HAL_UART_IRQHandler+0x59e>
 8002c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 fdf2 	bl	8003816 <UART_EndTransmit_IT>
    return;
 8002c32:	e008      	b.n	8002c46 <HAL_UART_IRQHandler+0x59e>
      return;
 8002c34:	bf00      	nop
 8002c36:	e006      	b.n	8002c46 <HAL_UART_IRQHandler+0x59e>
    return;
 8002c38:	bf00      	nop
 8002c3a:	e004      	b.n	8002c46 <HAL_UART_IRQHandler+0x59e>
      return;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <HAL_UART_IRQHandler+0x59e>
      return;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_UART_IRQHandler+0x59e>
    return;
 8002c44:	bf00      	nop
  }

}
 8002c46:	37e8      	adds	r7, #232	@ 0xe8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4ba6      	ldr	r3, [pc, #664]	@ (8002f50 <UART_SetConfig+0x2c4>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	6979      	ldr	r1, [r7, #20]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	697a      	ldr	r2, [r7, #20]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a94      	ldr	r2, [pc, #592]	@ (8002f54 <UART_SetConfig+0x2c8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d120      	bne.n	8002d4a <UART_SetConfig+0xbe>
 8002d08:	4b93      	ldr	r3, [pc, #588]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d816      	bhi.n	8002d44 <UART_SetConfig+0xb8>
 8002d16:	a201      	add	r2, pc, #4	@ (adr r2, 8002d1c <UART_SetConfig+0x90>)
 8002d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1c:	08002d2d 	.word	0x08002d2d
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d33 	.word	0x08002d33
 8002d28:	08002d3f 	.word	0x08002d3f
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	e150      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002d32:	2302      	movs	r3, #2
 8002d34:	77fb      	strb	r3, [r7, #31]
 8002d36:	e14d      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002d38:	2304      	movs	r3, #4
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	e14a      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002d3e:	2308      	movs	r3, #8
 8002d40:	77fb      	strb	r3, [r7, #31]
 8002d42:	e147      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002d44:	2310      	movs	r3, #16
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e144      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a83      	ldr	r2, [pc, #524]	@ (8002f5c <UART_SetConfig+0x2d0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d132      	bne.n	8002dba <UART_SetConfig+0x12e>
 8002d54:	4b80      	ldr	r3, [pc, #512]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	f003 030c 	and.w	r3, r3, #12
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d828      	bhi.n	8002db4 <UART_SetConfig+0x128>
 8002d62:	a201      	add	r2, pc, #4	@ (adr r2, 8002d68 <UART_SetConfig+0xdc>)
 8002d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d68:	08002d9d 	.word	0x08002d9d
 8002d6c:	08002db5 	.word	0x08002db5
 8002d70:	08002db5 	.word	0x08002db5
 8002d74:	08002db5 	.word	0x08002db5
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002db5 	.word	0x08002db5
 8002d80:	08002db5 	.word	0x08002db5
 8002d84:	08002db5 	.word	0x08002db5
 8002d88:	08002da3 	.word	0x08002da3
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002db5 	.word	0x08002db5
 8002d94:	08002db5 	.word	0x08002db5
 8002d98:	08002daf 	.word	0x08002daf
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e118      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002da2:	2302      	movs	r3, #2
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e115      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002da8:	2304      	movs	r3, #4
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e112      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002dae:	2308      	movs	r3, #8
 8002db0:	77fb      	strb	r3, [r7, #31]
 8002db2:	e10f      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002db4:	2310      	movs	r3, #16
 8002db6:	77fb      	strb	r3, [r7, #31]
 8002db8:	e10c      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a68      	ldr	r2, [pc, #416]	@ (8002f60 <UART_SetConfig+0x2d4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d120      	bne.n	8002e06 <UART_SetConfig+0x17a>
 8002dc4:	4b64      	ldr	r3, [pc, #400]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002dce:	2b30      	cmp	r3, #48	@ 0x30
 8002dd0:	d013      	beq.n	8002dfa <UART_SetConfig+0x16e>
 8002dd2:	2b30      	cmp	r3, #48	@ 0x30
 8002dd4:	d814      	bhi.n	8002e00 <UART_SetConfig+0x174>
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d009      	beq.n	8002dee <UART_SetConfig+0x162>
 8002dda:	2b20      	cmp	r3, #32
 8002ddc:	d810      	bhi.n	8002e00 <UART_SetConfig+0x174>
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <UART_SetConfig+0x15c>
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d006      	beq.n	8002df4 <UART_SetConfig+0x168>
 8002de6:	e00b      	b.n	8002e00 <UART_SetConfig+0x174>
 8002de8:	2300      	movs	r3, #0
 8002dea:	77fb      	strb	r3, [r7, #31]
 8002dec:	e0f2      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002dee:	2302      	movs	r3, #2
 8002df0:	77fb      	strb	r3, [r7, #31]
 8002df2:	e0ef      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002df4:	2304      	movs	r3, #4
 8002df6:	77fb      	strb	r3, [r7, #31]
 8002df8:	e0ec      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002dfa:	2308      	movs	r3, #8
 8002dfc:	77fb      	strb	r3, [r7, #31]
 8002dfe:	e0e9      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e00:	2310      	movs	r3, #16
 8002e02:	77fb      	strb	r3, [r7, #31]
 8002e04:	e0e6      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a56      	ldr	r2, [pc, #344]	@ (8002f64 <UART_SetConfig+0x2d8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d120      	bne.n	8002e52 <UART_SetConfig+0x1c6>
 8002e10:	4b51      	ldr	r3, [pc, #324]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e1c:	d013      	beq.n	8002e46 <UART_SetConfig+0x1ba>
 8002e1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e20:	d814      	bhi.n	8002e4c <UART_SetConfig+0x1c0>
 8002e22:	2b80      	cmp	r3, #128	@ 0x80
 8002e24:	d009      	beq.n	8002e3a <UART_SetConfig+0x1ae>
 8002e26:	2b80      	cmp	r3, #128	@ 0x80
 8002e28:	d810      	bhi.n	8002e4c <UART_SetConfig+0x1c0>
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d002      	beq.n	8002e34 <UART_SetConfig+0x1a8>
 8002e2e:	2b40      	cmp	r3, #64	@ 0x40
 8002e30:	d006      	beq.n	8002e40 <UART_SetConfig+0x1b4>
 8002e32:	e00b      	b.n	8002e4c <UART_SetConfig+0x1c0>
 8002e34:	2300      	movs	r3, #0
 8002e36:	77fb      	strb	r3, [r7, #31]
 8002e38:	e0cc      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	77fb      	strb	r3, [r7, #31]
 8002e3e:	e0c9      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e40:	2304      	movs	r3, #4
 8002e42:	77fb      	strb	r3, [r7, #31]
 8002e44:	e0c6      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e46:	2308      	movs	r3, #8
 8002e48:	77fb      	strb	r3, [r7, #31]
 8002e4a:	e0c3      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e4c:	2310      	movs	r3, #16
 8002e4e:	77fb      	strb	r3, [r7, #31]
 8002e50:	e0c0      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a44      	ldr	r2, [pc, #272]	@ (8002f68 <UART_SetConfig+0x2dc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d125      	bne.n	8002ea8 <UART_SetConfig+0x21c>
 8002e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e6a:	d017      	beq.n	8002e9c <UART_SetConfig+0x210>
 8002e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e70:	d817      	bhi.n	8002ea2 <UART_SetConfig+0x216>
 8002e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e76:	d00b      	beq.n	8002e90 <UART_SetConfig+0x204>
 8002e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e7c:	d811      	bhi.n	8002ea2 <UART_SetConfig+0x216>
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <UART_SetConfig+0x1fe>
 8002e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e86:	d006      	beq.n	8002e96 <UART_SetConfig+0x20a>
 8002e88:	e00b      	b.n	8002ea2 <UART_SetConfig+0x216>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	77fb      	strb	r3, [r7, #31]
 8002e8e:	e0a1      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e90:	2302      	movs	r3, #2
 8002e92:	77fb      	strb	r3, [r7, #31]
 8002e94:	e09e      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e96:	2304      	movs	r3, #4
 8002e98:	77fb      	strb	r3, [r7, #31]
 8002e9a:	e09b      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002e9c:	2308      	movs	r3, #8
 8002e9e:	77fb      	strb	r3, [r7, #31]
 8002ea0:	e098      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002ea2:	2310      	movs	r3, #16
 8002ea4:	77fb      	strb	r3, [r7, #31]
 8002ea6:	e095      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2f      	ldr	r2, [pc, #188]	@ (8002f6c <UART_SetConfig+0x2e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d125      	bne.n	8002efe <UART_SetConfig+0x272>
 8002eb2:	4b29      	ldr	r3, [pc, #164]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ebc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ec0:	d017      	beq.n	8002ef2 <UART_SetConfig+0x266>
 8002ec2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ec6:	d817      	bhi.n	8002ef8 <UART_SetConfig+0x26c>
 8002ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ecc:	d00b      	beq.n	8002ee6 <UART_SetConfig+0x25a>
 8002ece:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ed2:	d811      	bhi.n	8002ef8 <UART_SetConfig+0x26c>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <UART_SetConfig+0x254>
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002edc:	d006      	beq.n	8002eec <UART_SetConfig+0x260>
 8002ede:	e00b      	b.n	8002ef8 <UART_SetConfig+0x26c>
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	77fb      	strb	r3, [r7, #31]
 8002ee4:	e076      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	e073      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002eec:	2304      	movs	r3, #4
 8002eee:	77fb      	strb	r3, [r7, #31]
 8002ef0:	e070      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	77fb      	strb	r3, [r7, #31]
 8002ef6:	e06d      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	77fb      	strb	r3, [r7, #31]
 8002efc:	e06a      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <UART_SetConfig+0x2e4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d138      	bne.n	8002f7a <UART_SetConfig+0x2ee>
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <UART_SetConfig+0x2cc>)
 8002f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002f12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f16:	d017      	beq.n	8002f48 <UART_SetConfig+0x2bc>
 8002f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f1c:	d82a      	bhi.n	8002f74 <UART_SetConfig+0x2e8>
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f22:	d00b      	beq.n	8002f3c <UART_SetConfig+0x2b0>
 8002f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f28:	d824      	bhi.n	8002f74 <UART_SetConfig+0x2e8>
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <UART_SetConfig+0x2aa>
 8002f2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f32:	d006      	beq.n	8002f42 <UART_SetConfig+0x2b6>
 8002f34:	e01e      	b.n	8002f74 <UART_SetConfig+0x2e8>
 8002f36:	2300      	movs	r3, #0
 8002f38:	77fb      	strb	r3, [r7, #31]
 8002f3a:	e04b      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e048      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002f42:	2304      	movs	r3, #4
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e045      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002f48:	2308      	movs	r3, #8
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e042      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002f4e:	bf00      	nop
 8002f50:	efff69f3 	.word	0xefff69f3
 8002f54:	40011000 	.word	0x40011000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40004400 	.word	0x40004400
 8002f60:	40004800 	.word	0x40004800
 8002f64:	40004c00 	.word	0x40004c00
 8002f68:	40005000 	.word	0x40005000
 8002f6c:	40011400 	.word	0x40011400
 8002f70:	40007800 	.word	0x40007800
 8002f74:	2310      	movs	r3, #16
 8002f76:	77fb      	strb	r3, [r7, #31]
 8002f78:	e02c      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	@ (8003148 <UART_SetConfig+0x4bc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d125      	bne.n	8002fd0 <UART_SetConfig+0x344>
 8002f84:	4b71      	ldr	r3, [pc, #452]	@ (800314c <UART_SetConfig+0x4c0>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002f8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f92:	d017      	beq.n	8002fc4 <UART_SetConfig+0x338>
 8002f94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f98:	d817      	bhi.n	8002fca <UART_SetConfig+0x33e>
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f9e:	d00b      	beq.n	8002fb8 <UART_SetConfig+0x32c>
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fa4:	d811      	bhi.n	8002fca <UART_SetConfig+0x33e>
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <UART_SetConfig+0x326>
 8002faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fae:	d006      	beq.n	8002fbe <UART_SetConfig+0x332>
 8002fb0:	e00b      	b.n	8002fca <UART_SetConfig+0x33e>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e00d      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	e00a      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002fbe:	2304      	movs	r3, #4
 8002fc0:	77fb      	strb	r3, [r7, #31]
 8002fc2:	e007      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002fc4:	2308      	movs	r3, #8
 8002fc6:	77fb      	strb	r3, [r7, #31]
 8002fc8:	e004      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002fca:	2310      	movs	r3, #16
 8002fcc:	77fb      	strb	r3, [r7, #31]
 8002fce:	e001      	b.n	8002fd4 <UART_SetConfig+0x348>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fdc:	d15b      	bne.n	8003096 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002fde:	7ffb      	ldrb	r3, [r7, #31]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d828      	bhi.n	8003036 <UART_SetConfig+0x3aa>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <UART_SetConfig+0x360>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08003011 	.word	0x08003011
 8002ff0:	08003019 	.word	0x08003019
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	08003037 	.word	0x08003037
 8002ffc:	08003027 	.word	0x08003027
 8003000:	08003037 	.word	0x08003037
 8003004:	08003037 	.word	0x08003037
 8003008:	08003037 	.word	0x08003037
 800300c:	0800302f 	.word	0x0800302f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003010:	f7fe fe42 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8003014:	61b8      	str	r0, [r7, #24]
        break;
 8003016:	e013      	b.n	8003040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003018:	f7fe fe52 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 800301c:	61b8      	str	r0, [r7, #24]
        break;
 800301e:	e00f      	b.n	8003040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003020:	4b4b      	ldr	r3, [pc, #300]	@ (8003150 <UART_SetConfig+0x4c4>)
 8003022:	61bb      	str	r3, [r7, #24]
        break;
 8003024:	e00c      	b.n	8003040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003026:	f7fe fd25 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 800302a:	61b8      	str	r0, [r7, #24]
        break;
 800302c:	e008      	b.n	8003040 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800302e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003032:	61bb      	str	r3, [r7, #24]
        break;
 8003034:	e004      	b.n	8003040 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	77bb      	strb	r3, [r7, #30]
        break;
 800303e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d074      	beq.n	8003130 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	005a      	lsls	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	085b      	lsrs	r3, r3, #1
 8003050:	441a      	add	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	fbb2 f3f3 	udiv	r3, r2, r3
 800305a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	d916      	bls.n	8003090 <UART_SetConfig+0x404>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003068:	d212      	bcs.n	8003090 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f023 030f 	bic.w	r3, r3, #15
 8003072:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	085b      	lsrs	r3, r3, #1
 8003078:	b29b      	uxth	r3, r3
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	b29a      	uxth	r2, r3
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	4313      	orrs	r3, r2
 8003084:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	89fa      	ldrh	r2, [r7, #14]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	e04f      	b.n	8003130 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	77bb      	strb	r3, [r7, #30]
 8003094:	e04c      	b.n	8003130 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003096:	7ffb      	ldrb	r3, [r7, #31]
 8003098:	2b08      	cmp	r3, #8
 800309a:	d828      	bhi.n	80030ee <UART_SetConfig+0x462>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <UART_SetConfig+0x418>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	080030c9 	.word	0x080030c9
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	080030d9 	.word	0x080030d9
 80030b0:	080030ef 	.word	0x080030ef
 80030b4:	080030df 	.word	0x080030df
 80030b8:	080030ef 	.word	0x080030ef
 80030bc:	080030ef 	.word	0x080030ef
 80030c0:	080030ef 	.word	0x080030ef
 80030c4:	080030e7 	.word	0x080030e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030c8:	f7fe fde6 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 80030cc:	61b8      	str	r0, [r7, #24]
        break;
 80030ce:	e013      	b.n	80030f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d0:	f7fe fdf6 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 80030d4:	61b8      	str	r0, [r7, #24]
        break;
 80030d6:	e00f      	b.n	80030f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003150 <UART_SetConfig+0x4c4>)
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e00c      	b.n	80030f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030de:	f7fe fcc9 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80030e2:	61b8      	str	r0, [r7, #24]
        break;
 80030e4:	e008      	b.n	80030f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ea:	61bb      	str	r3, [r7, #24]
        break;
 80030ec:	e004      	b.n	80030f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	77bb      	strb	r3, [r7, #30]
        break;
 80030f6:	bf00      	nop
    }

    if (pclk != 0U)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d018      	beq.n	8003130 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	085a      	lsrs	r2, r3, #1
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	441a      	add	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003110:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d909      	bls.n	800312c <UART_SetConfig+0x4a0>
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800311e:	d205      	bcs.n	800312c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	b29a      	uxth	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	e001      	b.n	8003130 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800313c:	7fbb      	ldrb	r3, [r7, #30]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3720      	adds	r7, #32
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40007c00 	.word	0x40007c00
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400

08003154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00a      	beq.n	8003228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	430a      	orrs	r2, r1
 8003226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01a      	beq.n	800326a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003252:	d10a      	bne.n	800326a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	605a      	str	r2, [r3, #4]
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	@ 0x30
 800329c:	af02      	add	r7, sp, #8
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032a8:	f7fd fcce 	bl	8000c48 <HAL_GetTick>
 80032ac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d12e      	bne.n	800331a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	2200      	movs	r2, #0
 80032c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f83b 	bl	8003346 <UART_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d021      	beq.n	800331a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	69b9      	ldr	r1, [r7, #24]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	617b      	str	r3, [r7, #20]
   return(result);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e6      	bne.n	80032d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2220      	movs	r2, #32
 800330c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e011      	b.n	800333e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3728      	adds	r7, #40	@ 0x28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	4613      	mov	r3, r2
 8003354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003356:	e04f      	b.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d04b      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003360:	f7fd fc72 	bl	8000c48 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <UART_WaitOnFlagUntilTimeout+0x30>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e04e      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d037      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b80      	cmp	r3, #128	@ 0x80
 800338c:	d034      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d031      	beq.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b08      	cmp	r3, #8
 80033a0:	d110      	bne.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2208      	movs	r2, #8
 80033a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8fe 	bl	80035ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2208      	movs	r2, #8
 80033b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e029      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033d2:	d111      	bne.n	80033f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8e4 	bl	80035ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e00f      	b.n	8003418 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	4013      	ands	r3, r2
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	429a      	cmp	r2, r3
 8003414:	d0a0      	beq.n	8003358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003420:	b480      	push	{r7}
 8003422:	b097      	sub	sp, #92	@ 0x5c
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	4613      	mov	r3, r2
 800342c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	88fa      	ldrh	r2, [r7, #6]
 8003438:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	88fa      	ldrh	r2, [r7, #6]
 8003440:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003452:	d10e      	bne.n	8003472 <UART_Start_Receive_IT+0x52>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <UART_Start_Receive_IT+0x48>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003462:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003466:	e02d      	b.n	80034c4 <UART_Start_Receive_IT+0xa4>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	22ff      	movs	r2, #255	@ 0xff
 800346c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003470:	e028      	b.n	80034c4 <UART_Start_Receive_IT+0xa4>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10d      	bne.n	8003496 <UART_Start_Receive_IT+0x76>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d104      	bne.n	800348c <UART_Start_Receive_IT+0x6c>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	22ff      	movs	r2, #255	@ 0xff
 8003486:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800348a:	e01b      	b.n	80034c4 <UART_Start_Receive_IT+0xa4>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	227f      	movs	r2, #127	@ 0x7f
 8003490:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003494:	e016      	b.n	80034c4 <UART_Start_Receive_IT+0xa4>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800349e:	d10d      	bne.n	80034bc <UART_Start_Receive_IT+0x9c>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <UART_Start_Receive_IT+0x92>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	227f      	movs	r2, #127	@ 0x7f
 80034ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034b0:	e008      	b.n	80034c4 <UART_Start_Receive_IT+0xa4>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	223f      	movs	r2, #63	@ 0x3f
 80034b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80034ba:	e003      	b.n	80034c4 <UART_Start_Receive_IT+0xa4>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2222      	movs	r2, #34	@ 0x22
 80034d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3308      	adds	r3, #8
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034de:	e853 3f00 	ldrex	r3, [r3]
 80034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3308      	adds	r3, #8
 80034f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80034f4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80034f6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80034fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034fc:	e841 2300 	strex	r3, r2, [r1]
 8003500:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e5      	bne.n	80034d4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003510:	d107      	bne.n	8003522 <UART_Start_Receive_IT+0x102>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d103      	bne.n	8003522 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <UART_Start_Receive_IT+0x184>)
 800351e:	669a      	str	r2, [r3, #104]	@ 0x68
 8003520:	e002      	b.n	8003528 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a20      	ldr	r2, [pc, #128]	@ (80035a8 <UART_Start_Receive_IT+0x188>)
 8003526:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d019      	beq.n	8003564 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003538:	e853 3f00 	ldrex	r3, [r3]
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8003544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800354e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003550:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003552:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003556:	e841 2300 	strex	r3, r2, [r1]
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1e6      	bne.n	8003530 <UART_Start_Receive_IT+0x110>
 8003562:	e018      	b.n	8003596 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	e853 3f00 	ldrex	r3, [r3]
 8003570:	613b      	str	r3, [r7, #16]
   return(result);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f043 0320 	orr.w	r3, r3, #32
 8003578:	653b      	str	r3, [r7, #80]	@ 0x50
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003582:	623b      	str	r3, [r7, #32]
 8003584:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	69f9      	ldr	r1, [r7, #28]
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	e841 2300 	strex	r3, r2, [r1]
 800358e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1e6      	bne.n	8003564 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	375c      	adds	r7, #92	@ 0x5c
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	08003a13 	.word	0x08003a13
 80035a8:	0800386b 	.word	0x0800386b

080035ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b095      	sub	sp, #84	@ 0x54
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80035d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e6      	bne.n	80035b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3308      	adds	r3, #8
 80035ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	e853 3f00 	ldrex	r3, [r3]
 80035f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	f023 0301 	bic.w	r3, r3, #1
 80035fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3308      	adds	r3, #8
 8003604:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003606:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800360e:	e841 2300 	strex	r3, r2, [r1]
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1e5      	bne.n	80035e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800361e:	2b01      	cmp	r3, #1
 8003620:	d118      	bne.n	8003654 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	647b      	str	r3, [r7, #68]	@ 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	461a      	mov	r2, r3
 800363e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6979      	ldr	r1, [r7, #20]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	613b      	str	r3, [r7, #16]
   return(result);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e6      	bne.n	8003622 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003668:	bf00      	nop
 800366a:	3754      	adds	r7, #84	@ 0x54
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fae4 	bl	8002c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003698:	bf00      	nop
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b08f      	sub	sp, #60	@ 0x3c
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ac:	2b21      	cmp	r3, #33	@ 0x21
 80036ae:	d14c      	bne.n	800374a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d132      	bne.n	8003722 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e6      	bne.n	80036bc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003702:	633b      	str	r3, [r7, #48]	@ 0x30
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	461a      	mov	r2, r3
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	6979      	ldr	r1, [r7, #20]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	613b      	str	r3, [r7, #16]
   return(result);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e6      	bne.n	80036ee <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003720:	e013      	b.n	800374a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003726:	781a      	ldrb	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	1c5a      	adds	r2, r3, #1
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800374a:	bf00      	nop
 800374c:	373c      	adds	r7, #60	@ 0x3c
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003756:	b480      	push	{r7}
 8003758:	b091      	sub	sp, #68	@ 0x44
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003762:	2b21      	cmp	r3, #33	@ 0x21
 8003764:	d151      	bne.n	800380a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d132      	bne.n	80037d8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	623b      	str	r3, [r7, #32]
   return(result);
 8003780:	6a3b      	ldr	r3, [r7, #32]
 8003782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003786:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	633b      	str	r3, [r7, #48]	@ 0x30
 8003792:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003796:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800379e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e6      	bne.n	8003772 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c6:	69b9      	ldr	r1, [r7, #24]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	617b      	str	r3, [r7, #20]
   return(result);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e6      	bne.n	80037a4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80037d6:	e018      	b.n	800380a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f2:	1c9a      	adds	r2, r3, #2
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800380a:	bf00      	nop
 800380c:	3744      	adds	r7, #68	@ 0x44
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b088      	sub	sp, #32
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	e853 3f00 	ldrex	r3, [r3]
 800382a:	60bb      	str	r3, [r7, #8]
   return(result);
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003840:	6979      	ldr	r1, [r7, #20]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	e841 2300 	strex	r3, r2, [r1]
 8003848:	613b      	str	r3, [r7, #16]
   return(result);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1e6      	bne.n	800381e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff f9f5 	bl	8002c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003862:	bf00      	nop
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b09c      	sub	sp, #112	@ 0x70
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003878:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003882:	2b22      	cmp	r3, #34	@ 0x22
 8003884:	f040 80b9 	bne.w	80039fa <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003892:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003896:	b2d9      	uxtb	r1, r3
 8003898:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800389c:	b2da      	uxtb	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	400a      	ands	r2, r1
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 809c 	bne.w	8003a0a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038f2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e6      	bne.n	80038d2 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3308      	adds	r3, #8
 800390a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390e:	e853 3f00 	ldrex	r3, [r3]
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003916:	f023 0301 	bic.w	r3, r3, #1
 800391a:	667b      	str	r3, [r7, #100]	@ 0x64
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003924:	647a      	str	r2, [r7, #68]	@ 0x44
 8003926:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003928:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800392a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800392c:	e841 2300 	strex	r3, r2, [r1]
 8003930:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e5      	bne.n	8003904 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d018      	beq.n	800398c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	623b      	str	r3, [r7, #32]
   return(result);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800396e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003978:	633b      	str	r3, [r7, #48]	@ 0x30
 800397a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800397e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e6      	bne.n	800395a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003990:	2b01      	cmp	r3, #1
 8003992:	d12e      	bne.n	80039f2 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f023 0310 	bic.w	r3, r3, #16
 80039ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	69b9      	ldr	r1, [r7, #24]
 80039be:	69fa      	ldr	r2, [r7, #28]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	617b      	str	r3, [r7, #20]
   return(result);
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e6      	bne.n	800399a <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	f003 0310 	and.w	r3, r3, #16
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d103      	bne.n	80039e2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2210      	movs	r2, #16
 80039e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80039e8:	4619      	mov	r1, r3
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff f942 	bl	8002c74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039f0:	e00b      	b.n	8003a0a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fc fe8e 	bl	8000714 <HAL_UART_RxCpltCallback>
}
 80039f8:	e007      	b.n	8003a0a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699a      	ldr	r2, [r3, #24]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0208 	orr.w	r2, r2, #8
 8003a08:	619a      	str	r2, [r3, #24]
}
 8003a0a:	bf00      	nop
 8003a0c:	3770      	adds	r7, #112	@ 0x70
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b09c      	sub	sp, #112	@ 0x70
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003a20:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a2a:	2b22      	cmp	r3, #34	@ 0x22
 8003a2c:	f040 80b9 	bne.w	8003ba2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a36:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003a40:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003a44:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003a48:	4013      	ands	r3, r2
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a4e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f040 809c 	bne.w	8003bb2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a9a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a9e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e6      	bne.n	8003a7a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3308      	adds	r3, #8
 8003aca:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003acc:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e5      	bne.n	8003aac <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d018      	beq.n	8003b34 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	e853 3f00 	ldrex	r3, [r3]
 8003b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b28:	e841 2300 	strex	r3, r2, [r1]
 8003b2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1e6      	bne.n	8003b02 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d12e      	bne.n	8003b9a <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f023 0310 	bic.w	r3, r3, #16
 8003b56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6979      	ldr	r1, [r7, #20]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d103      	bne.n	8003b8a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2210      	movs	r2, #16
 8003b88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b90:	4619      	mov	r1, r3
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7ff f86e 	bl	8002c74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b98:	e00b      	b.n	8003bb2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fc fdba 	bl	8000714 <HAL_UART_RxCpltCallback>
}
 8003ba0:	e007      	b.n	8003bb2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0208 	orr.w	r2, r2, #8
 8003bb0:	619a      	str	r2, [r3, #24]
}
 8003bb2:	bf00      	nop
 8003bb4:	3770      	adds	r7, #112	@ 0x70
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <memset>:
 8003bba:	4402      	add	r2, r0
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d100      	bne.n	8003bc4 <memset+0xa>
 8003bc2:	4770      	bx	lr
 8003bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003bc8:	e7f9      	b.n	8003bbe <memset+0x4>
	...

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	4d0d      	ldr	r5, [pc, #52]	@ (8003c04 <__libc_init_array+0x38>)
 8003bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8003c08 <__libc_init_array+0x3c>)
 8003bd2:	1b64      	subs	r4, r4, r5
 8003bd4:	10a4      	asrs	r4, r4, #2
 8003bd6:	2600      	movs	r6, #0
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8003c0c <__libc_init_array+0x40>)
 8003bde:	4c0c      	ldr	r4, [pc, #48]	@ (8003c10 <__libc_init_array+0x44>)
 8003be0:	f000 f818 	bl	8003c14 <_init>
 8003be4:	1b64      	subs	r4, r4, r5
 8003be6:	10a4      	asrs	r4, r4, #2
 8003be8:	2600      	movs	r6, #0
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	08003c7c 	.word	0x08003c7c
 8003c08:	08003c7c 	.word	0x08003c7c
 8003c0c:	08003c7c 	.word	0x08003c7c
 8003c10:	08003c80 	.word	0x08003c80

08003c14 <_init>:
 8003c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c16:	bf00      	nop
 8003c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1a:	bc08      	pop	{r3}
 8003c1c:	469e      	mov	lr, r3
 8003c1e:	4770      	bx	lr

08003c20 <_fini>:
 8003c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c22:	bf00      	nop
 8003c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c26:	bc08      	pop	{r3}
 8003c28:	469e      	mov	lr, r3
 8003c2a:	4770      	bx	lr
