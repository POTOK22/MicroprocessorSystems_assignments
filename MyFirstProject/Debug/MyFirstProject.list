
MyFirstProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002d88  08002d88  00003d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002da0  08002da0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002da0  08002da0  00003da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002da8  08002da8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da8  08002da8  00003da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dac  08002dac  00003dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002db0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002dbc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002dbc  000040b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009db0  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a05  00000000  00000000  0000ddec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007f0  00000000  00000000  0000f7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000602  00000000  00000000  0000ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248bb  00000000  00000000  000105ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b430  00000000  00000000  00034ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2946  00000000  00000000  000402d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00122c1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e54  00000000  00000000  00122c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00124ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002d70 	.word	0x08002d70

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002d70 	.word	0x08002d70

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96a 	b.w	80004f4 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	460c      	mov	r4, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14e      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000244:	4694      	mov	ip, r2
 8000246:	458c      	cmp	ip, r1
 8000248:	4686      	mov	lr, r0
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	d962      	bls.n	8000316 <__udivmoddi4+0xde>
 8000250:	b14a      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000252:	f1c2 0320 	rsb	r3, r2, #32
 8000256:	4091      	lsls	r1, r2
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000260:	4319      	orrs	r1, r3
 8000262:	fa00 fe02 	lsl.w	lr, r0, r2
 8000266:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800026a:	fa1f f68c 	uxth.w	r6, ip
 800026e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000272:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000276:	fb07 1114 	mls	r1, r7, r4, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb04 f106 	mul.w	r1, r4, r6
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f104 30ff 	add.w	r0, r4, #4294967295
 800028e:	f080 8112 	bcs.w	80004b6 <__udivmoddi4+0x27e>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 810f 	bls.w	80004b6 <__udivmoddi4+0x27e>
 8000298:	3c02      	subs	r4, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a59      	subs	r1, r3, r1
 800029e:	fa1f f38e 	uxth.w	r3, lr
 80002a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a6:	fb07 1110 	mls	r1, r7, r0, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb00 f606 	mul.w	r6, r0, r6
 80002b2:	429e      	cmp	r6, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x94>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80002be:	f080 80fc 	bcs.w	80004ba <__udivmoddi4+0x282>
 80002c2:	429e      	cmp	r6, r3
 80002c4:	f240 80f9 	bls.w	80004ba <__udivmoddi4+0x282>
 80002c8:	4463      	add	r3, ip
 80002ca:	3802      	subs	r0, #2
 80002cc:	1b9b      	subs	r3, r3, r6
 80002ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002d2:	2100      	movs	r1, #0
 80002d4:	b11d      	cbz	r5, 80002de <__udivmoddi4+0xa6>
 80002d6:	40d3      	lsrs	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	e9c5 3200 	strd	r3, r2, [r5]
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d905      	bls.n	80002f2 <__udivmoddi4+0xba>
 80002e6:	b10d      	cbz	r5, 80002ec <__udivmoddi4+0xb4>
 80002e8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ec:	2100      	movs	r1, #0
 80002ee:	4608      	mov	r0, r1
 80002f0:	e7f5      	b.n	80002de <__udivmoddi4+0xa6>
 80002f2:	fab3 f183 	clz	r1, r3
 80002f6:	2900      	cmp	r1, #0
 80002f8:	d146      	bne.n	8000388 <__udivmoddi4+0x150>
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xcc>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f0c0 80f0 	bcc.w	80004e4 <__udivmoddi4+0x2ac>
 8000304:	1a86      	subs	r6, r0, r2
 8000306:	eb64 0303 	sbc.w	r3, r4, r3
 800030a:	2001      	movs	r0, #1
 800030c:	2d00      	cmp	r5, #0
 800030e:	d0e6      	beq.n	80002de <__udivmoddi4+0xa6>
 8000310:	e9c5 6300 	strd	r6, r3, [r5]
 8000314:	e7e3      	b.n	80002de <__udivmoddi4+0xa6>
 8000316:	2a00      	cmp	r2, #0
 8000318:	f040 8090 	bne.w	800043c <__udivmoddi4+0x204>
 800031c:	eba1 040c 	sub.w	r4, r1, ip
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	fa1f f78c 	uxth.w	r7, ip
 8000328:	2101      	movs	r1, #1
 800032a:	fbb4 f6f8 	udiv	r6, r4, r8
 800032e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000332:	fb08 4416 	mls	r4, r8, r6, r4
 8000336:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033a:	fb07 f006 	mul.w	r0, r7, r6
 800033e:	4298      	cmp	r0, r3
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x11c>
 8000342:	eb1c 0303 	adds.w	r3, ip, r3
 8000346:	f106 34ff 	add.w	r4, r6, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x11a>
 800034c:	4298      	cmp	r0, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 8000352:	4626      	mov	r6, r4
 8000354:	1a1c      	subs	r4, r3, r0
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb4 f0f8 	udiv	r0, r4, r8
 800035e:	fb08 4410 	mls	r4, r8, r0, r4
 8000362:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000366:	fb00 f707 	mul.w	r7, r0, r7
 800036a:	429f      	cmp	r7, r3
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x148>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 34ff 	add.w	r4, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x146>
 8000378:	429f      	cmp	r7, r3
 800037a:	f200 80b0 	bhi.w	80004de <__udivmoddi4+0x2a6>
 800037e:	4620      	mov	r0, r4
 8000380:	1bdb      	subs	r3, r3, r7
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0x9c>
 8000388:	f1c1 0620 	rsb	r6, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 f706 	lsr.w	r7, r2, r6
 8000392:	431f      	orrs	r7, r3
 8000394:	fa20 fc06 	lsr.w	ip, r0, r6
 8000398:	fa04 f301 	lsl.w	r3, r4, r1
 800039c:	ea43 030c 	orr.w	r3, r3, ip
 80003a0:	40f4      	lsrs	r4, r6
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	0c38      	lsrs	r0, r7, #16
 80003a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003ac:	fbb4 fef0 	udiv	lr, r4, r0
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	fb00 441e 	mls	r4, r0, lr, r4
 80003b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003bc:	fb0e f90c 	mul.w	r9, lr, ip
 80003c0:	45a1      	cmp	r9, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	d90a      	bls.n	80003de <__udivmoddi4+0x1a6>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ce:	f080 8084 	bcs.w	80004da <__udivmoddi4+0x2a2>
 80003d2:	45a1      	cmp	r9, r4
 80003d4:	f240 8081 	bls.w	80004da <__udivmoddi4+0x2a2>
 80003d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003dc:	443c      	add	r4, r7
 80003de:	eba4 0409 	sub.w	r4, r4, r9
 80003e2:	fa1f f983 	uxth.w	r9, r3
 80003e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ea:	fb00 4413 	mls	r4, r0, r3, r4
 80003ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d907      	bls.n	800040a <__udivmoddi4+0x1d2>
 80003fa:	193c      	adds	r4, r7, r4
 80003fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000400:	d267      	bcs.n	80004d2 <__udivmoddi4+0x29a>
 8000402:	45a4      	cmp	ip, r4
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0x29a>
 8000406:	3b02      	subs	r3, #2
 8000408:	443c      	add	r4, r7
 800040a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040e:	fba0 9302 	umull	r9, r3, r0, r2
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	429c      	cmp	r4, r3
 8000418:	46ce      	mov	lr, r9
 800041a:	469c      	mov	ip, r3
 800041c:	d351      	bcc.n	80004c2 <__udivmoddi4+0x28a>
 800041e:	d04e      	beq.n	80004be <__udivmoddi4+0x286>
 8000420:	b155      	cbz	r5, 8000438 <__udivmoddi4+0x200>
 8000422:	ebb8 030e 	subs.w	r3, r8, lr
 8000426:	eb64 040c 	sbc.w	r4, r4, ip
 800042a:	fa04 f606 	lsl.w	r6, r4, r6
 800042e:	40cb      	lsrs	r3, r1
 8000430:	431e      	orrs	r6, r3
 8000432:	40cc      	lsrs	r4, r1
 8000434:	e9c5 6400 	strd	r6, r4, [r5]
 8000438:	2100      	movs	r1, #0
 800043a:	e750      	b.n	80002de <__udivmoddi4+0xa6>
 800043c:	f1c2 0320 	rsb	r3, r2, #32
 8000440:	fa20 f103 	lsr.w	r1, r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa24 f303 	lsr.w	r3, r4, r3
 800044c:	4094      	lsls	r4, r2
 800044e:	430c      	orrs	r4, r1
 8000450:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000454:	fa00 fe02 	lsl.w	lr, r0, r2
 8000458:	fa1f f78c 	uxth.w	r7, ip
 800045c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000460:	fb08 3110 	mls	r1, r8, r0, r3
 8000464:	0c23      	lsrs	r3, r4, #16
 8000466:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046a:	fb00 f107 	mul.w	r1, r0, r7
 800046e:	4299      	cmp	r1, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x24c>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 36ff 	add.w	r6, r0, #4294967295
 800047a:	d22c      	bcs.n	80004d6 <__udivmoddi4+0x29e>
 800047c:	4299      	cmp	r1, r3
 800047e:	d92a      	bls.n	80004d6 <__udivmoddi4+0x29e>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1a5b      	subs	r3, r3, r1
 8000486:	b2a4      	uxth	r4, r4
 8000488:	fbb3 f1f8 	udiv	r1, r3, r8
 800048c:	fb08 3311 	mls	r3, r8, r1, r3
 8000490:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000494:	fb01 f307 	mul.w	r3, r1, r7
 8000498:	42a3      	cmp	r3, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x276>
 800049c:	eb1c 0404 	adds.w	r4, ip, r4
 80004a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a4:	d213      	bcs.n	80004ce <__udivmoddi4+0x296>
 80004a6:	42a3      	cmp	r3, r4
 80004a8:	d911      	bls.n	80004ce <__udivmoddi4+0x296>
 80004aa:	3902      	subs	r1, #2
 80004ac:	4464      	add	r4, ip
 80004ae:	1ae4      	subs	r4, r4, r3
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e739      	b.n	800032a <__udivmoddi4+0xf2>
 80004b6:	4604      	mov	r4, r0
 80004b8:	e6f0      	b.n	800029c <__udivmoddi4+0x64>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e706      	b.n	80002cc <__udivmoddi4+0x94>
 80004be:	45c8      	cmp	r8, r9
 80004c0:	d2ae      	bcs.n	8000420 <__udivmoddi4+0x1e8>
 80004c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ca:	3801      	subs	r0, #1
 80004cc:	e7a8      	b.n	8000420 <__udivmoddi4+0x1e8>
 80004ce:	4631      	mov	r1, r6
 80004d0:	e7ed      	b.n	80004ae <__udivmoddi4+0x276>
 80004d2:	4603      	mov	r3, r0
 80004d4:	e799      	b.n	800040a <__udivmoddi4+0x1d2>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e7d4      	b.n	8000484 <__udivmoddi4+0x24c>
 80004da:	46d6      	mov	lr, sl
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1a6>
 80004de:	4463      	add	r3, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e74d      	b.n	8000380 <__udivmoddi4+0x148>
 80004e4:	4606      	mov	r6, r0
 80004e6:	4623      	mov	r3, r4
 80004e8:	4608      	mov	r0, r1
 80004ea:	e70f      	b.n	800030c <__udivmoddi4+0xd4>
 80004ec:	3e02      	subs	r6, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	e730      	b.n	8000354 <__udivmoddi4+0x11c>
 80004f2:	bf00      	nop

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08c      	sub	sp, #48	@ 0x30
 80004fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 031c 	add.w	r3, r7, #28
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	4b77      	ldr	r3, [pc, #476]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a76      	ldr	r2, [pc, #472]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b74      	ldr	r3, [pc, #464]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	61bb      	str	r3, [r7, #24]
 8000524:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	4b71      	ldr	r3, [pc, #452]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a70      	ldr	r2, [pc, #448]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b6e      	ldr	r3, [pc, #440]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b6b      	ldr	r3, [pc, #428]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000542:	4a6a      	ldr	r2, [pc, #424]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000544:	f043 0301 	orr.w	r3, r3, #1
 8000548:	6313      	str	r3, [r2, #48]	@ 0x30
 800054a:	4b68      	ldr	r3, [pc, #416]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054e:	f003 0301 	and.w	r3, r3, #1
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000556:	4b65      	ldr	r3, [pc, #404]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a64      	ldr	r2, [pc, #400]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 800055c:	f043 0302 	orr.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
 8000562:	4b62      	ldr	r3, [pc, #392]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	f003 0302 	and.w	r3, r3, #2
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056e:	4b5f      	ldr	r3, [pc, #380]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	4a5e      	ldr	r2, [pc, #376]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6313      	str	r3, [r2, #48]	@ 0x30
 800057a:	4b5c      	ldr	r3, [pc, #368]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800057e:	f003 0308 	and.w	r3, r3, #8
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000586:	4b59      	ldr	r3, [pc, #356]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a58      	ldr	r2, [pc, #352]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 800058c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b56      	ldr	r3, [pc, #344]	@ (80006ec <MX_GPIO_Init+0x1f4>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80005a4:	4852      	ldr	r0, [pc, #328]	@ (80006f0 <MX_GPIO_Init+0x1f8>)
 80005a6:	f000 fe07 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2140      	movs	r1, #64	@ 0x40
 80005ae:	4851      	ldr	r0, [pc, #324]	@ (80006f4 <MX_GPIO_Init+0x1fc>)
 80005b0:	f000 fe02 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4619      	mov	r1, r3
 80005ca:	484b      	ldr	r0, [pc, #300]	@ (80006f8 <MX_GPIO_Init+0x200>)
 80005cc:	f000 fc30 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005d0:	2332      	movs	r3, #50	@ 0x32
 80005d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005dc:	2303      	movs	r3, #3
 80005de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005e0:	230b      	movs	r3, #11
 80005e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4619      	mov	r1, r3
 80005ea:	4843      	ldr	r0, [pc, #268]	@ (80006f8 <MX_GPIO_Init+0x200>)
 80005ec:	f000 fc20 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80005f0:	2386      	movs	r3, #134	@ 0x86
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f4:	2302      	movs	r3, #2
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005fc:	2303      	movs	r3, #3
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000600:	230b      	movs	r3, #11
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 031c 	add.w	r3, r7, #28
 8000608:	4619      	mov	r1, r3
 800060a:	483c      	ldr	r0, [pc, #240]	@ (80006fc <MX_GPIO_Init+0x204>)
 800060c:	f000 fc10 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000610:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2300      	movs	r3, #0
 8000620:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	4831      	ldr	r0, [pc, #196]	@ (80006f0 <MX_GPIO_Init+0x1f8>)
 800062a:	f000 fc01 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800062e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000634:	2302      	movs	r3, #2
 8000636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000640:	230b      	movs	r3, #11
 8000642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	4619      	mov	r1, r3
 800064a:	4829      	ldr	r0, [pc, #164]	@ (80006f0 <MX_GPIO_Init+0x1f8>)
 800064c:	f000 fbf0 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000650:	2340      	movs	r3, #64	@ 0x40
 8000652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 031c 	add.w	r3, r7, #28
 8000664:	4619      	mov	r1, r3
 8000666:	4823      	ldr	r0, [pc, #140]	@ (80006f4 <MX_GPIO_Init+0x1fc>)
 8000668:	f000 fbe2 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000670:	2300      	movs	r3, #0
 8000672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	481d      	ldr	r0, [pc, #116]	@ (80006f4 <MX_GPIO_Init+0x1fc>)
 8000680:	f000 fbd6 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000684:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068a:	2302      	movs	r3, #2
 800068c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000692:	2303      	movs	r3, #3
 8000694:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000696:	230a      	movs	r3, #10
 8000698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4816      	ldr	r0, [pc, #88]	@ (80006fc <MX_GPIO_Init+0x204>)
 80006a2:	f000 fbc5 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ac:	2300      	movs	r3, #0
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4810      	ldr	r0, [pc, #64]	@ (80006fc <MX_GPIO_Init+0x204>)
 80006bc:	f000 fbb8 	bl	8000e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006c0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c6:	2302      	movs	r3, #2
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ce:	2303      	movs	r3, #3
 80006d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006d2:	230b      	movs	r3, #11
 80006d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4619      	mov	r1, r3
 80006dc:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_GPIO_Init+0x1fc>)
 80006de:	f000 fba7 	bl	8000e30 <HAL_GPIO_Init>

}
 80006e2:	bf00      	nop
 80006e4:	3730      	adds	r7, #48	@ 0x30
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40021800 	.word	0x40021800
 80006f8:	40020800 	.word	0x40020800
 80006fc:	40020000 	.word	0x40020000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000706:	f000 fa2c 	bl	8000b62 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070a:	f000 f897 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f7ff fef3 	bl	80004f8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000712:	f000 f96d 	bl	80009f0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  _Bool LD1_State, LD2_State, LD3_State;
  uint8_t Counter=0;
 8000716:	2300      	movs	r3, #0
 8000718:	71fb      	strb	r3, [r7, #7]
	  LD1_State=HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
	  HAL_Delay(100);
#endif
#if TASK==2
	  LD1_State=HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 800071a:	2101      	movs	r1, #1
 800071c:	4843      	ldr	r0, [pc, #268]	@ (800082c <main+0x12c>)
 800071e:	f000 fd33 	bl	8001188 <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	bf14      	ite	ne
 8000728:	2301      	movne	r3, #1
 800072a:	2300      	moveq	r3, #0
 800072c:	71bb      	strb	r3, [r7, #6]
	  LD2_State=HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin);
 800072e:	2180      	movs	r1, #128	@ 0x80
 8000730:	483e      	ldr	r0, [pc, #248]	@ (800082c <main+0x12c>)
 8000732:	f000 fd29 	bl	8001188 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	717b      	strb	r3, [r7, #5]
	  LD3_State=HAL_GPIO_ReadPin(LD3_GPIO_Port, LD3_Pin);
 8000742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000746:	4839      	ldr	r0, [pc, #228]	@ (800082c <main+0x12c>)
 8000748:	f000 fd1e 	bl	8001188 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf14      	ite	ne
 8000752:	2301      	movne	r3, #1
 8000754:	2300      	moveq	r3, #0
 8000756:	713b      	strb	r3, [r7, #4]
	  UserBtnNow=HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 8000758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075c:	4834      	ldr	r0, [pc, #208]	@ (8000830 <main+0x130>)
 800075e:	f000 fd13 	bl	8001188 <HAL_GPIO_ReadPin>
 8000762:	4603      	mov	r3, r0
 8000764:	461a      	mov	r2, r3
 8000766:	4b33      	ldr	r3, [pc, #204]	@ (8000834 <main+0x134>)
 8000768:	701a      	strb	r2, [r3, #0]
	  if((UserBtnNow==GPIO_PIN_SET) && (UserBtnPrev==GPIO_PIN_RESET)){
 800076a:	4b32      	ldr	r3, [pc, #200]	@ (8000834 <main+0x134>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d154      	bne.n	800081c <main+0x11c>
 8000772:	4b31      	ldr	r3, [pc, #196]	@ (8000838 <main+0x138>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d150      	bne.n	800081c <main+0x11c>
		  Counter++;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
		  if(Counter==1){
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d10f      	bne.n	80007a6 <main+0xa6>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2101      	movs	r1, #1
 800078a:	4828      	ldr	r0, [pc, #160]	@ (800082c <main+0x12c>)
 800078c:	f000 fd14 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2180      	movs	r1, #128	@ 0x80
 8000794:	4825      	ldr	r0, [pc, #148]	@ (800082c <main+0x12c>)
 8000796:	f000 fd0f 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a0:	4822      	ldr	r0, [pc, #136]	@ (800082c <main+0x12c>)
 80007a2:	f000 fd09 	bl	80011b8 <HAL_GPIO_WritePin>
		  }
		  if(Counter==2){
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d10f      	bne.n	80007cc <main+0xcc>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2101      	movs	r1, #1
 80007b0:	481e      	ldr	r0, [pc, #120]	@ (800082c <main+0x12c>)
 80007b2:	f000 fd01 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2180      	movs	r1, #128	@ 0x80
 80007ba:	481c      	ldr	r0, [pc, #112]	@ (800082c <main+0x12c>)
 80007bc:	f000 fcfc 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007c6:	4819      	ldr	r0, [pc, #100]	@ (800082c <main+0x12c>)
 80007c8:	f000 fcf6 	bl	80011b8 <HAL_GPIO_WritePin>
		  }
		  if(Counter==3){
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d10f      	bne.n	80007f2 <main+0xf2>
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2101      	movs	r1, #1
 80007d6:	4815      	ldr	r0, [pc, #84]	@ (800082c <main+0x12c>)
 80007d8:	f000 fcee 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	4812      	ldr	r0, [pc, #72]	@ (800082c <main+0x12c>)
 80007e2:	f000 fce9 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007ec:	480f      	ldr	r0, [pc, #60]	@ (800082c <main+0x12c>)
 80007ee:	f000 fce3 	bl	80011b8 <HAL_GPIO_WritePin>
		  }
		  if(Counter>3){
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b03      	cmp	r3, #3
 80007f6:	d911      	bls.n	800081c <main+0x11c>
			  Counter=0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	71fb      	strb	r3, [r7, #7]
			  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2101      	movs	r1, #1
 8000800:	480a      	ldr	r0, [pc, #40]	@ (800082c <main+0x12c>)
 8000802:	f000 fcd9 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	4808      	ldr	r0, [pc, #32]	@ (800082c <main+0x12c>)
 800080c:	f000 fcd4 	bl	80011b8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <main+0x12c>)
 8000818:	f000 fcce 	bl	80011b8 <HAL_GPIO_WritePin>
		  }
	  }
	  UserBtnPrev=UserBtnNow;
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <main+0x134>)
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <main+0x138>)
 8000822:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 8000824:	2064      	movs	r0, #100	@ 0x64
 8000826:	f000 f9f9 	bl	8000c1c <HAL_Delay>
	  LD1_State=HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 800082a:	e776      	b.n	800071a <main+0x1a>
 800082c:	40020400 	.word	0x40020400
 8000830:	40020800 	.word	0x40020800
 8000834:	20000028 	.word	0x20000028
 8000838:	20000029 	.word	0x20000029

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	@ 0x50
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	@ 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fa64 	bl	8002d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000860:	f000 fcc4 	bl	80011ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	4b2a      	ldr	r3, [pc, #168]	@ (8000910 <SystemClock_Config+0xd4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000868:	4a29      	ldr	r2, [pc, #164]	@ (8000910 <SystemClock_Config+0xd4>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000870:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <SystemClock_Config+0xd4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <SystemClock_Config+0xd8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a24      	ldr	r2, [pc, #144]	@ (8000914 <SystemClock_Config+0xd8>)
 8000882:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b22      	ldr	r3, [pc, #136]	@ (8000914 <SystemClock_Config+0xd8>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000898:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008ac:	23d8      	movs	r3, #216	@ 0xd8
 80008ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008b4:	2303      	movs	r3, #3
 80008b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0320 	add.w	r3, r7, #32
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fcf5 	bl	80012ac <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80008c8:	f000 f826 	bl	8000918 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008cc:	f000 fc9e 	bl	800120c <HAL_PWREx_EnableOverDrive>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008d6:	f000 f81f 	bl	8000918 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2302      	movs	r3, #2
 80008e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80008ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008f2:	f107 030c 	add.w	r3, r7, #12
 80008f6:	2107      	movs	r1, #7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 ff7b 	bl	80017f4 <HAL_RCC_ClockConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000904:	f000 f808 	bl	8000918 <Error_Handler>
  }
}
 8000908:	bf00      	nop
 800090a:	3750      	adds	r7, #80	@ 0x50
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40007000 	.word	0x40007000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <Error_Handler+0x8>

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <HAL_MspInit+0x44>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a0e      	ldr	r2, [pc, #56]	@ (8000968 <HAL_MspInit+0x44>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <HAL_MspInit+0x44>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000942:	4b09      	ldr	r3, [pc, #36]	@ (8000968 <HAL_MspInit+0x44>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a08      	ldr	r2, [pc, #32]	@ (8000968 <HAL_MspInit+0x44>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b06      	ldr	r3, [pc, #24]	@ (8000968 <HAL_MspInit+0x44>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <NMI_Handler+0x4>

08000974 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <BusFault_Handler+0x4>

0800098c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <UsageFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c2:	f000 f90b 	bl	8000bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <SystemInit+0x20>)
 80009d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d6:	4a05      	ldr	r2, [pc, #20]	@ (80009ec <SystemInit+0x20>)
 80009d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 80009f6:	4a15      	ldr	r2, [pc, #84]	@ (8000a4c <MX_USART3_UART_Init+0x5c>)
 80009f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	@ (8000a48 <MX_USART3_UART_Init+0x58>)
 8000a34:	f001 fcf4 	bl	8002420 <HAL_UART_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f7ff ff6b 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2000002c 	.word	0x2000002c
 8000a4c:	40004800 	.word	0x40004800

08000a50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0aa      	sub	sp, #168	@ 0xa8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2284      	movs	r2, #132	@ 0x84
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 f951 	bl	8002d18 <memset>
  if(uartHandle->Instance==USART3)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a22      	ldr	r2, [pc, #136]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13c      	bne.n	8000afa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a84:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f8d6 	bl	8001c40 <HAL_RCCEx_PeriphCLKConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a9a:	f7ff ff3d 	bl	8000918 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa2:	4a19      	ldr	r2, [pc, #100]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aaa:	4b17      	ldr	r3, [pc, #92]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a13      	ldr	r2, [pc, #76]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <HAL_UART_MspInit+0xb8>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ace:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ae8:	2307      	movs	r3, #7
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000af2:	4619      	mov	r1, r3
 8000af4:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <HAL_UART_MspInit+0xbc>)
 8000af6:	f000 f99b 	bl	8000e30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000afa:	bf00      	nop
 8000afc:	37a8      	adds	r7, #168	@ 0xa8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40004800 	.word	0x40004800
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020c00 	.word	0x40020c00

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b14:	f7ff ff5a 	bl	80009cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b18:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b1a:	490d      	ldr	r1, [pc, #52]	@ (8000b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b30:	4c0a      	ldr	r4, [pc, #40]	@ (8000b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f002 f8f3 	bl	8002d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff fddd 	bl	8000700 <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b54:	08002db0 	.word	0x08002db0
  ldr r2, =_sbss
 8000b58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b5c:	200000b8 	.word	0x200000b8

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>

08000b62 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
 8000b68:	f000 f92e 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f805 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b72:	f7ff fed7 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	@ (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f93b 	bl	8000e16 <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f911 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	@ (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	20000008 	.word	0x20000008
 8000bd8:	20000004 	.word	0x20000004

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	@ (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200000b4 	.word	0x200000b4

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200000b4 	.word	0x200000b4

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c8c:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x40>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	05fa0000 	.word	0x05fa0000

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	@ (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	@ (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	@ 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	@ 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff47 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff5c 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffb0 	bl	8000d84 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	e175      	b.n	800113c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	f040 8164 	bne.w	8001136 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d005      	beq.n	8000e86 <HAL_GPIO_Init+0x56>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d130      	bne.n	8000ee8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	2203      	movs	r2, #3
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	68da      	ldr	r2, [r3, #12]
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	091b      	lsrs	r3, r3, #4
 8000ed2:	f003 0201 	and.w	r2, r3, #1
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d017      	beq.n	8000f24 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	2203      	movs	r2, #3
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	43db      	mvns	r3, r3
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	689a      	ldr	r2, [r3, #8]
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0303 	and.w	r3, r3, #3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d123      	bne.n	8000f78 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	f003 0307 	and.w	r3, r3, #7
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	08da      	lsrs	r2, r3, #3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3208      	adds	r2, #8
 8000f72:	69b9      	ldr	r1, [r7, #24]
 8000f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	2203      	movs	r2, #3
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0203 	and.w	r2, r3, #3
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 80be 	beq.w	8001136 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	4b66      	ldr	r3, [pc, #408]	@ (8001154 <HAL_GPIO_Init+0x324>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a65      	ldr	r2, [pc, #404]	@ (8001154 <HAL_GPIO_Init+0x324>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b63      	ldr	r3, [pc, #396]	@ (8001154 <HAL_GPIO_Init+0x324>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fd2:	4a61      	ldr	r2, [pc, #388]	@ (8001158 <HAL_GPIO_Init+0x328>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a58      	ldr	r2, [pc, #352]	@ (800115c <HAL_GPIO_Init+0x32c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d037      	beq.n	800106e <HAL_GPIO_Init+0x23e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a57      	ldr	r2, [pc, #348]	@ (8001160 <HAL_GPIO_Init+0x330>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d031      	beq.n	800106a <HAL_GPIO_Init+0x23a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a56      	ldr	r2, [pc, #344]	@ (8001164 <HAL_GPIO_Init+0x334>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d02b      	beq.n	8001066 <HAL_GPIO_Init+0x236>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a55      	ldr	r2, [pc, #340]	@ (8001168 <HAL_GPIO_Init+0x338>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d025      	beq.n	8001062 <HAL_GPIO_Init+0x232>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a54      	ldr	r2, [pc, #336]	@ (800116c <HAL_GPIO_Init+0x33c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d01f      	beq.n	800105e <HAL_GPIO_Init+0x22e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a53      	ldr	r2, [pc, #332]	@ (8001170 <HAL_GPIO_Init+0x340>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d019      	beq.n	800105a <HAL_GPIO_Init+0x22a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a52      	ldr	r2, [pc, #328]	@ (8001174 <HAL_GPIO_Init+0x344>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d013      	beq.n	8001056 <HAL_GPIO_Init+0x226>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a51      	ldr	r2, [pc, #324]	@ (8001178 <HAL_GPIO_Init+0x348>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d00d      	beq.n	8001052 <HAL_GPIO_Init+0x222>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4a50      	ldr	r2, [pc, #320]	@ (800117c <HAL_GPIO_Init+0x34c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d007      	beq.n	800104e <HAL_GPIO_Init+0x21e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4f      	ldr	r2, [pc, #316]	@ (8001180 <HAL_GPIO_Init+0x350>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d101      	bne.n	800104a <HAL_GPIO_Init+0x21a>
 8001046:	2309      	movs	r3, #9
 8001048:	e012      	b.n	8001070 <HAL_GPIO_Init+0x240>
 800104a:	230a      	movs	r3, #10
 800104c:	e010      	b.n	8001070 <HAL_GPIO_Init+0x240>
 800104e:	2308      	movs	r3, #8
 8001050:	e00e      	b.n	8001070 <HAL_GPIO_Init+0x240>
 8001052:	2307      	movs	r3, #7
 8001054:	e00c      	b.n	8001070 <HAL_GPIO_Init+0x240>
 8001056:	2306      	movs	r3, #6
 8001058:	e00a      	b.n	8001070 <HAL_GPIO_Init+0x240>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x240>
 800105e:	2304      	movs	r3, #4
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x240>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x240>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x240>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x240>
 800106e:	2300      	movs	r3, #0
 8001070:	69fa      	ldr	r2, [r7, #28]
 8001072:	f002 0203 	and.w	r2, r2, #3
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	@ (8001158 <HAL_GPIO_Init+0x328>)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <HAL_GPIO_Init+0x354>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	43db      	mvns	r3, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4013      	ands	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010b2:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <HAL_GPIO_Init+0x354>)
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b8:	4b32      	ldr	r3, [pc, #200]	@ (8001184 <HAL_GPIO_Init+0x354>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010dc:	4a29      	ldr	r2, [pc, #164]	@ (8001184 <HAL_GPIO_Init+0x354>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e2:	4b28      	ldr	r3, [pc, #160]	@ (8001184 <HAL_GPIO_Init+0x354>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001106:	4a1f      	ldr	r2, [pc, #124]	@ (8001184 <HAL_GPIO_Init+0x354>)
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110c:	4b1d      	ldr	r3, [pc, #116]	@ (8001184 <HAL_GPIO_Init+0x354>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <HAL_GPIO_Init+0x354>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3301      	adds	r3, #1
 800113a:	61fb      	str	r3, [r7, #28]
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	f67f ae86 	bls.w	8000e50 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001144:	bf00      	nop
 8001146:	bf00      	nop
 8001148:	3724      	adds	r7, #36	@ 0x24
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40013800 	.word	0x40013800
 800115c:	40020000 	.word	0x40020000
 8001160:	40020400 	.word	0x40020400
 8001164:	40020800 	.word	0x40020800
 8001168:	40020c00 	.word	0x40020c00
 800116c:	40021000 	.word	0x40021000
 8001170:	40021400 	.word	0x40021400
 8001174:	40021800 	.word	0x40021800
 8001178:	40021c00 	.word	0x40021c00
 800117c:	40022000 	.word	0x40022000
 8001180:	40022400 	.word	0x40022400
 8001184:	40013c00 	.word	0x40013c00

08001188 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691a      	ldr	r2, [r3, #16]
 8001198:	887b      	ldrh	r3, [r7, #2]
 800119a:	4013      	ands	r3, r2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e001      	b.n	80011aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	460b      	mov	r3, r1
 80011c2:	807b      	strh	r3, [r7, #2]
 80011c4:	4613      	mov	r3, r2
 80011c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c8:	787b      	ldrb	r3, [r7, #1]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d003      	beq.n	80011d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011d4:	e003      	b.n	80011de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	041a      	lsls	r2, r3, #16
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	619a      	str	r2, [r3, #24]
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a04      	ldr	r2, [pc, #16]	@ (8001208 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40007000 	.word	0x40007000

0800120c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121a:	4a22      	ldr	r2, [pc, #136]	@ (80012a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800121c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001220:	6413      	str	r3, [r2, #64]	@ 0x40
 8001222:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800122e:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001238:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123a:	f7ff fce3 	bl	8000c04 <HAL_GetTick>
 800123e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001240:	e009      	b.n	8001256 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001242:	f7ff fcdf 	bl	8000c04 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001250:	d901      	bls.n	8001256 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e022      	b.n	800129c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800125e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001262:	d1ee      	bne.n	8001242 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001264:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0f      	ldr	r2, [pc, #60]	@ (80012a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800126a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800126e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001270:	f7ff fcc8 	bl	8000c04 <HAL_GetTick>
 8001274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001276:	e009      	b.n	800128c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001278:	f7ff fcc4 	bl	8000c04 <HAL_GetTick>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001286:	d901      	bls.n	800128c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e007      	b.n	800129c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800128c:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001294:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001298:	d1ee      	bne.n	8001278 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40007000 	.word	0x40007000

080012ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80012b4:	2300      	movs	r3, #0
 80012b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e291      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	f000 8087 	beq.w	80013de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012d0:	4b96      	ldr	r3, [pc, #600]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 030c 	and.w	r3, r3, #12
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d00c      	beq.n	80012f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012dc:	4b93      	ldr	r3, [pc, #588]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d112      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
 80012e8:	4b90      	ldr	r3, [pc, #576]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012f4:	d10b      	bne.n	800130e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f6:	4b8d      	ldr	r3, [pc, #564]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d06c      	beq.n	80013dc <HAL_RCC_OscConfig+0x130>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d168      	bne.n	80013dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e26b      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x7a>
 8001318:	4b84      	ldr	r3, [pc, #528]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a83      	ldr	r2, [pc, #524]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800131e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e02e      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x9c>
 800132e:	4b7f      	ldr	r3, [pc, #508]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a7e      	ldr	r2, [pc, #504]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b7c      	ldr	r3, [pc, #496]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7b      	ldr	r2, [pc, #492]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e01d      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0xc0>
 8001352:	4b76      	ldr	r3, [pc, #472]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a75      	ldr	r2, [pc, #468]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001358:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800135c:	6013      	str	r3, [r2, #0]
 800135e:	4b73      	ldr	r3, [pc, #460]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a72      	ldr	r2, [pc, #456]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0xd8>
 800136c:	4b6f      	ldr	r3, [pc, #444]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a6e      	ldr	r2, [pc, #440]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001372:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b6c      	ldr	r3, [pc, #432]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6b      	ldr	r2, [pc, #428]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800137e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d013      	beq.n	80013b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138c:	f7ff fc3a 	bl	8000c04 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001394:	f7ff fc36 	bl	8000c04 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b64      	cmp	r3, #100	@ 0x64
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e21f      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	4b61      	ldr	r3, [pc, #388]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f0      	beq.n	8001394 <HAL_RCC_OscConfig+0xe8>
 80013b2:	e014      	b.n	80013de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fc26 	bl	8000c04 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fc22 	bl	8000c04 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	@ 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e20b      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b57      	ldr	r3, [pc, #348]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x110>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d069      	beq.n	80014be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ea:	4b50      	ldr	r3, [pc, #320]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013f6:	4b4d      	ldr	r3, [pc, #308]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b08      	cmp	r3, #8
 8001400:	d11c      	bne.n	800143c <HAL_RCC_OscConfig+0x190>
 8001402:	4b4a      	ldr	r3, [pc, #296]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d116      	bne.n	800143c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140e:	4b47      	ldr	r3, [pc, #284]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x17a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e1df      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001426:	4b41      	ldr	r3, [pc, #260]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	493d      	ldr	r1, [pc, #244]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143a:	e040      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001444:	4b39      	ldr	r3, [pc, #228]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a38      	ldr	r2, [pc, #224]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001450:	f7ff fbd8 	bl	8000c04 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fbd4 	bl	8000c04 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e1bd      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146a:	4b30      	ldr	r3, [pc, #192]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001476:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	4929      	ldr	r1, [pc, #164]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001486:	4313      	orrs	r3, r2
 8001488:	600b      	str	r3, [r1, #0]
 800148a:	e018      	b.n	80014be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148c:	4b27      	ldr	r3, [pc, #156]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a26      	ldr	r2, [pc, #152]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001492:	f023 0301 	bic.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fbb4 	bl	8000c04 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fbb0 	bl	8000c04 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e199      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d038      	beq.n	800153c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d6:	4a15      	ldr	r2, [pc, #84]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014de:	f7ff fb91 	bl	8000c04 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb8d 	bl	8000c04 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e176      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 80014fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x23a>
 8001504:	e01a      	b.n	800153c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 8001508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150a:	4a08      	ldr	r2, [pc, #32]	@ (800152c <HAL_RCC_OscConfig+0x280>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001512:	f7ff fb77 	bl	8000c04 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e00a      	b.n	8001530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fb73 	bl	8000c04 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d903      	bls.n	8001530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e15c      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
 800152c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	4b91      	ldr	r3, [pc, #580]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001532:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 80a4 	beq.w	8001692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800154a:	4b8b      	ldr	r3, [pc, #556]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10d      	bne.n	8001572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	4b88      	ldr	r3, [pc, #544]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155a:	4a87      	ldr	r2, [pc, #540]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800155c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001560:	6413      	str	r3, [r2, #64]	@ 0x40
 8001562:	4b85      	ldr	r3, [pc, #532]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800156e:	2301      	movs	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001572:	4b82      	ldr	r3, [pc, #520]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800157e:	4b7f      	ldr	r3, [pc, #508]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a7e      	ldr	r2, [pc, #504]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800158a:	f7ff fb3b 	bl	8000c04 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001592:	f7ff fb37 	bl	8000c04 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b64      	cmp	r3, #100	@ 0x64
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e120      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015a4:	4b75      	ldr	r3, [pc, #468]	@ (800177c <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d106      	bne.n	80015c6 <HAL_RCC_OscConfig+0x31a>
 80015b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c4:	e02d      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x33c>
 80015ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d2:	4a69      	ldr	r2, [pc, #420]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015da:	4b67      	ldr	r3, [pc, #412]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015de:	4a66      	ldr	r2, [pc, #408]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015e6:	e01c      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b05      	cmp	r3, #5
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x35e>
 80015f0:	4b61      	ldr	r3, [pc, #388]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015f4:	4a60      	ldr	r2, [pc, #384]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80015fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80015fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001600:	4a5d      	ldr	r2, [pc, #372]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6713      	str	r3, [r2, #112]	@ 0x70
 8001608:	e00b      	b.n	8001622 <HAL_RCC_OscConfig+0x376>
 800160a:	4b5b      	ldr	r3, [pc, #364]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800160c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160e:	4a5a      	ldr	r2, [pc, #360]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	6713      	str	r3, [r2, #112]	@ 0x70
 8001616:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161a:	4a57      	ldr	r2, [pc, #348]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800161c:	f023 0304 	bic.w	r3, r3, #4
 8001620:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d015      	beq.n	8001656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162a:	f7ff faeb 	bl	8000c04 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001630:	e00a      	b.n	8001648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001632:	f7ff fae7 	bl	8000c04 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001640:	4293      	cmp	r3, r2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e0ce      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001648:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ee      	beq.n	8001632 <HAL_RCC_OscConfig+0x386>
 8001654:	e014      	b.n	8001680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fad5 	bl	8000c04 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff fad1 	bl	8000c04 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	@ 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0b8      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001674:	4b40      	ldr	r3, [pc, #256]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ee      	bne.n	800165e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001686:	4b3c      	ldr	r3, [pc, #240]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800168a:	4a3b      	ldr	r2, [pc, #236]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800168c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80a4 	beq.w	80017e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800169c:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d06b      	beq.n	8001780 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d149      	bne.n	8001744 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b0:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a30      	ldr	r2, [pc, #192]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80016b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff faa2 	bl	8000c04 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fa9e 	bl	8000c04 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e087      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b28      	ldr	r3, [pc, #160]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	4313      	orrs	r3, r2
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800170a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800170e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800171a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171c:	f7ff fa72 	bl	8000c04 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff fa6e 	bl	8000c04 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e057      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001736:	4b10      	ldr	r3, [pc, #64]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x478>
 8001742:	e04f      	b.n	80017e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0b      	ldr	r2, [pc, #44]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800174a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800174e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001750:	f7ff fa58 	bl	8000c04 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001758:	f7ff fa54 	bl	8000c04 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e03d      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800176a:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_RCC_OscConfig+0x4cc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x4ac>
 8001776:	e035      	b.n	80017e4 <HAL_RCC_OscConfig+0x538>
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x544>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d028      	beq.n	80017e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d121      	bne.n	80017e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d11a      	bne.n	80017e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d111      	bne.n	80017e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 020f 	bic.w	r2, r3, #15
 8001822:	4965      	ldr	r1, [pc, #404]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800185a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800185e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e8:	f7ff f98c 	bl	8000c04 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f988 	bl	8000c04 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 020f 	bic.w	r2, r3, #15
 800192e:	4922      	ldr	r1, [pc, #136]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	@ (80019c0 <HAL_RCC_ClockConfig+0x1cc>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x1d0>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_ClockConfig+0x1d4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f8e8 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40023c00 	.word	0x40023c00
 80019bc:	40023800 	.word	0x40023800
 80019c0:	08002d88 	.word	0x08002d88
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019d0:	b094      	sub	sp, #80	@ 0x50
 80019d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	2300      	movs	r3, #0
 80019da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019dc:	2300      	movs	r3, #0
 80019de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e4:	4b79      	ldr	r3, [pc, #484]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 030c 	and.w	r3, r3, #12
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d00d      	beq.n	8001a0c <HAL_RCC_GetSysClockFreq+0x40>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	f200 80e1 	bhi.w	8001bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x34>
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d003      	beq.n	8001a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80019fe:	e0db      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b73      	ldr	r3, [pc, #460]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a04:	e0db      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a06:	4b73      	ldr	r3, [pc, #460]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a0a:	e0d8      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001a16:	4b6d      	ldr	r3, [pc, #436]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d063      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b6a      	ldr	r3, [pc, #424]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a3e:	4622      	mov	r2, r4
 8001a40:	462b      	mov	r3, r5
 8001a42:	f04f 0000 	mov.w	r0, #0
 8001a46:	f04f 0100 	mov.w	r1, #0
 8001a4a:	0159      	lsls	r1, r3, #5
 8001a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a50:	0150      	lsls	r0, r2, #5
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4621      	mov	r1, r4
 8001a58:	1a51      	subs	r1, r2, r1
 8001a5a:	6139      	str	r1, [r7, #16]
 8001a5c:	4629      	mov	r1, r5
 8001a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	f04f 0200 	mov.w	r2, #0
 8001a68:	f04f 0300 	mov.w	r3, #0
 8001a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a70:	4659      	mov	r1, fp
 8001a72:	018b      	lsls	r3, r1, #6
 8001a74:	4651      	mov	r1, sl
 8001a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a7a:	4651      	mov	r1, sl
 8001a7c:	018a      	lsls	r2, r1, #6
 8001a7e:	4651      	mov	r1, sl
 8001a80:	ebb2 0801 	subs.w	r8, r2, r1
 8001a84:	4659      	mov	r1, fp
 8001a86:	eb63 0901 	sbc.w	r9, r3, r1
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4699      	mov	r9, r3
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	eb18 0303 	adds.w	r3, r8, r3
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	462b      	mov	r3, r5
 8001aac:	eb49 0303 	adc.w	r3, r9, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	f04f 0300 	mov.w	r3, #0
 8001aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001abe:	4629      	mov	r1, r5
 8001ac0:	024b      	lsls	r3, r1, #9
 8001ac2:	4621      	mov	r1, r4
 8001ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ac8:	4621      	mov	r1, r4
 8001aca:	024a      	lsls	r2, r1, #9
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001adc:	f7fe fb94 	bl	8000208 <__aeabi_uldivmod>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ae8:	e058      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	4b38      	ldr	r3, [pc, #224]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	099b      	lsrs	r3, r3, #6
 8001af0:	2200      	movs	r2, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	4611      	mov	r1, r2
 8001af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001afa:	623b      	str	r3, [r7, #32]
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b04:	4642      	mov	r2, r8
 8001b06:	464b      	mov	r3, r9
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0159      	lsls	r1, r3, #5
 8001b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b16:	0150      	lsls	r0, r2, #5
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4641      	mov	r1, r8
 8001b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b22:	4649      	mov	r1, r9
 8001b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8001b40:	eb63 050b 	sbc.w	r5, r3, fp
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	00eb      	lsls	r3, r5, #3
 8001b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b52:	00e2      	lsls	r2, r4, #3
 8001b54:	4614      	mov	r4, r2
 8001b56:	461d      	mov	r5, r3
 8001b58:	4643      	mov	r3, r8
 8001b5a:	18e3      	adds	r3, r4, r3
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	464b      	mov	r3, r9
 8001b60:	eb45 0303 	adc.w	r3, r5, r3
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	f04f 0300 	mov.w	r3, #0
 8001b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b72:	4629      	mov	r1, r5
 8001b74:	028b      	lsls	r3, r1, #10
 8001b76:	4621      	mov	r1, r4
 8001b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	028a      	lsls	r2, r1, #10
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b86:	2200      	movs	r2, #0
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	61fa      	str	r2, [r7, #28]
 8001b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b90:	f7fe fb3a 	bl	8000208 <__aeabi_uldivmod>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4613      	mov	r3, r2
 8001b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3750      	adds	r7, #80	@ 0x50
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	007a1200 	.word	0x007a1200

08001bd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	@ (8001bec <HAL_RCC_GetHCLKFreq+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000

08001bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf4:	f7ff fff0 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b05      	ldr	r3, [pc, #20]	@ (8001c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	0a9b      	lsrs	r3, r3, #10
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	4903      	ldr	r1, [pc, #12]	@ (8001c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	08002d98 	.word	0x08002d98

08001c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c1c:	f7ff ffdc 	bl	8001bd8 <HAL_RCC_GetHCLKFreq>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	0b5b      	lsrs	r3, r3, #13
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	4903      	ldr	r1, [pc, #12]	@ (8001c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c2e:	5ccb      	ldrb	r3, [r1, r3]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	08002d98 	.word	0x08002d98

08001c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d012      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c68:	4b69      	ldr	r3, [pc, #420]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a68      	ldr	r2, [pc, #416]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001c72:	6093      	str	r3, [r2, #8]
 8001c74:	4b66      	ldr	r3, [pc, #408]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7c:	4964      	ldr	r1, [pc, #400]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca8:	4959      	ldr	r1, [pc, #356]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001cb8:	d101      	bne.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d017      	beq.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cdc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	494a      	ldr	r1, [pc, #296]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0320 	and.w	r3, r3, #32
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 808b 	beq.w	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	4b3a      	ldr	r3, [pc, #232]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	4a39      	ldr	r2, [pc, #228]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d30:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d3c:	4b35      	ldr	r3, [pc, #212]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a34      	ldr	r2, [pc, #208]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d48:	f7fe ff5c 	bl	8000c04 <HAL_GetTick>
 8001d4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7fe ff58 	bl	8000c04 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	@ 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e357      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d62:	4b2c      	ldr	r3, [pc, #176]	@ (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d6e:	4b28      	ldr	r3, [pc, #160]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d035      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d02e      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d8c:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d96:	4b1e      	ldr	r3, [pc, #120]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001dae:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001db4:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d114      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7fe ff20 	bl	8000c04 <HAL_GetTick>
 8001dc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7fe ff1c 	bl	8000c04 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e319      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0ee      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001df6:	d111      	bne.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e04:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e06:	400b      	ands	r3, r1
 8001e08:	4901      	ldr	r1, [pc, #4]	@ (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	608b      	str	r3, [r1, #8]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000
 8001e18:	0ffffcff 	.word	0x0ffffcff
 8001e1c:	4baa      	ldr	r3, [pc, #680]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4aa9      	ldr	r2, [pc, #676]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e22:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001e26:	6093      	str	r3, [r2, #8]
 8001e28:	4ba7      	ldr	r3, [pc, #668]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e34:	49a4      	ldr	r1, [pc, #656]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e46:	4ba0      	ldr	r3, [pc, #640]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e4c:	4a9e      	ldr	r2, [pc, #632]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e56:	4b9c      	ldr	r3, [pc, #624]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e58:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e60:	4999      	ldr	r1, [pc, #612]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e74:	4b94      	ldr	r3, [pc, #592]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e82:	4991      	ldr	r1, [pc, #580]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e96:	4b8c      	ldr	r3, [pc, #560]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ea4:	4988      	ldr	r1, [pc, #544]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001eb8:	4b83      	ldr	r3, [pc, #524]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ebe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ec6:	4980      	ldr	r1, [pc, #512]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001eda:	4b7b      	ldr	r3, [pc, #492]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4977      	ldr	r1, [pc, #476]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001efc:	4b72      	ldr	r3, [pc, #456]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f02:	f023 0203 	bic.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	496f      	ldr	r1, [pc, #444]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f24:	f023 020c 	bic.w	r2, r3, #12
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f2c:	4966      	ldr	r1, [pc, #408]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f40:	4b61      	ldr	r3, [pc, #388]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4e:	495e      	ldr	r1, [pc, #376]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f62:	4b59      	ldr	r3, [pc, #356]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f68:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f70:	4955      	ldr	r1, [pc, #340]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f84:	4b50      	ldr	r3, [pc, #320]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f92:	494d      	ldr	r1, [pc, #308]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001fa6:	4b48      	ldr	r3, [pc, #288]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb4:	4944      	ldr	r1, [pc, #272]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001fc8:	4b3f      	ldr	r3, [pc, #252]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd6:	493c      	ldr	r1, [pc, #240]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff8:	4933      	ldr	r1, [pc, #204]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800200c:	4b2e      	ldr	r3, [pc, #184]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002012:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800201a:	492b      	ldr	r1, [pc, #172]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d011      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800203c:	4922      	ldr	r1, [pc, #136]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002048:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800204c:	d101      	bne.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800204e:	2301      	movs	r3, #1
 8002050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800205e:	2301      	movs	r3, #1
 8002060:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800206e:	4b16      	ldr	r3, [pc, #88]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002074:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800207c:	4912      	ldr	r1, [pc, #72]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800207e:	4313      	orrs	r3, r2
 8002080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00b      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002090:	4b0d      	ldr	r3, [pc, #52]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002096:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020a0:	4909      	ldr	r1, [pc, #36]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d006      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80d9 	beq.w	800226e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80020bc:	4b02      	ldr	r3, [pc, #8]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a01      	ldr	r2, [pc, #4]	@ (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80020c6:	e001      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ce:	f7fe fd99 	bl	8000c04 <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020d4:	e008      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020d6:	f7fe fd95 	bl	8000c04 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b64      	cmp	r3, #100	@ 0x64
 80020e2:	d901      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e194      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020e8:	4b6c      	ldr	r3, [pc, #432]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1f0      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d021      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002104:	2b00      	cmp	r3, #0
 8002106:	d11d      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002108:	4b64      	ldr	r3, [pc, #400]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	f003 0303 	and.w	r3, r3, #3
 8002114:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002116:	4b61      	ldr	r3, [pc, #388]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800211c:	0e1b      	lsrs	r3, r3, #24
 800211e:	f003 030f 	and.w	r3, r3, #15
 8002122:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	019a      	lsls	r2, r3, #6
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	041b      	lsls	r3, r3, #16
 800212e:	431a      	orrs	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	061b      	lsls	r3, r3, #24
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	071b      	lsls	r3, r3, #28
 800213c:	4957      	ldr	r1, [pc, #348]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002162:	2b00      	cmp	r3, #0
 8002164:	d02e      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800216e:	d129      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002170:	4b4a      	ldr	r3, [pc, #296]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002176:	0c1b      	lsrs	r3, r3, #16
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800217e:	4b47      	ldr	r3, [pc, #284]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002184:	0f1b      	lsrs	r3, r3, #28
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	019a      	lsls	r2, r3, #6
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	041b      	lsls	r3, r3, #16
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	061b      	lsls	r3, r3, #24
 800219e:	431a      	orrs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	071b      	lsls	r3, r3, #28
 80021a4:	493d      	ldr	r1, [pc, #244]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021ac:	4b3b      	ldr	r3, [pc, #236]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b2:	f023 021f 	bic.w	r2, r3, #31
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4937      	ldr	r1, [pc, #220]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01d      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021d0:	4b32      	ldr	r3, [pc, #200]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021d6:	0e1b      	lsrs	r3, r3, #24
 80021d8:	f003 030f 	and.w	r3, r3, #15
 80021dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021de:	4b2f      	ldr	r3, [pc, #188]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e4:	0f1b      	lsrs	r3, r3, #28
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	019a      	lsls	r2, r3, #6
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	431a      	orrs	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	071b      	lsls	r3, r3, #28
 8002204:	4925      	ldr	r1, [pc, #148]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d011      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	019a      	lsls	r2, r3, #6
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	041b      	lsls	r3, r3, #16
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	061b      	lsls	r3, r3, #24
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	071b      	lsls	r3, r3, #28
 8002234:	4919      	ldr	r1, [pc, #100]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a16      	ldr	r2, [pc, #88]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002242:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002248:	f7fe fcdc 	bl	8000c04 <HAL_GetTick>
 800224c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002250:	f7fe fcd8 	bl	8000c04 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	@ 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0d7      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b01      	cmp	r3, #1
 8002272:	f040 80cd 	bne.w	8002410 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002276:	4b09      	ldr	r3, [pc, #36]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a08      	ldr	r2, [pc, #32]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002282:	f7fe fcbf 	bl	8000c04 <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228a:	f7fe fcbb 	bl	8000c04 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	@ 0x64
 8002296:	d903      	bls.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0ba      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800229c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80022a0:	4b5e      	ldr	r3, [pc, #376]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ac:	d0ed      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d02e      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d12a      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022d6:	4b51      	ldr	r3, [pc, #324]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022dc:	0c1b      	lsrs	r3, r3, #16
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022e4:	4b4d      	ldr	r3, [pc, #308]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ea:	0f1b      	lsrs	r3, r3, #28
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	019a      	lsls	r2, r3, #6
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	061b      	lsls	r3, r3, #24
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	071b      	lsls	r3, r3, #28
 800230a:	4944      	ldr	r1, [pc, #272]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002312:	4b42      	ldr	r3, [pc, #264]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002314:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002318:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	021b      	lsls	r3, r3, #8
 8002324:	493d      	ldr	r1, [pc, #244]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d022      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800233c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002340:	d11d      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002342:	4b36      	ldr	r3, [pc, #216]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002348:	0e1b      	lsrs	r3, r3, #24
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002350:	4b32      	ldr	r3, [pc, #200]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002356:	0f1b      	lsrs	r3, r3, #28
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	019a      	lsls	r2, r3, #6
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	041b      	lsls	r3, r3, #16
 800236a:	431a      	orrs	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	061b      	lsls	r3, r3, #24
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	071b      	lsls	r3, r3, #28
 8002376:	4929      	ldr	r1, [pc, #164]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b00      	cmp	r3, #0
 8002388:	d028      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800238a:	4b24      	ldr	r3, [pc, #144]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002390:	0e1b      	lsrs	r3, r3, #24
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002398:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800239a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800239e:	0c1b      	lsrs	r3, r3, #16
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	019a      	lsls	r2, r3, #6
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	041b      	lsls	r3, r3, #16
 80023b0:	431a      	orrs	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	071b      	lsls	r3, r3, #28
 80023be:	4917      	ldr	r1, [pc, #92]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d4:	4911      	ldr	r1, [pc, #68]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80023dc:	4b0f      	ldr	r3, [pc, #60]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a0e      	ldr	r2, [pc, #56]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe fc0c 	bl	8000c04 <HAL_GetTick>
 80023ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023f0:	f7fe fc08 	bl	8000c04 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	@ 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e007      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002402:	4b06      	ldr	r3, [pc, #24]	@ (800241c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800240a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800240e:	d1ef      	bne.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023800 	.word	0x40023800

08002420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e040      	b.n	80024b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7fe fb04 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2224      	movs	r2, #36	@ 0x24
 800244c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0201 	bic.w	r2, r2, #1
 800245c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	2b00      	cmp	r3, #0
 8002464:	d002      	beq.n	800246c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 fa8c 	bl	8002984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f825 	bl	80024bc <UART_SetConfig>
 8002472:	4603      	mov	r3, r0
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e01b      	b.n	80024b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800248a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800249a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 fb0b 	bl	8002ac8 <UART_CheckIdleState>
 80024b2:	4603      	mov	r3, r0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4ba6      	ldr	r3, [pc, #664]	@ (8002780 <UART_SetConfig+0x2c4>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	6979      	ldr	r1, [r7, #20]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a94      	ldr	r2, [pc, #592]	@ (8002784 <UART_SetConfig+0x2c8>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d120      	bne.n	800257a <UART_SetConfig+0xbe>
 8002538:	4b93      	ldr	r3, [pc, #588]	@ (8002788 <UART_SetConfig+0x2cc>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d816      	bhi.n	8002574 <UART_SetConfig+0xb8>
 8002546:	a201      	add	r2, pc, #4	@ (adr r2, 800254c <UART_SetConfig+0x90>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	0800255d 	.word	0x0800255d
 8002550:	08002569 	.word	0x08002569
 8002554:	08002563 	.word	0x08002563
 8002558:	0800256f 	.word	0x0800256f
 800255c:	2301      	movs	r3, #1
 800255e:	77fb      	strb	r3, [r7, #31]
 8002560:	e150      	b.n	8002804 <UART_SetConfig+0x348>
 8002562:	2302      	movs	r3, #2
 8002564:	77fb      	strb	r3, [r7, #31]
 8002566:	e14d      	b.n	8002804 <UART_SetConfig+0x348>
 8002568:	2304      	movs	r3, #4
 800256a:	77fb      	strb	r3, [r7, #31]
 800256c:	e14a      	b.n	8002804 <UART_SetConfig+0x348>
 800256e:	2308      	movs	r3, #8
 8002570:	77fb      	strb	r3, [r7, #31]
 8002572:	e147      	b.n	8002804 <UART_SetConfig+0x348>
 8002574:	2310      	movs	r3, #16
 8002576:	77fb      	strb	r3, [r7, #31]
 8002578:	e144      	b.n	8002804 <UART_SetConfig+0x348>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a83      	ldr	r2, [pc, #524]	@ (800278c <UART_SetConfig+0x2d0>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d132      	bne.n	80025ea <UART_SetConfig+0x12e>
 8002584:	4b80      	ldr	r3, [pc, #512]	@ (8002788 <UART_SetConfig+0x2cc>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d828      	bhi.n	80025e4 <UART_SetConfig+0x128>
 8002592:	a201      	add	r2, pc, #4	@ (adr r2, 8002598 <UART_SetConfig+0xdc>)
 8002594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002598:	080025cd 	.word	0x080025cd
 800259c:	080025e5 	.word	0x080025e5
 80025a0:	080025e5 	.word	0x080025e5
 80025a4:	080025e5 	.word	0x080025e5
 80025a8:	080025d9 	.word	0x080025d9
 80025ac:	080025e5 	.word	0x080025e5
 80025b0:	080025e5 	.word	0x080025e5
 80025b4:	080025e5 	.word	0x080025e5
 80025b8:	080025d3 	.word	0x080025d3
 80025bc:	080025e5 	.word	0x080025e5
 80025c0:	080025e5 	.word	0x080025e5
 80025c4:	080025e5 	.word	0x080025e5
 80025c8:	080025df 	.word	0x080025df
 80025cc:	2300      	movs	r3, #0
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	e118      	b.n	8002804 <UART_SetConfig+0x348>
 80025d2:	2302      	movs	r3, #2
 80025d4:	77fb      	strb	r3, [r7, #31]
 80025d6:	e115      	b.n	8002804 <UART_SetConfig+0x348>
 80025d8:	2304      	movs	r3, #4
 80025da:	77fb      	strb	r3, [r7, #31]
 80025dc:	e112      	b.n	8002804 <UART_SetConfig+0x348>
 80025de:	2308      	movs	r3, #8
 80025e0:	77fb      	strb	r3, [r7, #31]
 80025e2:	e10f      	b.n	8002804 <UART_SetConfig+0x348>
 80025e4:	2310      	movs	r3, #16
 80025e6:	77fb      	strb	r3, [r7, #31]
 80025e8:	e10c      	b.n	8002804 <UART_SetConfig+0x348>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a68      	ldr	r2, [pc, #416]	@ (8002790 <UART_SetConfig+0x2d4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d120      	bne.n	8002636 <UART_SetConfig+0x17a>
 80025f4:	4b64      	ldr	r3, [pc, #400]	@ (8002788 <UART_SetConfig+0x2cc>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fa:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80025fe:	2b30      	cmp	r3, #48	@ 0x30
 8002600:	d013      	beq.n	800262a <UART_SetConfig+0x16e>
 8002602:	2b30      	cmp	r3, #48	@ 0x30
 8002604:	d814      	bhi.n	8002630 <UART_SetConfig+0x174>
 8002606:	2b20      	cmp	r3, #32
 8002608:	d009      	beq.n	800261e <UART_SetConfig+0x162>
 800260a:	2b20      	cmp	r3, #32
 800260c:	d810      	bhi.n	8002630 <UART_SetConfig+0x174>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <UART_SetConfig+0x15c>
 8002612:	2b10      	cmp	r3, #16
 8002614:	d006      	beq.n	8002624 <UART_SetConfig+0x168>
 8002616:	e00b      	b.n	8002630 <UART_SetConfig+0x174>
 8002618:	2300      	movs	r3, #0
 800261a:	77fb      	strb	r3, [r7, #31]
 800261c:	e0f2      	b.n	8002804 <UART_SetConfig+0x348>
 800261e:	2302      	movs	r3, #2
 8002620:	77fb      	strb	r3, [r7, #31]
 8002622:	e0ef      	b.n	8002804 <UART_SetConfig+0x348>
 8002624:	2304      	movs	r3, #4
 8002626:	77fb      	strb	r3, [r7, #31]
 8002628:	e0ec      	b.n	8002804 <UART_SetConfig+0x348>
 800262a:	2308      	movs	r3, #8
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e0e9      	b.n	8002804 <UART_SetConfig+0x348>
 8002630:	2310      	movs	r3, #16
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	e0e6      	b.n	8002804 <UART_SetConfig+0x348>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a56      	ldr	r2, [pc, #344]	@ (8002794 <UART_SetConfig+0x2d8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d120      	bne.n	8002682 <UART_SetConfig+0x1c6>
 8002640:	4b51      	ldr	r3, [pc, #324]	@ (8002788 <UART_SetConfig+0x2cc>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002646:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800264a:	2bc0      	cmp	r3, #192	@ 0xc0
 800264c:	d013      	beq.n	8002676 <UART_SetConfig+0x1ba>
 800264e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002650:	d814      	bhi.n	800267c <UART_SetConfig+0x1c0>
 8002652:	2b80      	cmp	r3, #128	@ 0x80
 8002654:	d009      	beq.n	800266a <UART_SetConfig+0x1ae>
 8002656:	2b80      	cmp	r3, #128	@ 0x80
 8002658:	d810      	bhi.n	800267c <UART_SetConfig+0x1c0>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <UART_SetConfig+0x1a8>
 800265e:	2b40      	cmp	r3, #64	@ 0x40
 8002660:	d006      	beq.n	8002670 <UART_SetConfig+0x1b4>
 8002662:	e00b      	b.n	800267c <UART_SetConfig+0x1c0>
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
 8002668:	e0cc      	b.n	8002804 <UART_SetConfig+0x348>
 800266a:	2302      	movs	r3, #2
 800266c:	77fb      	strb	r3, [r7, #31]
 800266e:	e0c9      	b.n	8002804 <UART_SetConfig+0x348>
 8002670:	2304      	movs	r3, #4
 8002672:	77fb      	strb	r3, [r7, #31]
 8002674:	e0c6      	b.n	8002804 <UART_SetConfig+0x348>
 8002676:	2308      	movs	r3, #8
 8002678:	77fb      	strb	r3, [r7, #31]
 800267a:	e0c3      	b.n	8002804 <UART_SetConfig+0x348>
 800267c:	2310      	movs	r3, #16
 800267e:	77fb      	strb	r3, [r7, #31]
 8002680:	e0c0      	b.n	8002804 <UART_SetConfig+0x348>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a44      	ldr	r2, [pc, #272]	@ (8002798 <UART_SetConfig+0x2dc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d125      	bne.n	80026d8 <UART_SetConfig+0x21c>
 800268c:	4b3e      	ldr	r3, [pc, #248]	@ (8002788 <UART_SetConfig+0x2cc>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002696:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800269a:	d017      	beq.n	80026cc <UART_SetConfig+0x210>
 800269c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026a0:	d817      	bhi.n	80026d2 <UART_SetConfig+0x216>
 80026a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026a6:	d00b      	beq.n	80026c0 <UART_SetConfig+0x204>
 80026a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ac:	d811      	bhi.n	80026d2 <UART_SetConfig+0x216>
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <UART_SetConfig+0x1fe>
 80026b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b6:	d006      	beq.n	80026c6 <UART_SetConfig+0x20a>
 80026b8:	e00b      	b.n	80026d2 <UART_SetConfig+0x216>
 80026ba:	2300      	movs	r3, #0
 80026bc:	77fb      	strb	r3, [r7, #31]
 80026be:	e0a1      	b.n	8002804 <UART_SetConfig+0x348>
 80026c0:	2302      	movs	r3, #2
 80026c2:	77fb      	strb	r3, [r7, #31]
 80026c4:	e09e      	b.n	8002804 <UART_SetConfig+0x348>
 80026c6:	2304      	movs	r3, #4
 80026c8:	77fb      	strb	r3, [r7, #31]
 80026ca:	e09b      	b.n	8002804 <UART_SetConfig+0x348>
 80026cc:	2308      	movs	r3, #8
 80026ce:	77fb      	strb	r3, [r7, #31]
 80026d0:	e098      	b.n	8002804 <UART_SetConfig+0x348>
 80026d2:	2310      	movs	r3, #16
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e095      	b.n	8002804 <UART_SetConfig+0x348>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2f      	ldr	r2, [pc, #188]	@ (800279c <UART_SetConfig+0x2e0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d125      	bne.n	800272e <UART_SetConfig+0x272>
 80026e2:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <UART_SetConfig+0x2cc>)
 80026e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80026ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80026f0:	d017      	beq.n	8002722 <UART_SetConfig+0x266>
 80026f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80026f6:	d817      	bhi.n	8002728 <UART_SetConfig+0x26c>
 80026f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026fc:	d00b      	beq.n	8002716 <UART_SetConfig+0x25a>
 80026fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002702:	d811      	bhi.n	8002728 <UART_SetConfig+0x26c>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <UART_SetConfig+0x254>
 8002708:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800270c:	d006      	beq.n	800271c <UART_SetConfig+0x260>
 800270e:	e00b      	b.n	8002728 <UART_SetConfig+0x26c>
 8002710:	2301      	movs	r3, #1
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e076      	b.n	8002804 <UART_SetConfig+0x348>
 8002716:	2302      	movs	r3, #2
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e073      	b.n	8002804 <UART_SetConfig+0x348>
 800271c:	2304      	movs	r3, #4
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e070      	b.n	8002804 <UART_SetConfig+0x348>
 8002722:	2308      	movs	r3, #8
 8002724:	77fb      	strb	r3, [r7, #31]
 8002726:	e06d      	b.n	8002804 <UART_SetConfig+0x348>
 8002728:	2310      	movs	r3, #16
 800272a:	77fb      	strb	r3, [r7, #31]
 800272c:	e06a      	b.n	8002804 <UART_SetConfig+0x348>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <UART_SetConfig+0x2e4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d138      	bne.n	80027aa <UART_SetConfig+0x2ee>
 8002738:	4b13      	ldr	r3, [pc, #76]	@ (8002788 <UART_SetConfig+0x2cc>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002742:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002746:	d017      	beq.n	8002778 <UART_SetConfig+0x2bc>
 8002748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800274c:	d82a      	bhi.n	80027a4 <UART_SetConfig+0x2e8>
 800274e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002752:	d00b      	beq.n	800276c <UART_SetConfig+0x2b0>
 8002754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002758:	d824      	bhi.n	80027a4 <UART_SetConfig+0x2e8>
 800275a:	2b00      	cmp	r3, #0
 800275c:	d003      	beq.n	8002766 <UART_SetConfig+0x2aa>
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002762:	d006      	beq.n	8002772 <UART_SetConfig+0x2b6>
 8002764:	e01e      	b.n	80027a4 <UART_SetConfig+0x2e8>
 8002766:	2300      	movs	r3, #0
 8002768:	77fb      	strb	r3, [r7, #31]
 800276a:	e04b      	b.n	8002804 <UART_SetConfig+0x348>
 800276c:	2302      	movs	r3, #2
 800276e:	77fb      	strb	r3, [r7, #31]
 8002770:	e048      	b.n	8002804 <UART_SetConfig+0x348>
 8002772:	2304      	movs	r3, #4
 8002774:	77fb      	strb	r3, [r7, #31]
 8002776:	e045      	b.n	8002804 <UART_SetConfig+0x348>
 8002778:	2308      	movs	r3, #8
 800277a:	77fb      	strb	r3, [r7, #31]
 800277c:	e042      	b.n	8002804 <UART_SetConfig+0x348>
 800277e:	bf00      	nop
 8002780:	efff69f3 	.word	0xefff69f3
 8002784:	40011000 	.word	0x40011000
 8002788:	40023800 	.word	0x40023800
 800278c:	40004400 	.word	0x40004400
 8002790:	40004800 	.word	0x40004800
 8002794:	40004c00 	.word	0x40004c00
 8002798:	40005000 	.word	0x40005000
 800279c:	40011400 	.word	0x40011400
 80027a0:	40007800 	.word	0x40007800
 80027a4:	2310      	movs	r3, #16
 80027a6:	77fb      	strb	r3, [r7, #31]
 80027a8:	e02c      	b.n	8002804 <UART_SetConfig+0x348>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a72      	ldr	r2, [pc, #456]	@ (8002978 <UART_SetConfig+0x4bc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d125      	bne.n	8002800 <UART_SetConfig+0x344>
 80027b4:	4b71      	ldr	r3, [pc, #452]	@ (800297c <UART_SetConfig+0x4c0>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027be:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027c2:	d017      	beq.n	80027f4 <UART_SetConfig+0x338>
 80027c4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80027c8:	d817      	bhi.n	80027fa <UART_SetConfig+0x33e>
 80027ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027ce:	d00b      	beq.n	80027e8 <UART_SetConfig+0x32c>
 80027d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d4:	d811      	bhi.n	80027fa <UART_SetConfig+0x33e>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <UART_SetConfig+0x326>
 80027da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027de:	d006      	beq.n	80027ee <UART_SetConfig+0x332>
 80027e0:	e00b      	b.n	80027fa <UART_SetConfig+0x33e>
 80027e2:	2300      	movs	r3, #0
 80027e4:	77fb      	strb	r3, [r7, #31]
 80027e6:	e00d      	b.n	8002804 <UART_SetConfig+0x348>
 80027e8:	2302      	movs	r3, #2
 80027ea:	77fb      	strb	r3, [r7, #31]
 80027ec:	e00a      	b.n	8002804 <UART_SetConfig+0x348>
 80027ee:	2304      	movs	r3, #4
 80027f0:	77fb      	strb	r3, [r7, #31]
 80027f2:	e007      	b.n	8002804 <UART_SetConfig+0x348>
 80027f4:	2308      	movs	r3, #8
 80027f6:	77fb      	strb	r3, [r7, #31]
 80027f8:	e004      	b.n	8002804 <UART_SetConfig+0x348>
 80027fa:	2310      	movs	r3, #16
 80027fc:	77fb      	strb	r3, [r7, #31]
 80027fe:	e001      	b.n	8002804 <UART_SetConfig+0x348>
 8002800:	2310      	movs	r3, #16
 8002802:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800280c:	d15b      	bne.n	80028c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800280e:	7ffb      	ldrb	r3, [r7, #31]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d828      	bhi.n	8002866 <UART_SetConfig+0x3aa>
 8002814:	a201      	add	r2, pc, #4	@ (adr r2, 800281c <UART_SetConfig+0x360>)
 8002816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281a:	bf00      	nop
 800281c:	08002841 	.word	0x08002841
 8002820:	08002849 	.word	0x08002849
 8002824:	08002851 	.word	0x08002851
 8002828:	08002867 	.word	0x08002867
 800282c:	08002857 	.word	0x08002857
 8002830:	08002867 	.word	0x08002867
 8002834:	08002867 	.word	0x08002867
 8002838:	08002867 	.word	0x08002867
 800283c:	0800285f 	.word	0x0800285f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002840:	f7ff f9d6 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 8002844:	61b8      	str	r0, [r7, #24]
        break;
 8002846:	e013      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002848:	f7ff f9e6 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 800284c:	61b8      	str	r0, [r7, #24]
        break;
 800284e:	e00f      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002850:	4b4b      	ldr	r3, [pc, #300]	@ (8002980 <UART_SetConfig+0x4c4>)
 8002852:	61bb      	str	r3, [r7, #24]
        break;
 8002854:	e00c      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002856:	f7ff f8b9 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800285a:	61b8      	str	r0, [r7, #24]
        break;
 800285c:	e008      	b.n	8002870 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800285e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002862:	61bb      	str	r3, [r7, #24]
        break;
 8002864:	e004      	b.n	8002870 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	77bb      	strb	r3, [r7, #30]
        break;
 800286e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d074      	beq.n	8002960 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	005a      	lsls	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	085b      	lsrs	r3, r3, #1
 8002880:	441a      	add	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	fbb2 f3f3 	udiv	r3, r2, r3
 800288a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b0f      	cmp	r3, #15
 8002890:	d916      	bls.n	80028c0 <UART_SetConfig+0x404>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002898:	d212      	bcs.n	80028c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	b29b      	uxth	r3, r3
 800289e:	f023 030f 	bic.w	r3, r3, #15
 80028a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	89fb      	ldrh	r3, [r7, #14]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	89fa      	ldrh	r2, [r7, #14]
 80028bc:	60da      	str	r2, [r3, #12]
 80028be:	e04f      	b.n	8002960 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77bb      	strb	r3, [r7, #30]
 80028c4:	e04c      	b.n	8002960 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	d828      	bhi.n	800291e <UART_SetConfig+0x462>
 80028cc:	a201      	add	r2, pc, #4	@ (adr r2, 80028d4 <UART_SetConfig+0x418>)
 80028ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d2:	bf00      	nop
 80028d4:	080028f9 	.word	0x080028f9
 80028d8:	08002901 	.word	0x08002901
 80028dc:	08002909 	.word	0x08002909
 80028e0:	0800291f 	.word	0x0800291f
 80028e4:	0800290f 	.word	0x0800290f
 80028e8:	0800291f 	.word	0x0800291f
 80028ec:	0800291f 	.word	0x0800291f
 80028f0:	0800291f 	.word	0x0800291f
 80028f4:	08002917 	.word	0x08002917
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028f8:	f7ff f97a 	bl	8001bf0 <HAL_RCC_GetPCLK1Freq>
 80028fc:	61b8      	str	r0, [r7, #24]
        break;
 80028fe:	e013      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002900:	f7ff f98a 	bl	8001c18 <HAL_RCC_GetPCLK2Freq>
 8002904:	61b8      	str	r0, [r7, #24]
        break;
 8002906:	e00f      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002908:	4b1d      	ldr	r3, [pc, #116]	@ (8002980 <UART_SetConfig+0x4c4>)
 800290a:	61bb      	str	r3, [r7, #24]
        break;
 800290c:	e00c      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800290e:	f7ff f85d 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 8002912:	61b8      	str	r0, [r7, #24]
        break;
 8002914:	e008      	b.n	8002928 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002916:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800291a:	61bb      	str	r3, [r7, #24]
        break;
 800291c:	e004      	b.n	8002928 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	77bb      	strb	r3, [r7, #30]
        break;
 8002926:	bf00      	nop
    }

    if (pclk != 0U)
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	085a      	lsrs	r2, r3, #1
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	441a      	add	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b0f      	cmp	r3, #15
 8002946:	d909      	bls.n	800295c <UART_SetConfig+0x4a0>
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294e:	d205      	bcs.n	800295c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	b29a      	uxth	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e001      	b.n	8002960 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800296c:	7fbb      	ldrb	r3, [r7, #30]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40007c00 	.word	0x40007c00
 800297c:	40023800 	.word	0x40023800
 8002980:	00f42400 	.word	0x00f42400

08002984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00a      	beq.n	80029ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00a      	beq.n	80029d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00a      	beq.n	80029f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00a      	beq.n	8002a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00a      	beq.n	8002a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00a      	beq.n	8002a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01a      	beq.n	8002a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002a82:	d10a      	bne.n	8002a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
  }
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	@ 0x30
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ad8:	f7fe f894 	bl	8000c04 <HAL_GetTick>
 8002adc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0308 	and.w	r3, r3, #8
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d12e      	bne.n	8002b4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	2200      	movs	r2, #0
 8002af6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f83b 	bl	8002b76 <UART_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d021      	beq.n	8002b4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	e853 3f00 	ldrex	r3, [r3]
 8002b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	461a      	mov	r2, r3
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b28:	69b9      	ldr	r1, [r7, #24]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	e841 2300 	strex	r3, r2, [r1]
 8002b30:	617b      	str	r3, [r7, #20]
   return(result);
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e6      	bne.n	8002b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e011      	b.n	8002b6e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3728      	adds	r7, #40	@ 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	603b      	str	r3, [r7, #0]
 8002b82:	4613      	mov	r3, r2
 8002b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b86:	e04f      	b.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d04b      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b90:	f7fe f838 	bl	8000c04 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d302      	bcc.n	8002ba6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e04e      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d037      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d034      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b40      	cmp	r3, #64	@ 0x40
 8002bc2:	d031      	beq.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d110      	bne.n	8002bf4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2208      	movs	r2, #8
 8002bd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f838 	bl	8002c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2208      	movs	r2, #8
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e029      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c02:	d111      	bne.n	8002c28 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f81e 	bl	8002c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2220      	movs	r2, #32
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e00f      	b.n	8002c48 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d0a0      	beq.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b095      	sub	sp, #84	@ 0x54
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c60:	e853 3f00 	ldrex	r3, [r3]
 8002c64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c7e:	e841 2300 	strex	r3, r2, [r1]
 8002c82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1e6      	bne.n	8002c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3308      	adds	r3, #8
 8002c90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	e853 3f00 	ldrex	r3, [r3]
 8002c98:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f023 0301 	bic.w	r3, r3, #1
 8002ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002caa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1e5      	bne.n	8002c8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d118      	bne.n	8002cf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 0310 	bic.w	r3, r3, #16
 8002cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e6      	bne.n	8002cc6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002d0c:	bf00      	nop
 8002d0e:	3754      	adds	r7, #84	@ 0x54
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <memset>:
 8002d18:	4402      	add	r2, r0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <memset+0xa>
 8002d20:	4770      	bx	lr
 8002d22:	f803 1b01 	strb.w	r1, [r3], #1
 8002d26:	e7f9      	b.n	8002d1c <memset+0x4>

08002d28 <__libc_init_array>:
 8002d28:	b570      	push	{r4, r5, r6, lr}
 8002d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8002d60 <__libc_init_array+0x38>)
 8002d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002d64 <__libc_init_array+0x3c>)
 8002d2e:	1b64      	subs	r4, r4, r5
 8002d30:	10a4      	asrs	r4, r4, #2
 8002d32:	2600      	movs	r6, #0
 8002d34:	42a6      	cmp	r6, r4
 8002d36:	d109      	bne.n	8002d4c <__libc_init_array+0x24>
 8002d38:	4d0b      	ldr	r5, [pc, #44]	@ (8002d68 <__libc_init_array+0x40>)
 8002d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8002d6c <__libc_init_array+0x44>)
 8002d3c:	f000 f818 	bl	8002d70 <_init>
 8002d40:	1b64      	subs	r4, r4, r5
 8002d42:	10a4      	asrs	r4, r4, #2
 8002d44:	2600      	movs	r6, #0
 8002d46:	42a6      	cmp	r6, r4
 8002d48:	d105      	bne.n	8002d56 <__libc_init_array+0x2e>
 8002d4a:	bd70      	pop	{r4, r5, r6, pc}
 8002d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d50:	4798      	blx	r3
 8002d52:	3601      	adds	r6, #1
 8002d54:	e7ee      	b.n	8002d34 <__libc_init_array+0xc>
 8002d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d5a:	4798      	blx	r3
 8002d5c:	3601      	adds	r6, #1
 8002d5e:	e7f2      	b.n	8002d46 <__libc_init_array+0x1e>
 8002d60:	08002da8 	.word	0x08002da8
 8002d64:	08002da8 	.word	0x08002da8
 8002d68:	08002da8 	.word	0x08002da8
 8002d6c:	08002dac 	.word	0x08002dac

08002d70 <_init>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr

08002d7c <_fini>:
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7e:	bf00      	nop
 8002d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d82:	bc08      	pop	{r3}
 8002d84:	469e      	mov	lr, r3
 8002d86:	4770      	bx	lr
