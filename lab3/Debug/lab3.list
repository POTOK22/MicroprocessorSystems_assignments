
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080044f0  080044f0  000054f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004640  08004640  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004640  08004640  00005640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004648  08004648  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004648  08004648  00005648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800464c  0800464c  0000564c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004650  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  080046ac  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080046ac  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff4e  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238f  00000000  00000000  00015fda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00018370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aac  00000000  00000000  00019130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000267e6  00000000  00000000  00019bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ef8  00000000  00000000  000403c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f05dc  00000000  00000000  000522ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142896  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f20  00000000  00000000  001428dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001467fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080044d8 	.word	0x080044d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080044d8 	.word	0x080044d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08c      	sub	sp, #48	@ 0x30
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 031c 	add.w	r3, r7, #28
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b7b      	ldr	r3, [pc, #492]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a7a      	ldr	r2, [pc, #488]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005cc:	f043 0304 	orr.w	r3, r3, #4
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b78      	ldr	r3, [pc, #480]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0304 	and.w	r3, r3, #4
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005de:	4b75      	ldr	r3, [pc, #468]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a74      	ldr	r2, [pc, #464]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b72      	ldr	r3, [pc, #456]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f2:	617b      	str	r3, [r7, #20]
 80005f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b6f      	ldr	r3, [pc, #444]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a6e      	ldr	r2, [pc, #440]	@ (80007b4 <MX_GPIO_Init+0x204>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b6c      	ldr	r3, [pc, #432]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	613b      	str	r3, [r7, #16]
 800060c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b69      	ldr	r3, [pc, #420]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a68      	ldr	r2, [pc, #416]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b66      	ldr	r3, [pc, #408]	@ (80007b4 <MX_GPIO_Init+0x204>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	4b63      	ldr	r3, [pc, #396]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a62      	ldr	r2, [pc, #392]	@ (80007b4 <MX_GPIO_Init+0x204>)
 800062c:	f043 0308 	orr.w	r3, r3, #8
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b60      	ldr	r3, [pc, #384]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0308 	and.w	r3, r3, #8
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800063e:	4b5d      	ldr	r3, [pc, #372]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a5c      	ldr	r2, [pc, #368]	@ (80007b4 <MX_GPIO_Init+0x204>)
 8000644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b5a      	ldr	r3, [pc, #360]	@ (80007b4 <MX_GPIO_Init+0x204>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f244 0181 	movw	r1, #16513	@ 0x4081
 800065c:	4856      	ldr	r0, [pc, #344]	@ (80007b8 <MX_GPIO_Init+0x208>)
 800065e:	f000 fed9 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2140      	movs	r1, #64	@ 0x40
 8000666:	4855      	ldr	r0, [pc, #340]	@ (80007bc <MX_GPIO_Init+0x20c>)
 8000668:	f000 fed4 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800066c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000672:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000678:	2300      	movs	r3, #0
 800067a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	484f      	ldr	r0, [pc, #316]	@ (80007c0 <MX_GPIO_Init+0x210>)
 8000684:	f000 fd02 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000688:	2332      	movs	r3, #50	@ 0x32
 800068a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000698:	230b      	movs	r3, #11
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	4847      	ldr	r0, [pc, #284]	@ (80007c0 <MX_GPIO_Init+0x210>)
 80006a4:	f000 fcf2 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006a8:	2386      	movs	r3, #134	@ 0x86
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b4:	2303      	movs	r3, #3
 80006b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b8:	230b      	movs	r3, #11
 80006ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4619      	mov	r1, r3
 80006c2:	4840      	ldr	r0, [pc, #256]	@ (80007c4 <MX_GPIO_Init+0x214>)
 80006c4:	f000 fce2 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006c8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4835      	ldr	r0, [pc, #212]	@ (80007b8 <MX_GPIO_Init+0x208>)
 80006e2:	f000 fcd3 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f8:	230b      	movs	r3, #11
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	482d      	ldr	r0, [pc, #180]	@ (80007b8 <MX_GPIO_Init+0x208>)
 8000704:	f000 fcc2 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000708:	2340      	movs	r3, #64	@ 0x40
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4619      	mov	r1, r3
 800071e:	4827      	ldr	r0, [pc, #156]	@ (80007bc <MX_GPIO_Init+0x20c>)
 8000720:	f000 fcb4 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000724:	2380      	movs	r3, #128	@ 0x80
 8000726:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 031c 	add.w	r3, r7, #28
 8000734:	4619      	mov	r1, r3
 8000736:	4821      	ldr	r0, [pc, #132]	@ (80007bc <MX_GPIO_Init+0x20c>)
 8000738:	f000 fca8 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800073c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074a:	2303      	movs	r3, #3
 800074c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800074e:	230a      	movs	r3, #10
 8000750:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	4619      	mov	r1, r3
 8000758:	481a      	ldr	r0, [pc, #104]	@ (80007c4 <MX_GPIO_Init+0x214>)
 800075a:	f000 fc97 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800075e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	4814      	ldr	r0, [pc, #80]	@ (80007c4 <MX_GPIO_Init+0x214>)
 8000774:	f000 fc8a 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000778:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800078a:	230b      	movs	r3, #11
 800078c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	4619      	mov	r1, r3
 8000794:	4809      	ldr	r0, [pc, #36]	@ (80007bc <MX_GPIO_Init+0x20c>)
 8000796:	f000 fc79 	bl	800108c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2100      	movs	r1, #0
 800079e:	2028      	movs	r0, #40	@ 0x28
 80007a0:	f000 fc3d 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007a4:	2028      	movs	r0, #40	@ 0x28
 80007a6:	f000 fc56 	bl	8001056 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3730      	adds	r7, #48	@ 0x30
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40021800 	.word	0x40021800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	40020000 	.word	0x40020000

080007c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  if(htim==&htim7){
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d10b      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x28>
	    HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007d8:	2101      	movs	r1, #1
 80007da:	4808      	ldr	r0, [pc, #32]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007dc:	f000 fe33 	bl	8001446 <HAL_GPIO_TogglePin>
	    LD1_State=HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
 80007e0:	2101      	movs	r1, #1
 80007e2:	4806      	ldr	r0, [pc, #24]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007e4:	f000 fdfe 	bl	80013e4 <HAL_GPIO_ReadPin>
 80007e8:	4603      	mov	r3, r0
 80007ea:	461a      	mov	r2, r3
 80007ec:	4b04      	ldr	r3, [pc, #16]	@ (8000800 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80007ee:	701a      	strb	r2, [r3, #0]
  }

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000084 	.word	0x20000084
 80007fc:	40020400 	.word	0x40020400
 8000800:	20000078 	.word	0x20000078

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080a:	f000 fad0 	bl	8000dae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800080e:	f000 f84f 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000812:	f7ff fecd 	bl	80005b0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000816:	f000 fa11 	bl	8000c3c <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800081a:	f000 f975 	bl	8000b08 <MX_TIM7_Init>
  MX_TIM11_Init();
 800081e:	f000 f9a9 	bl	8000b74 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
#if TASK==1
  HAL_TIM_Base_Start(&htim7);
#endif
#if TASK==2 || TASK==3
  HAL_TIM_Base_Start_IT(&htim7);
 8000822:	481e      	ldr	r0, [pc, #120]	@ (800089c <main+0x98>)
 8000824:	f001 ffc0 	bl	80027a8 <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		  LD1_State=HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin);
	  }
#endif
#if TASK==3
	  uint8_t RxTimerPeriod[]="0000";
 8000828:	4a1d      	ldr	r2, [pc, #116]	@ (80008a0 <main+0x9c>)
 800082a:	463b      	mov	r3, r7
 800082c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000830:	6018      	str	r0, [r3, #0]
 8000832:	3304      	adds	r3, #4
 8000834:	7019      	strb	r1, [r3, #0]

	  if(HAL_UART_Receive(&huart3, RxTimerPeriod, sizeof(RxTimerPeriod)-1, HAL_MAX_DELAY)==HAL_OK){
 8000836:	4639      	mov	r1, r7
 8000838:	f04f 33ff 	mov.w	r3, #4294967295
 800083c:	2204      	movs	r2, #4
 800083e:	4819      	ldr	r0, [pc, #100]	@ (80008a4 <main+0xa0>)
 8000840:	f002 fb2e 	bl	8002ea0 <HAL_UART_Receive>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1ee      	bne.n	8000828 <main+0x24>
		  if(sscanf((char*)RxTimerPeriod, "%lu", &AutoReloadRegister)==1){
 800084a:	463b      	mov	r3, r7
 800084c:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <main+0xa4>)
 800084e:	4917      	ldr	r1, [pc, #92]	@ (80008ac <main+0xa8>)
 8000850:	4618      	mov	r0, r3
 8000852:	f003 f81b 	bl	800388c <siscanf>
 8000856:	4603      	mov	r3, r0
 8000858:	2b01      	cmp	r3, #1
 800085a:	d1e5      	bne.n	8000828 <main+0x24>
			  if(AutoReloadRegister>=1000 && AutoReloadRegister<=9999){
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <main+0xa4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000864:	d3e0      	bcc.n	8000828 <main+0x24>
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <main+0xa4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800086e:	4293      	cmp	r3, r2
 8000870:	d8da      	bhi.n	8000828 <main+0x24>
				   HAL_TIM_Base_Stop_IT(&htim7);
 8000872:	480a      	ldr	r0, [pc, #40]	@ (800089c <main+0x98>)
 8000874:	f002 f810 	bl	8002898 <HAL_TIM_Base_Stop_IT>
				   __HAL_TIM_SET_COUNTER(&htim7, 0);
 8000878:	4b08      	ldr	r3, [pc, #32]	@ (800089c <main+0x98>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	@ 0x24
				   __HAL_TIM_SET_AUTORELOAD(&htim7, AutoReloadRegister);
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <main+0x98>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <main+0xa4>)
 8000886:	6812      	ldr	r2, [r2, #0]
 8000888:	62da      	str	r2, [r3, #44]	@ 0x2c
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <main+0xa4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a03      	ldr	r2, [pc, #12]	@ (800089c <main+0x98>)
 8000890:	60d3      	str	r3, [r2, #12]
				   HAL_TIM_Base_Start_IT(&htim7);
 8000892:	4802      	ldr	r0, [pc, #8]	@ (800089c <main+0x98>)
 8000894:	f001 ff88 	bl	80027a8 <HAL_TIM_Base_Start_IT>
  {
 8000898:	e7c6      	b.n	8000828 <main+0x24>
 800089a:	bf00      	nop
 800089c:	20000084 	.word	0x20000084
 80008a0:	080044f4 	.word	0x080044f4
 80008a4:	2000011c 	.word	0x2000011c
 80008a8:	2000007c 	.word	0x2000007c
 80008ac:	080044f0 	.word	0x080044f0

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2230      	movs	r2, #48	@ 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 f810 	bl	80038e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008d4:	f000 fdf6 	bl	80014c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000984 <SystemClock_Config+0xd4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	4a29      	ldr	r2, [pc, #164]	@ (8000984 <SystemClock_Config+0xd4>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80008e4:	4b27      	ldr	r3, [pc, #156]	@ (8000984 <SystemClock_Config+0xd4>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xd8>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a24      	ldr	r2, [pc, #144]	@ (8000988 <SystemClock_Config+0xd8>)
 80008f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b22      	ldr	r3, [pc, #136]	@ (8000988 <SystemClock_Config+0xd8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800090c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000920:	23d8      	movs	r3, #216	@ 0xd8
 8000922:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000928:	2303      	movs	r3, #3
 800092a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092c:	f107 0320 	add.w	r3, r7, #32
 8000930:	4618      	mov	r0, r3
 8000932:	f000 fe27 	bl	8001584 <HAL_RCC_OscConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800093c:	f000 f826 	bl	800098c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000940:	f000 fdd0 	bl	80014e4 <HAL_PWREx_EnableOverDrive>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800094a:	f000 f81f 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000960:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000966:	f107 030c 	add.w	r3, r7, #12
 800096a:	2107      	movs	r1, #7
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f8ad 	bl	8001acc <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000978:	f000 f808 	bl	800098c <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3750      	adds	r7, #80	@ 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40007000 	.word	0x40007000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <Error_Handler+0x8>

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	@ (80009dc <HAL_MspInit+0x44>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a0e      	ldr	r2, [pc, #56]	@ (80009dc <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b0c      	ldr	r3, [pc, #48]	@ (80009dc <HAL_MspInit+0x44>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	@ (80009dc <HAL_MspInit+0x44>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <HAL_MspInit+0x44>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <HAL_MspInit+0x44>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <NMI_Handler+0x4>

080009e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <MemManage_Handler+0x4>

080009f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a32:	b580      	push	{r7, lr}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a36:	f000 f9f7 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000a46:	f001 ff56 	bl	80028f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200000d0 	.word	0x200000d0

08000a54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000a58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a5c:	f000 fd0e 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000a68:	4802      	ldr	r0, [pc, #8]	@ (8000a74 <TIM7_IRQHandler+0x10>)
 8000a6a:	f001 ff44 	bl	80028f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000084 	.word	0x20000084

08000a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a80:	4a14      	ldr	r2, [pc, #80]	@ (8000ad4 <_sbrk+0x5c>)
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <_sbrk+0x60>)
 8000a84:	1ad3      	subs	r3, r2, r3
 8000a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d102      	bne.n	8000a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <_sbrk+0x64>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <_sbrk+0x68>)
 8000a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9a:	4b10      	ldr	r3, [pc, #64]	@ (8000adc <_sbrk+0x64>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	693a      	ldr	r2, [r7, #16]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d207      	bcs.n	8000ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa8:	f002 ff24 	bl	80038f4 <__errno>
 8000aac:	4603      	mov	r3, r0
 8000aae:	220c      	movs	r2, #12
 8000ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e009      	b.n	8000acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab8:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <_sbrk+0x64>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000abe:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	4a05      	ldr	r2, [pc, #20]	@ (8000adc <_sbrk+0x64>)
 8000ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aca:	68fb      	ldr	r3, [r7, #12]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20050000 	.word	0x20050000
 8000ad8:	00000400 	.word	0x00000400
 8000adc:	20000080 	.word	0x20000080
 8000ae0:	200002f0 	.word	0x200002f0

08000ae4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <SystemInit+0x20>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aee:	4a05      	ldr	r2, [pc, #20]	@ (8000b04 <SystemInit+0x20>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim11;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b18:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b1a:	4a15      	ldr	r2, [pc, #84]	@ (8000b70 <MX_TIM7_Init+0x68>)
 8000b1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b20:	226b      	movs	r2, #107	@ 0x6b
 8000b22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000-1;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b2c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000b30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000b38:	480c      	ldr	r0, [pc, #48]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b3a:	f001 fddd 	bl	80026f8 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000b44:	f7ff ff22 	bl	800098c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	4619      	mov	r1, r3
 8000b54:	4805      	ldr	r0, [pc, #20]	@ (8000b6c <MX_TIM7_Init+0x64>)
 8000b56:	f002 f8a9 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000b60:	f7ff ff14 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	3710      	adds	r7, #16
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000084 	.word	0x20000084
 8000b70:	40001400 	.word	0x40001400

08000b74 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <MX_TIM11_Init+0x40>)
 8000b7c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 108-1;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b80:	226b      	movs	r2, #107	@ 0x6b
 8000b82:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100-1;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b8c:	2263      	movs	r2, #99	@ 0x63
 8000b8e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	@ (8000bb0 <MX_TIM11_Init+0x3c>)
 8000b9e:	f001 fdab 	bl	80026f8 <HAL_TIM_Base_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8000ba8:	f7ff fef0 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000d0 	.word	0x200000d0
 8000bb4:	40014800 	.word	0x40014800

08000bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c30 <HAL_TIM_Base_MspInit+0x78>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d114      	bne.n	8000bf4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_TIM_Base_MspInit+0x7c>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_TIM_Base_MspInit+0x7c>)
 8000bd0:	f043 0320 	orr.w	r3, r3, #32
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd6:	4b17      	ldr	r3, [pc, #92]	@ (8000c34 <HAL_TIM_Base_MspInit+0x7c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	f003 0320 	and.w	r3, r3, #32
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2037      	movs	r0, #55	@ 0x37
 8000be8:	f000 fa19 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000bec:	2037      	movs	r0, #55	@ 0x37
 8000bee:	f000 fa32 	bl	8001056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000bf2:	e018      	b.n	8000c26 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM11)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c38 <HAL_TIM_Base_MspInit+0x80>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d113      	bne.n	8000c26 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_TIM_Base_MspInit+0x7c>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c02:	4a0c      	ldr	r2, [pc, #48]	@ (8000c34 <HAL_TIM_Base_MspInit+0x7c>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <HAL_TIM_Base_MspInit+0x7c>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	201a      	movs	r0, #26
 8000c1c:	f000 f9ff 	bl	800101e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000c20:	201a      	movs	r0, #26
 8000c22:	f000 fa18 	bl	8001056 <HAL_NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40001400 	.word	0x40001400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40014800 	.word	0x40014800

08000c3c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c40:	4b14      	ldr	r3, [pc, #80]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c42:	4a15      	ldr	r2, [pc, #84]	@ (8000c98 <MX_USART3_UART_Init+0x5c>)
 8000c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c46:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c62:	220c      	movs	r2, #12
 8000c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <MX_USART3_UART_Init+0x58>)
 8000c80:	f002 f8c0 	bl	8002e04 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c8a:	f7ff fe7f 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000011c 	.word	0x2000011c
 8000c98:	40004800 	.word	0x40004800

08000c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b0aa      	sub	sp, #168	@ 0xa8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	2284      	movs	r2, #132	@ 0x84
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fe11 	bl	80038e4 <memset>
  if(uartHandle->Instance==USART3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a22      	ldr	r2, [pc, #136]	@ (8000d50 <HAL_UART_MspInit+0xb4>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d13c      	bne.n	8000d46 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ccc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	f107 0310 	add.w	r3, r7, #16
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f001 f91c 	bl	8001f18 <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ce6:	f7ff fe51 	bl	800098c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cea:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <HAL_UART_MspInit+0xb8>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a19      	ldr	r2, [pc, #100]	@ (8000d54 <HAL_UART_MspInit+0xb8>)
 8000cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_UART_MspInit+0xb8>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_UART_MspInit+0xb8>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a13      	ldr	r2, [pc, #76]	@ (8000d54 <HAL_UART_MspInit+0xb8>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_UART_MspInit+0xb8>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d34:	2307      	movs	r3, #7
 8000d36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	@ (8000d58 <HAL_UART_MspInit+0xbc>)
 8000d42:	f000 f9a3 	bl	800108c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d46:	bf00      	nop
 8000d48:	37a8      	adds	r7, #168	@ 0xa8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40004800 	.word	0x40004800
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020c00 	.word	0x40020c00

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d60:	f7ff fec0 	bl	8000ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d64:	480c      	ldr	r0, [pc, #48]	@ (8000d98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d66:	490d      	ldr	r1, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d68:	4a0d      	ldr	r2, [pc, #52]	@ (8000da0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d6c:	e002      	b.n	8000d74 <LoopCopyDataInit>

08000d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d72:	3304      	adds	r3, #4

08000d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d78:	d3f9      	bcc.n	8000d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d7c:	4c0a      	ldr	r4, [pc, #40]	@ (8000da8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d80:	e001      	b.n	8000d86 <LoopFillZerobss>

08000d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d84:	3204      	adds	r2, #4

08000d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d88:	d3fb      	bcc.n	8000d82 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f002 fdb9 	bl	8003900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fd39 	bl	8000804 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000da0:	08004650 	.word	0x08004650
  ldr r2, =_sbss
 8000da4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000da8:	200002f0 	.word	0x200002f0

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>

08000dae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000db2:	2003      	movs	r0, #3
 8000db4:	f000 f928 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 f805 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dbe:	f7ff fdeb 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f943 	bl	8001072 <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f90b 	bl	800101e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	@ (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	200001a4 	.word	0x200001a4

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	200001a4 	.word	0x200001a4

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e96:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	60d3      	str	r3, [r2, #12]
}
 8000e9c:	bf00      	nop
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	05fa0000 	.word	0x05fa0000

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	@ (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	@ (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	@ (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	@ 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	@ 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	@ (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff3e 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff8e 	bl	8000f5c <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5d 	bl	8000f08 <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff31 	bl	8000ecc <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa2 	bl	8000fc4 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	@ 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	e175      	b.n	8001398 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80010ac:	2201      	movs	r2, #1
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	f040 8164 	bne.w	8001392 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d005      	beq.n	80010e2 <HAL_GPIO_Init+0x56>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d130      	bne.n	8001144 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	68da      	ldr	r2, [r3, #12]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001118:	2201      	movs	r2, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4013      	ands	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	f003 0201 	and.w	r2, r3, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b03      	cmp	r3, #3
 800114e:	d017      	beq.n	8001180 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d123      	bne.n	80011d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	08da      	lsrs	r2, r3, #3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3208      	adds	r2, #8
 80011ce:	69b9      	ldr	r1, [r7, #24]
 80011d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	2203      	movs	r2, #3
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0203 	and.w	r2, r3, #3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001210:	2b00      	cmp	r3, #0
 8001212:	f000 80be 	beq.w	8001392 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	4b66      	ldr	r3, [pc, #408]	@ (80013b0 <HAL_GPIO_Init+0x324>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	4a65      	ldr	r2, [pc, #404]	@ (80013b0 <HAL_GPIO_Init+0x324>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001220:	6453      	str	r3, [r2, #68]	@ 0x44
 8001222:	4b63      	ldr	r3, [pc, #396]	@ (80013b0 <HAL_GPIO_Init+0x324>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800122e:	4a61      	ldr	r2, [pc, #388]	@ (80013b4 <HAL_GPIO_Init+0x328>)
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	3302      	adds	r3, #2
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	220f      	movs	r2, #15
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a58      	ldr	r2, [pc, #352]	@ (80013b8 <HAL_GPIO_Init+0x32c>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d037      	beq.n	80012ca <HAL_GPIO_Init+0x23e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a57      	ldr	r2, [pc, #348]	@ (80013bc <HAL_GPIO_Init+0x330>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d031      	beq.n	80012c6 <HAL_GPIO_Init+0x23a>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <HAL_GPIO_Init+0x334>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d02b      	beq.n	80012c2 <HAL_GPIO_Init+0x236>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a55      	ldr	r2, [pc, #340]	@ (80013c4 <HAL_GPIO_Init+0x338>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d025      	beq.n	80012be <HAL_GPIO_Init+0x232>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a54      	ldr	r2, [pc, #336]	@ (80013c8 <HAL_GPIO_Init+0x33c>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d01f      	beq.n	80012ba <HAL_GPIO_Init+0x22e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a53      	ldr	r2, [pc, #332]	@ (80013cc <HAL_GPIO_Init+0x340>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d019      	beq.n	80012b6 <HAL_GPIO_Init+0x22a>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <HAL_GPIO_Init+0x344>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_GPIO_Init+0x226>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a51      	ldr	r2, [pc, #324]	@ (80013d4 <HAL_GPIO_Init+0x348>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d00d      	beq.n	80012ae <HAL_GPIO_Init+0x222>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a50      	ldr	r2, [pc, #320]	@ (80013d8 <HAL_GPIO_Init+0x34c>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d007      	beq.n	80012aa <HAL_GPIO_Init+0x21e>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4f      	ldr	r2, [pc, #316]	@ (80013dc <HAL_GPIO_Init+0x350>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_GPIO_Init+0x21a>
 80012a2:	2309      	movs	r3, #9
 80012a4:	e012      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012a6:	230a      	movs	r3, #10
 80012a8:	e010      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012aa:	2308      	movs	r3, #8
 80012ac:	e00e      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012ae:	2307      	movs	r3, #7
 80012b0:	e00c      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012b2:	2306      	movs	r3, #6
 80012b4:	e00a      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012b6:	2305      	movs	r3, #5
 80012b8:	e008      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012be:	2303      	movs	r3, #3
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x240>
 80012ca:	2300      	movs	r3, #0
 80012cc:	69fa      	ldr	r2, [r7, #28]
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80012dc:	4935      	ldr	r1, [pc, #212]	@ (80013b4 <HAL_GPIO_Init+0x328>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b3d      	ldr	r3, [pc, #244]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4313      	orrs	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800130e:	4a34      	ldr	r2, [pc, #208]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001314:	4b32      	ldr	r3, [pc, #200]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001338:	4a29      	ldr	r2, [pc, #164]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800133e:	4b28      	ldr	r3, [pc, #160]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	43db      	mvns	r3, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4013      	ands	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4313      	orrs	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001362:	4a1f      	ldr	r2, [pc, #124]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001368:	4b1d      	ldr	r3, [pc, #116]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	43db      	mvns	r3, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800138c:	4a14      	ldr	r2, [pc, #80]	@ (80013e0 <HAL_GPIO_Init+0x354>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	3301      	adds	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b0f      	cmp	r3, #15
 800139c:	f67f ae86 	bls.w	80010ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3724      	adds	r7, #36	@ 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40013800 	.word	0x40013800
 80013b8:	40020000 	.word	0x40020000
 80013bc:	40020400 	.word	0x40020400
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020c00 	.word	0x40020c00
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40021400 	.word	0x40021400
 80013d0:	40021800 	.word	0x40021800
 80013d4:	40021c00 	.word	0x40021c00
 80013d8:	40022000 	.word	0x40022000
 80013dc:	40022400 	.word	0x40022400
 80013e0:	40013c00 	.word	0x40013c00

080013e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	460b      	mov	r3, r1
 80013ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013fc:	2301      	movs	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e001      	b.n	8001406 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	807b      	strh	r3, [r7, #2]
 8001420:	4613      	mov	r3, r2
 8001422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001430:	e003      	b.n	800143a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001432:	887b      	ldrh	r3, [r7, #2]
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	619a      	str	r2, [r3, #24]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001446:	b480      	push	{r7}
 8001448:	b085      	sub	sp, #20
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	460b      	mov	r3, r1
 8001450:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001458:	887a      	ldrh	r2, [r7, #2]
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	041a      	lsls	r2, r3, #16
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	43d9      	mvns	r1, r3
 8001464:	887b      	ldrh	r3, [r7, #2]
 8001466:	400b      	ands	r3, r1
 8001468:	431a      	orrs	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
}
 800146e:	bf00      	nop
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
	...

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001486:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f806 	bl	80014ac <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40013c00 	.word	0x40013c00

080014ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a04      	ldr	r2, [pc, #16]	@ (80014e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40007000 	.word	0x40007000

080014e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	4b23      	ldr	r3, [pc, #140]	@ (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a22      	ldr	r2, [pc, #136]	@ (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b20      	ldr	r3, [pc, #128]	@ (800157c <HAL_PWREx_EnableOverDrive+0x98>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001506:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001512:	f7ff fc9d 	bl	8000e50 <HAL_GetTick>
 8001516:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001518:	e009      	b.n	800152e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800151a:	f7ff fc99 	bl	8000e50 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001528:	d901      	bls.n	800152e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e022      	b.n	8001574 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153a:	d1ee      	bne.n	800151a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0f      	ldr	r2, [pc, #60]	@ (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001546:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001548:	f7ff fc82 	bl	8000e50 <HAL_GetTick>
 800154c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800154e:	e009      	b.n	8001564 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001550:	f7ff fc7e 	bl	8000e50 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800155e:	d901      	bls.n	8001564 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e007      	b.n	8001574 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001570:	d1ee      	bne.n	8001550 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e291      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 8087 	beq.w	80016b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015a8:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b04      	cmp	r3, #4
 80015b2:	d00c      	beq.n	80015ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015b4:	4b93      	ldr	r3, [pc, #588]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	f003 030c 	and.w	r3, r3, #12
 80015bc:	2b08      	cmp	r3, #8
 80015be:	d112      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62>
 80015c0:	4b90      	ldr	r3, [pc, #576]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80015cc:	d10b      	bne.n	80015e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ce:	4b8d      	ldr	r3, [pc, #564]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d06c      	beq.n	80016b4 <HAL_RCC_OscConfig+0x130>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d168      	bne.n	80016b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e26b      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x7a>
 80015f0:	4b84      	ldr	r3, [pc, #528]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a83      	ldr	r2, [pc, #524]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80015f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	e02e      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x9c>
 8001606:	4b7f      	ldr	r3, [pc, #508]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a7e      	ldr	r2, [pc, #504]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800160c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	4b7c      	ldr	r3, [pc, #496]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a7b      	ldr	r2, [pc, #492]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	e01d      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001628:	d10c      	bne.n	8001644 <HAL_RCC_OscConfig+0xc0>
 800162a:	4b76      	ldr	r3, [pc, #472]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a75      	ldr	r2, [pc, #468]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b73      	ldr	r3, [pc, #460]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a72      	ldr	r2, [pc, #456]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800163c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	e00b      	b.n	800165c <HAL_RCC_OscConfig+0xd8>
 8001644:	4b6f      	ldr	r3, [pc, #444]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6e      	ldr	r2, [pc, #440]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b6c      	ldr	r3, [pc, #432]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6b      	ldr	r2, [pc, #428]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fbf4 	bl	8000e50 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fbf0 	bl	8000e50 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	@ 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e21f      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fbe0 	bl	8000e50 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fbdc 	bl	8000e50 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	@ 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e20b      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a6:	4b57      	ldr	r3, [pc, #348]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x110>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d069      	beq.n	8001796 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016c2:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 030c 	and.w	r3, r3, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11c      	bne.n	8001714 <HAL_RCC_OscConfig+0x190>
 80016da:	4b4a      	ldr	r3, [pc, #296]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d116      	bne.n	8001714 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016e6:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d005      	beq.n	80016fe <HAL_RCC_OscConfig+0x17a>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e1df      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fe:	4b41      	ldr	r3, [pc, #260]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	493d      	ldr	r1, [pc, #244]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001712:	e040      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800171c:	4b39      	ldr	r3, [pc, #228]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a38      	ldr	r2, [pc, #224]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001728:	f7ff fb92 	bl	8000e50 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001730:	f7ff fb8e 	bl	8000e50 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e1bd      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b30      	ldr	r3, [pc, #192]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	4929      	ldr	r1, [pc, #164]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
 8001762:	e018      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001764:	4b27      	ldr	r3, [pc, #156]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a26      	ldr	r2, [pc, #152]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001770:	f7ff fb6e 	bl	8000e50 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001778:	f7ff fb6a 	bl	8000e50 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e199      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800178a:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d038      	beq.n	8001814 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d019      	beq.n	80017de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017ae:	4a15      	ldr	r2, [pc, #84]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b6:	f7ff fb4b 	bl	8000e50 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff fb47 	bl	8000e50 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e176      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x23a>
 80017dc:	e01a      	b.n	8001814 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_RCC_OscConfig+0x280>)
 80017e4:	f023 0301 	bic.w	r3, r3, #1
 80017e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb31 	bl	8000e50 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f2:	f7ff fb2d 	bl	8000e50 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d903      	bls.n	8001808 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e15c      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
 8001804:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001808:	4b91      	ldr	r3, [pc, #580]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800180a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1ee      	bne.n	80017f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80a4 	beq.w	800196a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001822:	4b8b      	ldr	r3, [pc, #556]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001826:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10d      	bne.n	800184a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001832:	4a87      	ldr	r2, [pc, #540]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001838:	6413      	str	r3, [r2, #64]	@ 0x40
 800183a:	4b85      	ldr	r3, [pc, #532]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001846:	2301      	movs	r3, #1
 8001848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800184a:	4b82      	ldr	r3, [pc, #520]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001852:	2b00      	cmp	r3, #0
 8001854:	d118      	bne.n	8001888 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001856:	4b7f      	ldr	r3, [pc, #508]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001862:	f7ff faf5 	bl	8000e50 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186a:	f7ff faf1 	bl	8000e50 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b64      	cmp	r3, #100	@ 0x64
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e120      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800187c:	4b75      	ldr	r3, [pc, #468]	@ (8001a54 <HAL_RCC_OscConfig+0x4d0>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d106      	bne.n	800189e <HAL_RCC_OscConfig+0x31a>
 8001890:	4b6f      	ldr	r3, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001894:	4a6e      	ldr	r2, [pc, #440]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001896:	f043 0301 	orr.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	@ 0x70
 800189c:	e02d      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x33c>
 80018a6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018aa:	4a69      	ldr	r2, [pc, #420]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018b2:	4b67      	ldr	r3, [pc, #412]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b6:	4a66      	ldr	r2, [pc, #408]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018be:	e01c      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d10c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x35e>
 80018c8:	4b61      	ldr	r3, [pc, #388]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a60      	ldr	r2, [pc, #384]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d8:	4a5d      	ldr	r2, [pc, #372]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6713      	str	r3, [r2, #112]	@ 0x70
 80018e0:	e00b      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
 80018e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018e8:	f023 0301 	bic.w	r3, r3, #1
 80018ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ee:	4b58      	ldr	r3, [pc, #352]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f2:	4a57      	ldr	r2, [pc, #348]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80018f4:	f023 0304 	bic.w	r3, r3, #4
 80018f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d015      	beq.n	800192e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001902:	f7ff faa5 	bl	8000e50 <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	e00a      	b.n	8001920 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff faa1 	bl	8000e50 <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001918:	4293      	cmp	r3, r2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e0ce      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001920:	4b4b      	ldr	r3, [pc, #300]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d0ee      	beq.n	800190a <HAL_RCC_OscConfig+0x386>
 800192c:	e014      	b.n	8001958 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800192e:	f7ff fa8f 	bl	8000e50 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001934:	e00a      	b.n	800194c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001936:	f7ff fa8b 	bl	8000e50 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e0b8      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194c:	4b40      	ldr	r3, [pc, #256]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800194e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1ee      	bne.n	8001936 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a3b      	ldr	r2, [pc, #236]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001964:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80a4 	beq.w	8001abc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d06b      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d149      	bne.n	8001a1c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a30      	ldr	r2, [pc, #192]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 800198e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fa5c 	bl	8000e50 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7ff fa58 	bl	8000e50 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e087      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ae:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c8:	019b      	lsls	r3, r3, #6
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	4313      	orrs	r3, r2
 80019e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019e2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80019e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a18      	ldr	r2, [pc, #96]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f4:	f7ff fa2c 	bl	8000e50 <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff fa28 	bl	8000e50 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e057      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x478>
 8001a1a:	e04f      	b.n	8001abc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0b      	ldr	r2, [pc, #44]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa12 	bl	8000e50 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fa0e 	bl	8000e50 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e03d      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b03      	ldr	r3, [pc, #12]	@ (8001a50 <HAL_RCC_OscConfig+0x4cc>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x4ac>
 8001a4e:	e035      	b.n	8001abc <HAL_RCC_OscConfig+0x538>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x544>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d028      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d121      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d11a      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d111      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	085b      	lsrs	r3, r3, #1
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e000      	b.n	8001abe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e0d0      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d910      	bls.n	8001b14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af2:	4b67      	ldr	r3, [pc, #412]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f023 020f 	bic.w	r2, r3, #15
 8001afa:	4965      	ldr	r1, [pc, #404]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b02:	4b63      	ldr	r3, [pc, #396]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b8      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d020      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b2c:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a58      	ldr	r2, [pc, #352]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b44:	4b53      	ldr	r3, [pc, #332]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	4a52      	ldr	r2, [pc, #328]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b50:	4b50      	ldr	r3, [pc, #320]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	494d      	ldr	r1, [pc, #308]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d040      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d107      	bne.n	8001b86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b76:	4b47      	ldr	r3, [pc, #284]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d115      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e07f      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d107      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b8e:	4b41      	ldr	r3, [pc, #260]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d109      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e073      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e06b      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bae:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 0203 	bic.w	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4936      	ldr	r1, [pc, #216]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bc0:	f7ff f946 	bl	8000e50 <HAL_GetTick>
 8001bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc6:	e00a      	b.n	8001bde <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc8:	f7ff f942 	bl	8000e50 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e053      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	4b2d      	ldr	r3, [pc, #180]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 020c 	and.w	r2, r3, #12
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1eb      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b27      	ldr	r3, [pc, #156]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 030f 	and.w	r3, r3, #15
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d210      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b24      	ldr	r3, [pc, #144]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 020f 	bic.w	r2, r3, #15
 8001c06:	4922      	ldr	r1, [pc, #136]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e032      	b.n	8001c86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4916      	ldr	r1, [pc, #88]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	490e      	ldr	r1, [pc, #56]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c5e:	f000 f821 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0b      	ldr	r3, [pc, #44]	@ (8001c94 <HAL_RCC_ClockConfig+0x1c8>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490a      	ldr	r1, [pc, #40]	@ (8001c98 <HAL_RCC_ClockConfig+0x1cc>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <HAL_RCC_ClockConfig+0x1d0>)
 8001c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1d4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff f8a2 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00
 8001c94:	40023800 	.word	0x40023800
 8001c98:	08004508 	.word	0x08004508
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20000004 	.word	0x20000004

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ca8:	b094      	sub	sp, #80	@ 0x50
 8001caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cbc:	4b79      	ldr	r3, [pc, #484]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	f200 80e1 	bhi.w	8001e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d003      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x3a>
 8001cd6:	e0db      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cd8:	4b73      	ldr	r3, [pc, #460]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cdc:	e0db      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cde:	4b73      	ldr	r3, [pc, #460]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce2:	e0d8      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001cee:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d063      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	099b      	lsrs	r3, r3, #6
 8001d00:	2200      	movs	r2, #0
 8001d02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d0e:	2300      	movs	r3, #0
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d16:	4622      	mov	r2, r4
 8001d18:	462b      	mov	r3, r5
 8001d1a:	f04f 0000 	mov.w	r0, #0
 8001d1e:	f04f 0100 	mov.w	r1, #0
 8001d22:	0159      	lsls	r1, r3, #5
 8001d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d28:	0150      	lsls	r0, r2, #5
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4621      	mov	r1, r4
 8001d30:	1a51      	subs	r1, r2, r1
 8001d32:	6139      	str	r1, [r7, #16]
 8001d34:	4629      	mov	r1, r5
 8001d36:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d48:	4659      	mov	r1, fp
 8001d4a:	018b      	lsls	r3, r1, #6
 8001d4c:	4651      	mov	r1, sl
 8001d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d52:	4651      	mov	r1, sl
 8001d54:	018a      	lsls	r2, r1, #6
 8001d56:	4651      	mov	r1, sl
 8001d58:	ebb2 0801 	subs.w	r8, r2, r1
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	f04f 0300 	mov.w	r3, #0
 8001d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d76:	4690      	mov	r8, r2
 8001d78:	4699      	mov	r9, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	eb18 0303 	adds.w	r3, r8, r3
 8001d80:	60bb      	str	r3, [r7, #8]
 8001d82:	462b      	mov	r3, r5
 8001d84:	eb49 0303 	adc.w	r3, r9, r3
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d96:	4629      	mov	r1, r5
 8001d98:	024b      	lsls	r3, r1, #9
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da0:	4621      	mov	r1, r4
 8001da2:	024a      	lsls	r2, r1, #9
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001daa:	2200      	movs	r2, #0
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001db4:	f7fe fa84 	bl	80002c0 <__aeabi_uldivmod>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc0:	e058      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	099b      	lsrs	r3, r3, #6
 8001dc8:	2200      	movs	r2, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4611      	mov	r1, r2
 8001dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dd2:	623b      	str	r3, [r7, #32]
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ddc:	4642      	mov	r2, r8
 8001dde:	464b      	mov	r3, r9
 8001de0:	f04f 0000 	mov.w	r0, #0
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	0159      	lsls	r1, r3, #5
 8001dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dee:	0150      	lsls	r0, r2, #5
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	4641      	mov	r1, r8
 8001df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e14:	ebb2 040a 	subs.w	r4, r2, sl
 8001e18:	eb63 050b 	sbc.w	r5, r3, fp
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	00eb      	lsls	r3, r5, #3
 8001e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2a:	00e2      	lsls	r2, r4, #3
 8001e2c:	4614      	mov	r4, r2
 8001e2e:	461d      	mov	r5, r3
 8001e30:	4643      	mov	r3, r8
 8001e32:	18e3      	adds	r3, r4, r3
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	464b      	mov	r3, r9
 8001e38:	eb45 0303 	adc.w	r3, r5, r3
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4a:	4629      	mov	r1, r5
 8001e4c:	028b      	lsls	r3, r1, #10
 8001e4e:	4621      	mov	r1, r4
 8001e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e54:	4621      	mov	r1, r4
 8001e56:	028a      	lsls	r2, r1, #10
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	61fa      	str	r2, [r7, #28]
 8001e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e68:	f7fe fa2a 	bl	80002c0 <__aeabi_uldivmod>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4613      	mov	r3, r2
 8001e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0c1b      	lsrs	r3, r3, #16
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	3301      	adds	r3, #1
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3750      	adds	r7, #80	@ 0x50
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	00f42400 	.word	0x00f42400
 8001eac:	007a1200 	.word	0x007a1200

08001eb0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000000 	.word	0x20000000

08001ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	@ (8001ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0a9b      	lsrs	r3, r3, #10
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	@ (8001eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08004518 	.word	0x08004518

08001ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef4:	f7ff ffdc 	bl	8001eb0 <HAL_RCC_GetHCLKFreq>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	0b5b      	lsrs	r3, r3, #13
 8001f00:	f003 0307 	and.w	r3, r3, #7
 8001f04:	4903      	ldr	r1, [pc, #12]	@ (8001f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f06:	5ccb      	ldrb	r3, [r1, r3]
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	08004518 	.word	0x08004518

08001f18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f40:	4b69      	ldr	r3, [pc, #420]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	4a68      	ldr	r2, [pc, #416]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f46:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f4a:	6093      	str	r3, [r2, #8]
 8001f4c:	4b66      	ldr	r3, [pc, #408]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f54:	4964      	ldr	r1, [pc, #400]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d017      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f72:	4b5d      	ldr	r3, [pc, #372]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f78:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f80:	4959      	ldr	r1, [pc, #356]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f90:	d101      	bne.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d017      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fae:	4b4e      	ldr	r3, [pc, #312]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fb4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	494a      	ldr	r1, [pc, #296]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0320 	and.w	r3, r3, #32
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 808b 	beq.w	8002112 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	4a39      	ldr	r2, [pc, #228]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	@ 0x40
 8002008:	4b37      	ldr	r3, [pc, #220]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002014:	4b35      	ldr	r3, [pc, #212]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a34      	ldr	r2, [pc, #208]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002020:	f7fe ff16 	bl	8000e50 <HAL_GetTick>
 8002024:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002026:	e008      	b.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7fe ff12 	bl	8000e50 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	@ 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e357      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800203a:	4b2c      	ldr	r3, [pc, #176]	@ (80020ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002046:	4b28      	ldr	r3, [pc, #160]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800204e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d035      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	429a      	cmp	r2, r3
 8002062:	d02e      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002064:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002068:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800206c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b1e      	ldr	r3, [pc, #120]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207a:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207e:	4a1a      	ldr	r2, [pc, #104]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002080:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002084:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002086:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d114      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7fe feda 	bl	8000e50 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800209e:	e00a      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a0:	f7fe fed6 	bl	8000e50 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e319      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0ee      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020ce:	d111      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80020de:	400b      	ands	r3, r1
 80020e0:	4901      	ldr	r1, [pc, #4]	@ (80020e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	608b      	str	r3, [r1, #8]
 80020e6:	e00b      	b.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40007000 	.word	0x40007000
 80020f0:	0ffffcff 	.word	0x0ffffcff
 80020f4:	4baa      	ldr	r3, [pc, #680]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	4aa9      	ldr	r2, [pc, #676]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80020fe:	6093      	str	r3, [r2, #8]
 8002100:	4ba7      	ldr	r3, [pc, #668]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002102:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	49a4      	ldr	r1, [pc, #656]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800210e:	4313      	orrs	r3, r2
 8002110:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800211e:	4ba0      	ldr	r3, [pc, #640]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002124:	4a9e      	ldr	r2, [pc, #632]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800212a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800212e:	4b9c      	ldr	r3, [pc, #624]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002130:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002138:	4999      	ldr	r1, [pc, #612]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800214c:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002152:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800215a:	4991      	ldr	r1, [pc, #580]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800216e:	4b8c      	ldr	r3, [pc, #560]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002174:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800217c:	4988      	ldr	r1, [pc, #544]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002190:	4b83      	ldr	r3, [pc, #524]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800219e:	4980      	ldr	r1, [pc, #512]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80021b2:	4b7b      	ldr	r3, [pc, #492]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c0:	4977      	ldr	r1, [pc, #476]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d00a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021d4:	4b72      	ldr	r3, [pc, #456]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021da:	f023 0203 	bic.w	r2, r3, #3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	496f      	ldr	r1, [pc, #444]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021f6:	4b6a      	ldr	r3, [pc, #424]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fc:	f023 020c 	bic.w	r2, r3, #12
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002204:	4966      	ldr	r1, [pc, #408]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00a      	beq.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002218:	4b61      	ldr	r3, [pc, #388]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800221a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800221e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002226:	495e      	ldr	r1, [pc, #376]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800223a:	4b59      	ldr	r3, [pc, #356]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002240:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002248:	4955      	ldr	r1, [pc, #340]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224a:	4313      	orrs	r3, r2
 800224c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800225c:	4b50      	ldr	r3, [pc, #320]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002262:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800226a:	494d      	ldr	r1, [pc, #308]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00a      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800227e:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002284:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800228c:	4944      	ldr	r1, [pc, #272]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80022a0:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ae:	493c      	ldr	r1, [pc, #240]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00a      	beq.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80022c2:	4b37      	ldr	r3, [pc, #220]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d0:	4933      	ldr	r1, [pc, #204]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022e4:	4b2e      	ldr	r3, [pc, #184]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022f2:	492b      	ldr	r1, [pc, #172]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d011      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800230c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002314:	4922      	ldr	r1, [pc, #136]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002324:	d101      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002326:	2301      	movs	r3, #1
 8002328:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002336:	2301      	movs	r3, #1
 8002338:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002354:	4912      	ldr	r1, [pc, #72]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002368:	4b0d      	ldr	r3, [pc, #52]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002378:	4909      	ldr	r1, [pc, #36]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d006      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 80d9 	beq.w	8002546 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002394:	4b02      	ldr	r3, [pc, #8]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a01      	ldr	r2, [pc, #4]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800239a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800239e:	e001      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80023a0:	40023800 	.word	0x40023800
 80023a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a6:	f7fe fd53 	bl	8000e50 <HAL_GetTick>
 80023aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80023ae:	f7fe fd4f 	bl	8000e50 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	@ 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e194      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80023c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d021      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11d      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023e0:	4b64      	ldr	r3, [pc, #400]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023ee:	4b61      	ldr	r3, [pc, #388]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023f4:	0e1b      	lsrs	r3, r3, #24
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	019a      	lsls	r2, r3, #6
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	061b      	lsls	r3, r3, #24
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	071b      	lsls	r3, r3, #28
 8002414:	4957      	ldr	r1, [pc, #348]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800242c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800243a:	2b00      	cmp	r3, #0
 800243c:	d02e      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002446:	d129      	bne.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002448:	4b4a      	ldr	r3, [pc, #296]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800244a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800244e:	0c1b      	lsrs	r3, r3, #16
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002456:	4b47      	ldr	r3, [pc, #284]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245c:	0f1b      	lsrs	r3, r3, #28
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	019a      	lsls	r2, r3, #6
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	041b      	lsls	r3, r3, #16
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	061b      	lsls	r3, r3, #24
 8002476:	431a      	orrs	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	071b      	lsls	r3, r3, #28
 800247c:	493d      	ldr	r1, [pc, #244]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800247e:	4313      	orrs	r3, r2
 8002480:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002484:	4b3b      	ldr	r3, [pc, #236]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002486:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800248a:	f023 021f 	bic.w	r2, r3, #31
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	3b01      	subs	r3, #1
 8002494:	4937      	ldr	r1, [pc, #220]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d01d      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80024a8:	4b32      	ldr	r3, [pc, #200]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ae:	0e1b      	lsrs	r3, r3, #24
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024bc:	0f1b      	lsrs	r3, r3, #28
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	019a      	lsls	r2, r3, #6
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	041b      	lsls	r3, r3, #16
 80024d0:	431a      	orrs	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	061b      	lsls	r3, r3, #24
 80024d6:	431a      	orrs	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	071b      	lsls	r3, r3, #28
 80024dc:	4925      	ldr	r1, [pc, #148]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d011      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	019a      	lsls	r2, r3, #6
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	041b      	lsls	r3, r3, #16
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	431a      	orrs	r2, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	071b      	lsls	r3, r3, #28
 800250c:	4919      	ldr	r1, [pc, #100]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800250e:	4313      	orrs	r3, r2
 8002510:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002514:	4b17      	ldr	r3, [pc, #92]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800251e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002520:	f7fe fc96 	bl	8000e50 <HAL_GetTick>
 8002524:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002528:	f7fe fc92 	bl	8000e50 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e0d7      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800253a:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b01      	cmp	r3, #1
 800254a:	f040 80cd 	bne.w	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800254e:	4b09      	ldr	r3, [pc, #36]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a08      	ldr	r2, [pc, #32]	@ (8002574 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255a:	f7fe fc79 	bl	8000e50 <HAL_GetTick>
 800255e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002562:	f7fe fc75 	bl	8000e50 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b64      	cmp	r3, #100	@ 0x64
 800256e:	d903      	bls.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e0ba      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002574:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002578:	4b5e      	ldr	r3, [pc, #376]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002584:	d0ed      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d02e      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d12a      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80025ae:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025bc:	4b4d      	ldr	r3, [pc, #308]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c2:	0f1b      	lsrs	r3, r3, #28
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	019a      	lsls	r2, r3, #6
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	061b      	lsls	r3, r3, #24
 80025dc:	431a      	orrs	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	071b      	lsls	r3, r3, #28
 80025e2:	4944      	ldr	r1, [pc, #272]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025ea:	4b42      	ldr	r3, [pc, #264]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025f0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	493d      	ldr	r1, [pc, #244]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d022      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002614:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002618:	d11d      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800261a:	4b36      	ldr	r3, [pc, #216]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002620:	0e1b      	lsrs	r3, r3, #24
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002628:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262e:	0f1b      	lsrs	r3, r3, #28
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	019a      	lsls	r2, r3, #6
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	071b      	lsls	r3, r3, #28
 800264e:	4929      	ldr	r1, [pc, #164]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002662:	4b24      	ldr	r3, [pc, #144]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002668:	0e1b      	lsrs	r3, r3, #24
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002670:	4b20      	ldr	r3, [pc, #128]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	f003 0303 	and.w	r3, r3, #3
 800267c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	019a      	lsls	r2, r3, #6
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	041b      	lsls	r3, r3, #16
 8002688:	431a      	orrs	r2, r3
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	061b      	lsls	r3, r3, #24
 800268e:	431a      	orrs	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	071b      	lsls	r3, r3, #28
 8002696:	4917      	ldr	r1, [pc, #92]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002698:	4313      	orrs	r3, r2
 800269a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80026a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ac:	4911      	ldr	r1, [pc, #68]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80026b4:	4b0f      	ldr	r3, [pc, #60]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fbc6 	bl	8000e50 <HAL_GetTick>
 80026c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80026c8:	f7fe fbc2 	bl	8000e50 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b64      	cmp	r3, #100	@ 0x64
 80026d4:	d901      	bls.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e007      	b.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026e6:	d1ef      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3720      	adds	r7, #32
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40023800 	.word	0x40023800

080026f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e049      	b.n	800279e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fa4a 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3304      	adds	r3, #4
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f000 fa0c 	bl	8002b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d001      	beq.n	80027c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e054      	b.n	800286a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a26      	ldr	r2, [pc, #152]	@ (8002878 <HAL_TIM_Base_Start_IT+0xd0>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d022      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ea:	d01d      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_TIM_Base_Start_IT+0xd4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d018      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a21      	ldr	r2, [pc, #132]	@ (8002880 <HAL_TIM_Base_Start_IT+0xd8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d013      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <HAL_TIM_Base_Start_IT+0xdc>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00e      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a1e      	ldr	r2, [pc, #120]	@ (8002888 <HAL_TIM_Base_Start_IT+0xe0>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d009      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1c      	ldr	r2, [pc, #112]	@ (800288c <HAL_TIM_Base_Start_IT+0xe4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d004      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x80>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <HAL_TIM_Base_Start_IT+0xe8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d115      	bne.n	8002854 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_TIM_Base_Start_IT+0xec>)
 8002830:	4013      	ands	r3, r2
 8002832:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b06      	cmp	r3, #6
 8002838:	d015      	beq.n	8002866 <HAL_TIM_Base_Start_IT+0xbe>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002840:	d011      	beq.n	8002866 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002852:	e008      	b.n	8002866 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e000      	b.n	8002868 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40010000 	.word	0x40010000
 800287c:	40000400 	.word	0x40000400
 8002880:	40000800 	.word	0x40000800
 8002884:	40000c00 	.word	0x40000c00
 8002888:	40010400 	.word	0x40010400
 800288c:	40014000 	.word	0x40014000
 8002890:	40001800 	.word	0x40001800
 8002894:	00010007 	.word	0x00010007

08002898 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68da      	ldr	r2, [r3, #12]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0201 	bic.w	r2, r2, #1
 80028ae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6a1a      	ldr	r2, [r3, #32]
 80028b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028ba:	4013      	ands	r3, r2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10f      	bne.n	80028e0 <HAL_TIM_Base_Stop_IT+0x48>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a1a      	ldr	r2, [r3, #32]
 80028c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_Base_Stop_IT+0x48>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01b      	beq.n	800295a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f06f 0202 	mvn.w	r2, #2
 800292a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f8e9 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002946:	e005      	b.n	8002954 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8db 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8ec 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01b      	beq.n	80029a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0204 	mvn.w	r2, #4
 8002976:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2202      	movs	r2, #2
 800297c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f8c3 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002992:	e005      	b.n	80029a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f8b5 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8c6 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d01b      	beq.n	80029f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0208 	mvn.w	r2, #8
 80029c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f89d 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 80029de:	e005      	b.n	80029ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 f88f 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8a0 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f003 0310 	and.w	r3, r3, #16
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d01b      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f06f 0210 	mvn.w	r2, #16
 8002a0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2208      	movs	r2, #8
 8002a14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f877 	bl	8002b18 <HAL_TIM_IC_CaptureCallback>
 8002a2a:	e005      	b.n	8002a38 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f869 	bl	8002b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f87a 	bl	8002b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00c      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f06f 0201 	mvn.w	r2, #1
 8002a5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fd feb3 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d104      	bne.n	8002a76 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00c      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f9a6 	bl	8002ddc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00c      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f99e 	bl	8002df0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00c      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d007      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f834 	bl	8002b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f003 0320 	and.w	r3, r3, #32
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 0320 	and.w	r3, r3, #32
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0220 	mvn.w	r2, #32
 8002af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f966 	bl	8002dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a46      	ldr	r2, [pc, #280]	@ (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d013      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d00f      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a43      	ldr	r2, [pc, #268]	@ (8002c84 <TIM_Base_SetConfig+0x130>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00b      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a42      	ldr	r2, [pc, #264]	@ (8002c88 <TIM_Base_SetConfig+0x134>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a41      	ldr	r2, [pc, #260]	@ (8002c8c <TIM_Base_SetConfig+0x138>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d003      	beq.n	8002b94 <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a40      	ldr	r2, [pc, #256]	@ (8002c90 <TIM_Base_SetConfig+0x13c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d108      	bne.n	8002ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a35      	ldr	r2, [pc, #212]	@ (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d02b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb4:	d027      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <TIM_Base_SetConfig+0x130>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d023      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a31      	ldr	r2, [pc, #196]	@ (8002c88 <TIM_Base_SetConfig+0x134>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d01f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a30      	ldr	r2, [pc, #192]	@ (8002c8c <TIM_Base_SetConfig+0x138>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d01b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c90 <TIM_Base_SetConfig+0x13c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d017      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c94 <TIM_Base_SetConfig+0x140>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d013      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c98 <TIM_Base_SetConfig+0x144>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00f      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c9c <TIM_Base_SetConfig+0x148>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <TIM_Base_SetConfig+0x14c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca4 <TIM_Base_SetConfig+0x150>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d003      	beq.n	8002c06 <TIM_Base_SetConfig+0xb2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <TIM_Base_SetConfig+0x154>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d108      	bne.n	8002c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <TIM_Base_SetConfig+0x12c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d003      	beq.n	8002c4c <TIM_Base_SetConfig+0xf8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a12      	ldr	r2, [pc, #72]	@ (8002c90 <TIM_Base_SetConfig+0x13c>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d103      	bne.n	8002c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	691a      	ldr	r2, [r3, #16]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d105      	bne.n	8002c72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f023 0201 	bic.w	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	611a      	str	r2, [r3, #16]
  }
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	40010000 	.word	0x40010000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40010400 	.word	0x40010400
 8002c94:	40014000 	.word	0x40014000
 8002c98:	40014400 	.word	0x40014400
 8002c9c:	40014800 	.word	0x40014800
 8002ca0:	40001800 	.word	0x40001800
 8002ca4:	40001c00 	.word	0x40001c00
 8002ca8:	40002000 	.word	0x40002000

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e06d      	b.n	8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a30      	ldr	r2, [pc, #192]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d108      	bne.n	8002d0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002cfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a20      	ldr	r2, [pc, #128]	@ (8002dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d022      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d36:	d01d      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002db4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d018      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a1c      	ldr	r2, [pc, #112]	@ (8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d013      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1a      	ldr	r2, [pc, #104]	@ (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00e      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d009      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d004      	beq.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10c      	bne.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	40010000 	.word	0x40010000
 8002db0:	40010400 	.word	0x40010400
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40000c00 	.word	0x40000c00
 8002dc0:	40014000 	.word	0x40014000
 8002dc4:	40001800 	.word	0x40001800

08002dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e040      	b.n	8002e98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d106      	bne.n	8002e2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd ff38 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2224      	movs	r2, #36	@ 0x24
 8002e30:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 fb54 	bl	80034f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f8ed 	bl	8003030 <UART_SetConfig>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e01b      	b.n	8002e98 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fbd3 	bl	800363c <UART_CheckIdleState>
 8002e96:	4603      	mov	r3, r0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08a      	sub	sp, #40	@ 0x28
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	f040 80b5 	bne.w	8003026 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Receive+0x28>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0ad      	b.n	8003028 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2222      	movs	r2, #34	@ 0x22
 8002ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ee2:	f7fd ffb5 	bl	8000e50 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	88fa      	ldrh	r2, [r7, #6]
 8002eec:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f00:	d10e      	bne.n	8002f20 <HAL_UART_Receive+0x80>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_UART_Receive+0x76>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002f10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f14:	e02d      	b.n	8002f72 <HAL_UART_Receive+0xd2>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	22ff      	movs	r2, #255	@ 0xff
 8002f1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f1e:	e028      	b.n	8002f72 <HAL_UART_Receive+0xd2>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10d      	bne.n	8002f44 <HAL_UART_Receive+0xa4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_UART_Receive+0x9a>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	22ff      	movs	r2, #255	@ 0xff
 8002f34:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f38:	e01b      	b.n	8002f72 <HAL_UART_Receive+0xd2>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	227f      	movs	r2, #127	@ 0x7f
 8002f3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f42:	e016      	b.n	8002f72 <HAL_UART_Receive+0xd2>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f4c:	d10d      	bne.n	8002f6a <HAL_UART_Receive+0xca>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <HAL_UART_Receive+0xc0>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	227f      	movs	r2, #127	@ 0x7f
 8002f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f5e:	e008      	b.n	8002f72 <HAL_UART_Receive+0xd2>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	223f      	movs	r2, #63	@ 0x3f
 8002f64:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002f68:	e003      	b.n	8002f72 <HAL_UART_Receive+0xd2>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002f78:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f82:	d108      	bne.n	8002f96 <HAL_UART_Receive+0xf6>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	e003      	b.n	8002f9e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002f9e:	e036      	b.n	800300e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2120      	movs	r1, #32
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 fb9d 	bl	80036ea <UART_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e032      	b.n	8003028 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10c      	bne.n	8002fe2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	8a7b      	ldrh	r3, [r7, #18]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	e00c      	b.n	8002ffc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	8a7b      	ldrh	r3, [r7, #18]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d1c2      	bne.n	8002fa0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2220      	movs	r2, #32
 800301e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003038:	2300      	movs	r3, #0
 800303a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	431a      	orrs	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4ba6      	ldr	r3, [pc, #664]	@ (80032f4 <UART_SetConfig+0x2c4>)
 800305c:	4013      	ands	r3, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	6979      	ldr	r1, [r7, #20]
 8003064:	430b      	orrs	r3, r1
 8003066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	430a      	orrs	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a94      	ldr	r2, [pc, #592]	@ (80032f8 <UART_SetConfig+0x2c8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d120      	bne.n	80030ee <UART_SetConfig+0xbe>
 80030ac:	4b93      	ldr	r3, [pc, #588]	@ (80032fc <UART_SetConfig+0x2cc>)
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d816      	bhi.n	80030e8 <UART_SetConfig+0xb8>
 80030ba:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <UART_SetConfig+0x90>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	080030d1 	.word	0x080030d1
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030d7 	.word	0x080030d7
 80030cc:	080030e3 	.word	0x080030e3
 80030d0:	2301      	movs	r3, #1
 80030d2:	77fb      	strb	r3, [r7, #31]
 80030d4:	e150      	b.n	8003378 <UART_SetConfig+0x348>
 80030d6:	2302      	movs	r3, #2
 80030d8:	77fb      	strb	r3, [r7, #31]
 80030da:	e14d      	b.n	8003378 <UART_SetConfig+0x348>
 80030dc:	2304      	movs	r3, #4
 80030de:	77fb      	strb	r3, [r7, #31]
 80030e0:	e14a      	b.n	8003378 <UART_SetConfig+0x348>
 80030e2:	2308      	movs	r3, #8
 80030e4:	77fb      	strb	r3, [r7, #31]
 80030e6:	e147      	b.n	8003378 <UART_SetConfig+0x348>
 80030e8:	2310      	movs	r3, #16
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e144      	b.n	8003378 <UART_SetConfig+0x348>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a83      	ldr	r2, [pc, #524]	@ (8003300 <UART_SetConfig+0x2d0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d132      	bne.n	800315e <UART_SetConfig+0x12e>
 80030f8:	4b80      	ldr	r3, [pc, #512]	@ (80032fc <UART_SetConfig+0x2cc>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b0c      	cmp	r3, #12
 8003104:	d828      	bhi.n	8003158 <UART_SetConfig+0x128>
 8003106:	a201      	add	r2, pc, #4	@ (adr r2, 800310c <UART_SetConfig+0xdc>)
 8003108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310c:	08003141 	.word	0x08003141
 8003110:	08003159 	.word	0x08003159
 8003114:	08003159 	.word	0x08003159
 8003118:	08003159 	.word	0x08003159
 800311c:	0800314d 	.word	0x0800314d
 8003120:	08003159 	.word	0x08003159
 8003124:	08003159 	.word	0x08003159
 8003128:	08003159 	.word	0x08003159
 800312c:	08003147 	.word	0x08003147
 8003130:	08003159 	.word	0x08003159
 8003134:	08003159 	.word	0x08003159
 8003138:	08003159 	.word	0x08003159
 800313c:	08003153 	.word	0x08003153
 8003140:	2300      	movs	r3, #0
 8003142:	77fb      	strb	r3, [r7, #31]
 8003144:	e118      	b.n	8003378 <UART_SetConfig+0x348>
 8003146:	2302      	movs	r3, #2
 8003148:	77fb      	strb	r3, [r7, #31]
 800314a:	e115      	b.n	8003378 <UART_SetConfig+0x348>
 800314c:	2304      	movs	r3, #4
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e112      	b.n	8003378 <UART_SetConfig+0x348>
 8003152:	2308      	movs	r3, #8
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e10f      	b.n	8003378 <UART_SetConfig+0x348>
 8003158:	2310      	movs	r3, #16
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e10c      	b.n	8003378 <UART_SetConfig+0x348>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a68      	ldr	r2, [pc, #416]	@ (8003304 <UART_SetConfig+0x2d4>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d120      	bne.n	80031aa <UART_SetConfig+0x17a>
 8003168:	4b64      	ldr	r3, [pc, #400]	@ (80032fc <UART_SetConfig+0x2cc>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003172:	2b30      	cmp	r3, #48	@ 0x30
 8003174:	d013      	beq.n	800319e <UART_SetConfig+0x16e>
 8003176:	2b30      	cmp	r3, #48	@ 0x30
 8003178:	d814      	bhi.n	80031a4 <UART_SetConfig+0x174>
 800317a:	2b20      	cmp	r3, #32
 800317c:	d009      	beq.n	8003192 <UART_SetConfig+0x162>
 800317e:	2b20      	cmp	r3, #32
 8003180:	d810      	bhi.n	80031a4 <UART_SetConfig+0x174>
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <UART_SetConfig+0x15c>
 8003186:	2b10      	cmp	r3, #16
 8003188:	d006      	beq.n	8003198 <UART_SetConfig+0x168>
 800318a:	e00b      	b.n	80031a4 <UART_SetConfig+0x174>
 800318c:	2300      	movs	r3, #0
 800318e:	77fb      	strb	r3, [r7, #31]
 8003190:	e0f2      	b.n	8003378 <UART_SetConfig+0x348>
 8003192:	2302      	movs	r3, #2
 8003194:	77fb      	strb	r3, [r7, #31]
 8003196:	e0ef      	b.n	8003378 <UART_SetConfig+0x348>
 8003198:	2304      	movs	r3, #4
 800319a:	77fb      	strb	r3, [r7, #31]
 800319c:	e0ec      	b.n	8003378 <UART_SetConfig+0x348>
 800319e:	2308      	movs	r3, #8
 80031a0:	77fb      	strb	r3, [r7, #31]
 80031a2:	e0e9      	b.n	8003378 <UART_SetConfig+0x348>
 80031a4:	2310      	movs	r3, #16
 80031a6:	77fb      	strb	r3, [r7, #31]
 80031a8:	e0e6      	b.n	8003378 <UART_SetConfig+0x348>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a56      	ldr	r2, [pc, #344]	@ (8003308 <UART_SetConfig+0x2d8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d120      	bne.n	80031f6 <UART_SetConfig+0x1c6>
 80031b4:	4b51      	ldr	r3, [pc, #324]	@ (80032fc <UART_SetConfig+0x2cc>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031ba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031be:	2bc0      	cmp	r3, #192	@ 0xc0
 80031c0:	d013      	beq.n	80031ea <UART_SetConfig+0x1ba>
 80031c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031c4:	d814      	bhi.n	80031f0 <UART_SetConfig+0x1c0>
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d009      	beq.n	80031de <UART_SetConfig+0x1ae>
 80031ca:	2b80      	cmp	r3, #128	@ 0x80
 80031cc:	d810      	bhi.n	80031f0 <UART_SetConfig+0x1c0>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <UART_SetConfig+0x1a8>
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	d006      	beq.n	80031e4 <UART_SetConfig+0x1b4>
 80031d6:	e00b      	b.n	80031f0 <UART_SetConfig+0x1c0>
 80031d8:	2300      	movs	r3, #0
 80031da:	77fb      	strb	r3, [r7, #31]
 80031dc:	e0cc      	b.n	8003378 <UART_SetConfig+0x348>
 80031de:	2302      	movs	r3, #2
 80031e0:	77fb      	strb	r3, [r7, #31]
 80031e2:	e0c9      	b.n	8003378 <UART_SetConfig+0x348>
 80031e4:	2304      	movs	r3, #4
 80031e6:	77fb      	strb	r3, [r7, #31]
 80031e8:	e0c6      	b.n	8003378 <UART_SetConfig+0x348>
 80031ea:	2308      	movs	r3, #8
 80031ec:	77fb      	strb	r3, [r7, #31]
 80031ee:	e0c3      	b.n	8003378 <UART_SetConfig+0x348>
 80031f0:	2310      	movs	r3, #16
 80031f2:	77fb      	strb	r3, [r7, #31]
 80031f4:	e0c0      	b.n	8003378 <UART_SetConfig+0x348>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a44      	ldr	r2, [pc, #272]	@ (800330c <UART_SetConfig+0x2dc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d125      	bne.n	800324c <UART_SetConfig+0x21c>
 8003200:	4b3e      	ldr	r3, [pc, #248]	@ (80032fc <UART_SetConfig+0x2cc>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800320e:	d017      	beq.n	8003240 <UART_SetConfig+0x210>
 8003210:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003214:	d817      	bhi.n	8003246 <UART_SetConfig+0x216>
 8003216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800321a:	d00b      	beq.n	8003234 <UART_SetConfig+0x204>
 800321c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003220:	d811      	bhi.n	8003246 <UART_SetConfig+0x216>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <UART_SetConfig+0x1fe>
 8003226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800322a:	d006      	beq.n	800323a <UART_SetConfig+0x20a>
 800322c:	e00b      	b.n	8003246 <UART_SetConfig+0x216>
 800322e:	2300      	movs	r3, #0
 8003230:	77fb      	strb	r3, [r7, #31]
 8003232:	e0a1      	b.n	8003378 <UART_SetConfig+0x348>
 8003234:	2302      	movs	r3, #2
 8003236:	77fb      	strb	r3, [r7, #31]
 8003238:	e09e      	b.n	8003378 <UART_SetConfig+0x348>
 800323a:	2304      	movs	r3, #4
 800323c:	77fb      	strb	r3, [r7, #31]
 800323e:	e09b      	b.n	8003378 <UART_SetConfig+0x348>
 8003240:	2308      	movs	r3, #8
 8003242:	77fb      	strb	r3, [r7, #31]
 8003244:	e098      	b.n	8003378 <UART_SetConfig+0x348>
 8003246:	2310      	movs	r3, #16
 8003248:	77fb      	strb	r3, [r7, #31]
 800324a:	e095      	b.n	8003378 <UART_SetConfig+0x348>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2f      	ldr	r2, [pc, #188]	@ (8003310 <UART_SetConfig+0x2e0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d125      	bne.n	80032a2 <UART_SetConfig+0x272>
 8003256:	4b29      	ldr	r3, [pc, #164]	@ (80032fc <UART_SetConfig+0x2cc>)
 8003258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800325c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003264:	d017      	beq.n	8003296 <UART_SetConfig+0x266>
 8003266:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800326a:	d817      	bhi.n	800329c <UART_SetConfig+0x26c>
 800326c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003270:	d00b      	beq.n	800328a <UART_SetConfig+0x25a>
 8003272:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003276:	d811      	bhi.n	800329c <UART_SetConfig+0x26c>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <UART_SetConfig+0x254>
 800327c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003280:	d006      	beq.n	8003290 <UART_SetConfig+0x260>
 8003282:	e00b      	b.n	800329c <UART_SetConfig+0x26c>
 8003284:	2301      	movs	r3, #1
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e076      	b.n	8003378 <UART_SetConfig+0x348>
 800328a:	2302      	movs	r3, #2
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e073      	b.n	8003378 <UART_SetConfig+0x348>
 8003290:	2304      	movs	r3, #4
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e070      	b.n	8003378 <UART_SetConfig+0x348>
 8003296:	2308      	movs	r3, #8
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e06d      	b.n	8003378 <UART_SetConfig+0x348>
 800329c:	2310      	movs	r3, #16
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e06a      	b.n	8003378 <UART_SetConfig+0x348>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <UART_SetConfig+0x2e4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d138      	bne.n	800331e <UART_SetConfig+0x2ee>
 80032ac:	4b13      	ldr	r3, [pc, #76]	@ (80032fc <UART_SetConfig+0x2cc>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032ba:	d017      	beq.n	80032ec <UART_SetConfig+0x2bc>
 80032bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032c0:	d82a      	bhi.n	8003318 <UART_SetConfig+0x2e8>
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c6:	d00b      	beq.n	80032e0 <UART_SetConfig+0x2b0>
 80032c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032cc:	d824      	bhi.n	8003318 <UART_SetConfig+0x2e8>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <UART_SetConfig+0x2aa>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d6:	d006      	beq.n	80032e6 <UART_SetConfig+0x2b6>
 80032d8:	e01e      	b.n	8003318 <UART_SetConfig+0x2e8>
 80032da:	2300      	movs	r3, #0
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e04b      	b.n	8003378 <UART_SetConfig+0x348>
 80032e0:	2302      	movs	r3, #2
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e048      	b.n	8003378 <UART_SetConfig+0x348>
 80032e6:	2304      	movs	r3, #4
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e045      	b.n	8003378 <UART_SetConfig+0x348>
 80032ec:	2308      	movs	r3, #8
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e042      	b.n	8003378 <UART_SetConfig+0x348>
 80032f2:	bf00      	nop
 80032f4:	efff69f3 	.word	0xefff69f3
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40023800 	.word	0x40023800
 8003300:	40004400 	.word	0x40004400
 8003304:	40004800 	.word	0x40004800
 8003308:	40004c00 	.word	0x40004c00
 800330c:	40005000 	.word	0x40005000
 8003310:	40011400 	.word	0x40011400
 8003314:	40007800 	.word	0x40007800
 8003318:	2310      	movs	r3, #16
 800331a:	77fb      	strb	r3, [r7, #31]
 800331c:	e02c      	b.n	8003378 <UART_SetConfig+0x348>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a72      	ldr	r2, [pc, #456]	@ (80034ec <UART_SetConfig+0x4bc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d125      	bne.n	8003374 <UART_SetConfig+0x344>
 8003328:	4b71      	ldr	r3, [pc, #452]	@ (80034f0 <UART_SetConfig+0x4c0>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003332:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003336:	d017      	beq.n	8003368 <UART_SetConfig+0x338>
 8003338:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800333c:	d817      	bhi.n	800336e <UART_SetConfig+0x33e>
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003342:	d00b      	beq.n	800335c <UART_SetConfig+0x32c>
 8003344:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003348:	d811      	bhi.n	800336e <UART_SetConfig+0x33e>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <UART_SetConfig+0x326>
 800334e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003352:	d006      	beq.n	8003362 <UART_SetConfig+0x332>
 8003354:	e00b      	b.n	800336e <UART_SetConfig+0x33e>
 8003356:	2300      	movs	r3, #0
 8003358:	77fb      	strb	r3, [r7, #31]
 800335a:	e00d      	b.n	8003378 <UART_SetConfig+0x348>
 800335c:	2302      	movs	r3, #2
 800335e:	77fb      	strb	r3, [r7, #31]
 8003360:	e00a      	b.n	8003378 <UART_SetConfig+0x348>
 8003362:	2304      	movs	r3, #4
 8003364:	77fb      	strb	r3, [r7, #31]
 8003366:	e007      	b.n	8003378 <UART_SetConfig+0x348>
 8003368:	2308      	movs	r3, #8
 800336a:	77fb      	strb	r3, [r7, #31]
 800336c:	e004      	b.n	8003378 <UART_SetConfig+0x348>
 800336e:	2310      	movs	r3, #16
 8003370:	77fb      	strb	r3, [r7, #31]
 8003372:	e001      	b.n	8003378 <UART_SetConfig+0x348>
 8003374:	2310      	movs	r3, #16
 8003376:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003380:	d15b      	bne.n	800343a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003382:	7ffb      	ldrb	r3, [r7, #31]
 8003384:	2b08      	cmp	r3, #8
 8003386:	d828      	bhi.n	80033da <UART_SetConfig+0x3aa>
 8003388:	a201      	add	r2, pc, #4	@ (adr r2, 8003390 <UART_SetConfig+0x360>)
 800338a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338e:	bf00      	nop
 8003390:	080033b5 	.word	0x080033b5
 8003394:	080033bd 	.word	0x080033bd
 8003398:	080033c5 	.word	0x080033c5
 800339c:	080033db 	.word	0x080033db
 80033a0:	080033cb 	.word	0x080033cb
 80033a4:	080033db 	.word	0x080033db
 80033a8:	080033db 	.word	0x080033db
 80033ac:	080033db 	.word	0x080033db
 80033b0:	080033d3 	.word	0x080033d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7fe fd88 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 80033b8:	61b8      	str	r0, [r7, #24]
        break;
 80033ba:	e013      	b.n	80033e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033bc:	f7fe fd98 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 80033c0:	61b8      	str	r0, [r7, #24]
        break;
 80033c2:	e00f      	b.n	80033e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c4:	4b4b      	ldr	r3, [pc, #300]	@ (80034f4 <UART_SetConfig+0x4c4>)
 80033c6:	61bb      	str	r3, [r7, #24]
        break;
 80033c8:	e00c      	b.n	80033e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ca:	f7fe fc6b 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 80033ce:	61b8      	str	r0, [r7, #24]
        break;
 80033d0:	e008      	b.n	80033e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e004      	b.n	80033e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	77bb      	strb	r3, [r7, #30]
        break;
 80033e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d074      	beq.n	80034d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	005a      	lsls	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	441a      	add	r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0f      	cmp	r3, #15
 8003404:	d916      	bls.n	8003434 <UART_SetConfig+0x404>
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340c:	d212      	bcs.n	8003434 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	b29b      	uxth	r3, r3
 8003412:	f023 030f 	bic.w	r3, r3, #15
 8003416:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	085b      	lsrs	r3, r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	b29a      	uxth	r2, r3
 8003424:	89fb      	ldrh	r3, [r7, #14]
 8003426:	4313      	orrs	r3, r2
 8003428:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	89fa      	ldrh	r2, [r7, #14]
 8003430:	60da      	str	r2, [r3, #12]
 8003432:	e04f      	b.n	80034d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	77bb      	strb	r3, [r7, #30]
 8003438:	e04c      	b.n	80034d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800343a:	7ffb      	ldrb	r3, [r7, #31]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d828      	bhi.n	8003492 <UART_SetConfig+0x462>
 8003440:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <UART_SetConfig+0x418>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	0800346d 	.word	0x0800346d
 800344c:	08003475 	.word	0x08003475
 8003450:	0800347d 	.word	0x0800347d
 8003454:	08003493 	.word	0x08003493
 8003458:	08003483 	.word	0x08003483
 800345c:	08003493 	.word	0x08003493
 8003460:	08003493 	.word	0x08003493
 8003464:	08003493 	.word	0x08003493
 8003468:	0800348b 	.word	0x0800348b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800346c:	f7fe fd2c 	bl	8001ec8 <HAL_RCC_GetPCLK1Freq>
 8003470:	61b8      	str	r0, [r7, #24]
        break;
 8003472:	e013      	b.n	800349c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003474:	f7fe fd3c 	bl	8001ef0 <HAL_RCC_GetPCLK2Freq>
 8003478:	61b8      	str	r0, [r7, #24]
        break;
 800347a:	e00f      	b.n	800349c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800347c:	4b1d      	ldr	r3, [pc, #116]	@ (80034f4 <UART_SetConfig+0x4c4>)
 800347e:	61bb      	str	r3, [r7, #24]
        break;
 8003480:	e00c      	b.n	800349c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003482:	f7fe fc0f 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003486:	61b8      	str	r0, [r7, #24]
        break;
 8003488:	e008      	b.n	800349c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800348a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e004      	b.n	800349c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	77bb      	strb	r3, [r7, #30]
        break;
 800349a:	bf00      	nop
    }

    if (pclk != 0U)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	085a      	lsrs	r2, r3, #1
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	441a      	add	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b0f      	cmp	r3, #15
 80034ba:	d909      	bls.n	80034d0 <UART_SetConfig+0x4a0>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c2:	d205      	bcs.n	80034d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	e001      	b.n	80034d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40007c00 	.word	0x40007c00
 80034f0:	40023800 	.word	0x40023800
 80034f4:	00f42400 	.word	0x00f42400

080034f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01a      	beq.n	800360e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f6:	d10a      	bne.n	800360e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	605a      	str	r2, [r3, #4]
  }
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	@ 0x30
 8003640:	af02      	add	r7, sp, #8
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800364c:	f7fd fc00 	bl	8000e50 <HAL_GetTick>
 8003650:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b08      	cmp	r3, #8
 800365e:	d12e      	bne.n	80036be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	2200      	movs	r2, #0
 800366a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f83b 	bl	80036ea <UART_WaitOnFlagUntilTimeout>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d021      	beq.n	80036be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	60fb      	str	r3, [r7, #12]
   return(result);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800368e:	623b      	str	r3, [r7, #32]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	461a      	mov	r2, r3
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	69b9      	ldr	r1, [r7, #24]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	617b      	str	r3, [r7, #20]
   return(result);
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e6      	bne.n	800367a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e011      	b.n	80036e2 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3728      	adds	r7, #40	@ 0x28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	603b      	str	r3, [r7, #0]
 80036f6:	4613      	mov	r3, r2
 80036f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	e04f      	b.n	800379c <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d04b      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003704:	f7fd fba4 	bl	8000e50 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <UART_WaitOnFlagUntilTimeout+0x30>
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e04e      	b.n	80037bc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d037      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0xb2>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b80      	cmp	r3, #128	@ 0x80
 8003730:	d034      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0xb2>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	d031      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 0308 	and.w	r3, r3, #8
 8003742:	2b08      	cmp	r3, #8
 8003744:	d110      	bne.n	8003768 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2208      	movs	r2, #8
 800374c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 f838 	bl	80037c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2208      	movs	r2, #8
 8003758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e029      	b.n	80037bc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003772:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003776:	d111      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003780:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f81e 	bl	80037c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2220      	movs	r2, #32
 800378c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e00f      	b.n	80037bc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69da      	ldr	r2, [r3, #28]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d0a0      	beq.n	80036fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b095      	sub	sp, #84	@ 0x54
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80037ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e6      	bne.n	80037cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	3308      	adds	r3, #8
 8003804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	61fb      	str	r3, [r7, #28]
   return(result);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800381e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003820:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003824:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003836:	2b01      	cmp	r3, #1
 8003838:	d118      	bne.n	800386c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	60bb      	str	r3, [r7, #8]
   return(result);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f023 0310 	bic.w	r3, r3, #16
 800384e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6979      	ldr	r1, [r7, #20]
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	613b      	str	r3, [r7, #16]
   return(result);
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e6      	bne.n	800383a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003880:	bf00      	nop
 8003882:	3754      	adds	r7, #84	@ 0x54
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <siscanf>:
 800388c:	b40e      	push	{r1, r2, r3}
 800388e:	b530      	push	{r4, r5, lr}
 8003890:	b09c      	sub	sp, #112	@ 0x70
 8003892:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003894:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003898:	f854 5b04 	ldr.w	r5, [r4], #4
 800389c:	f8ad 2014 	strh.w	r2, [sp, #20]
 80038a0:	9002      	str	r0, [sp, #8]
 80038a2:	9006      	str	r0, [sp, #24]
 80038a4:	f7fc fcb4 	bl	8000210 <strlen>
 80038a8:	4b0b      	ldr	r3, [pc, #44]	@ (80038d8 <siscanf+0x4c>)
 80038aa:	9003      	str	r0, [sp, #12]
 80038ac:	9007      	str	r0, [sp, #28]
 80038ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80038b0:	480a      	ldr	r0, [pc, #40]	@ (80038dc <siscanf+0x50>)
 80038b2:	9401      	str	r4, [sp, #4]
 80038b4:	2300      	movs	r3, #0
 80038b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80038b8:	9314      	str	r3, [sp, #80]	@ 0x50
 80038ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038c2:	462a      	mov	r2, r5
 80038c4:	4623      	mov	r3, r4
 80038c6:	a902      	add	r1, sp, #8
 80038c8:	6800      	ldr	r0, [r0, #0]
 80038ca:	f000 f98f 	bl	8003bec <__ssvfiscanf_r>
 80038ce:	b01c      	add	sp, #112	@ 0x70
 80038d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038d4:	b003      	add	sp, #12
 80038d6:	4770      	bx	lr
 80038d8:	080038e1 	.word	0x080038e1
 80038dc:	2000000c 	.word	0x2000000c

080038e0 <__seofread>:
 80038e0:	2000      	movs	r0, #0
 80038e2:	4770      	bx	lr

080038e4 <memset>:
 80038e4:	4402      	add	r2, r0
 80038e6:	4603      	mov	r3, r0
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d100      	bne.n	80038ee <memset+0xa>
 80038ec:	4770      	bx	lr
 80038ee:	f803 1b01 	strb.w	r1, [r3], #1
 80038f2:	e7f9      	b.n	80038e8 <memset+0x4>

080038f4 <__errno>:
 80038f4:	4b01      	ldr	r3, [pc, #4]	@ (80038fc <__errno+0x8>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	2000000c 	.word	0x2000000c

08003900 <__libc_init_array>:
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	4d0d      	ldr	r5, [pc, #52]	@ (8003938 <__libc_init_array+0x38>)
 8003904:	4c0d      	ldr	r4, [pc, #52]	@ (800393c <__libc_init_array+0x3c>)
 8003906:	1b64      	subs	r4, r4, r5
 8003908:	10a4      	asrs	r4, r4, #2
 800390a:	2600      	movs	r6, #0
 800390c:	42a6      	cmp	r6, r4
 800390e:	d109      	bne.n	8003924 <__libc_init_array+0x24>
 8003910:	4d0b      	ldr	r5, [pc, #44]	@ (8003940 <__libc_init_array+0x40>)
 8003912:	4c0c      	ldr	r4, [pc, #48]	@ (8003944 <__libc_init_array+0x44>)
 8003914:	f000 fde0 	bl	80044d8 <_init>
 8003918:	1b64      	subs	r4, r4, r5
 800391a:	10a4      	asrs	r4, r4, #2
 800391c:	2600      	movs	r6, #0
 800391e:	42a6      	cmp	r6, r4
 8003920:	d105      	bne.n	800392e <__libc_init_array+0x2e>
 8003922:	bd70      	pop	{r4, r5, r6, pc}
 8003924:	f855 3b04 	ldr.w	r3, [r5], #4
 8003928:	4798      	blx	r3
 800392a:	3601      	adds	r6, #1
 800392c:	e7ee      	b.n	800390c <__libc_init_array+0xc>
 800392e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003932:	4798      	blx	r3
 8003934:	3601      	adds	r6, #1
 8003936:	e7f2      	b.n	800391e <__libc_init_array+0x1e>
 8003938:	08004648 	.word	0x08004648
 800393c:	08004648 	.word	0x08004648
 8003940:	08004648 	.word	0x08004648
 8003944:	0800464c 	.word	0x0800464c

08003948 <__retarget_lock_acquire_recursive>:
 8003948:	4770      	bx	lr

0800394a <__retarget_lock_release_recursive>:
 800394a:	4770      	bx	lr

0800394c <_free_r>:
 800394c:	b538      	push	{r3, r4, r5, lr}
 800394e:	4605      	mov	r5, r0
 8003950:	2900      	cmp	r1, #0
 8003952:	d041      	beq.n	80039d8 <_free_r+0x8c>
 8003954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003958:	1f0c      	subs	r4, r1, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	bfb8      	it	lt
 800395e:	18e4      	addlt	r4, r4, r3
 8003960:	f000 f8e0 	bl	8003b24 <__malloc_lock>
 8003964:	4a1d      	ldr	r2, [pc, #116]	@ (80039dc <_free_r+0x90>)
 8003966:	6813      	ldr	r3, [r2, #0]
 8003968:	b933      	cbnz	r3, 8003978 <_free_r+0x2c>
 800396a:	6063      	str	r3, [r4, #4]
 800396c:	6014      	str	r4, [r2, #0]
 800396e:	4628      	mov	r0, r5
 8003970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003974:	f000 b8dc 	b.w	8003b30 <__malloc_unlock>
 8003978:	42a3      	cmp	r3, r4
 800397a:	d908      	bls.n	800398e <_free_r+0x42>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	1821      	adds	r1, r4, r0
 8003980:	428b      	cmp	r3, r1
 8003982:	bf01      	itttt	eq
 8003984:	6819      	ldreq	r1, [r3, #0]
 8003986:	685b      	ldreq	r3, [r3, #4]
 8003988:	1809      	addeq	r1, r1, r0
 800398a:	6021      	streq	r1, [r4, #0]
 800398c:	e7ed      	b.n	800396a <_free_r+0x1e>
 800398e:	461a      	mov	r2, r3
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	b10b      	cbz	r3, 8003998 <_free_r+0x4c>
 8003994:	42a3      	cmp	r3, r4
 8003996:	d9fa      	bls.n	800398e <_free_r+0x42>
 8003998:	6811      	ldr	r1, [r2, #0]
 800399a:	1850      	adds	r0, r2, r1
 800399c:	42a0      	cmp	r0, r4
 800399e:	d10b      	bne.n	80039b8 <_free_r+0x6c>
 80039a0:	6820      	ldr	r0, [r4, #0]
 80039a2:	4401      	add	r1, r0
 80039a4:	1850      	adds	r0, r2, r1
 80039a6:	4283      	cmp	r3, r0
 80039a8:	6011      	str	r1, [r2, #0]
 80039aa:	d1e0      	bne.n	800396e <_free_r+0x22>
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	6053      	str	r3, [r2, #4]
 80039b2:	4408      	add	r0, r1
 80039b4:	6010      	str	r0, [r2, #0]
 80039b6:	e7da      	b.n	800396e <_free_r+0x22>
 80039b8:	d902      	bls.n	80039c0 <_free_r+0x74>
 80039ba:	230c      	movs	r3, #12
 80039bc:	602b      	str	r3, [r5, #0]
 80039be:	e7d6      	b.n	800396e <_free_r+0x22>
 80039c0:	6820      	ldr	r0, [r4, #0]
 80039c2:	1821      	adds	r1, r4, r0
 80039c4:	428b      	cmp	r3, r1
 80039c6:	bf04      	itt	eq
 80039c8:	6819      	ldreq	r1, [r3, #0]
 80039ca:	685b      	ldreq	r3, [r3, #4]
 80039cc:	6063      	str	r3, [r4, #4]
 80039ce:	bf04      	itt	eq
 80039d0:	1809      	addeq	r1, r1, r0
 80039d2:	6021      	streq	r1, [r4, #0]
 80039d4:	6054      	str	r4, [r2, #4]
 80039d6:	e7ca      	b.n	800396e <_free_r+0x22>
 80039d8:	bd38      	pop	{r3, r4, r5, pc}
 80039da:	bf00      	nop
 80039dc:	200002ec 	.word	0x200002ec

080039e0 <sbrk_aligned>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	4e0f      	ldr	r6, [pc, #60]	@ (8003a20 <sbrk_aligned+0x40>)
 80039e4:	460c      	mov	r4, r1
 80039e6:	6831      	ldr	r1, [r6, #0]
 80039e8:	4605      	mov	r5, r0
 80039ea:	b911      	cbnz	r1, 80039f2 <sbrk_aligned+0x12>
 80039ec:	f000 fc34 	bl	8004258 <_sbrk_r>
 80039f0:	6030      	str	r0, [r6, #0]
 80039f2:	4621      	mov	r1, r4
 80039f4:	4628      	mov	r0, r5
 80039f6:	f000 fc2f 	bl	8004258 <_sbrk_r>
 80039fa:	1c43      	adds	r3, r0, #1
 80039fc:	d103      	bne.n	8003a06 <sbrk_aligned+0x26>
 80039fe:	f04f 34ff 	mov.w	r4, #4294967295
 8003a02:	4620      	mov	r0, r4
 8003a04:	bd70      	pop	{r4, r5, r6, pc}
 8003a06:	1cc4      	adds	r4, r0, #3
 8003a08:	f024 0403 	bic.w	r4, r4, #3
 8003a0c:	42a0      	cmp	r0, r4
 8003a0e:	d0f8      	beq.n	8003a02 <sbrk_aligned+0x22>
 8003a10:	1a21      	subs	r1, r4, r0
 8003a12:	4628      	mov	r0, r5
 8003a14:	f000 fc20 	bl	8004258 <_sbrk_r>
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1f2      	bne.n	8003a02 <sbrk_aligned+0x22>
 8003a1c:	e7ef      	b.n	80039fe <sbrk_aligned+0x1e>
 8003a1e:	bf00      	nop
 8003a20:	200002e8 	.word	0x200002e8

08003a24 <_malloc_r>:
 8003a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a28:	1ccd      	adds	r5, r1, #3
 8003a2a:	f025 0503 	bic.w	r5, r5, #3
 8003a2e:	3508      	adds	r5, #8
 8003a30:	2d0c      	cmp	r5, #12
 8003a32:	bf38      	it	cc
 8003a34:	250c      	movcc	r5, #12
 8003a36:	2d00      	cmp	r5, #0
 8003a38:	4606      	mov	r6, r0
 8003a3a:	db01      	blt.n	8003a40 <_malloc_r+0x1c>
 8003a3c:	42a9      	cmp	r1, r5
 8003a3e:	d904      	bls.n	8003a4a <_malloc_r+0x26>
 8003a40:	230c      	movs	r3, #12
 8003a42:	6033      	str	r3, [r6, #0]
 8003a44:	2000      	movs	r0, #0
 8003a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b20 <_malloc_r+0xfc>
 8003a4e:	f000 f869 	bl	8003b24 <__malloc_lock>
 8003a52:	f8d8 3000 	ldr.w	r3, [r8]
 8003a56:	461c      	mov	r4, r3
 8003a58:	bb44      	cbnz	r4, 8003aac <_malloc_r+0x88>
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	4630      	mov	r0, r6
 8003a5e:	f7ff ffbf 	bl	80039e0 <sbrk_aligned>
 8003a62:	1c43      	adds	r3, r0, #1
 8003a64:	4604      	mov	r4, r0
 8003a66:	d158      	bne.n	8003b1a <_malloc_r+0xf6>
 8003a68:	f8d8 4000 	ldr.w	r4, [r8]
 8003a6c:	4627      	mov	r7, r4
 8003a6e:	2f00      	cmp	r7, #0
 8003a70:	d143      	bne.n	8003afa <_malloc_r+0xd6>
 8003a72:	2c00      	cmp	r4, #0
 8003a74:	d04b      	beq.n	8003b0e <_malloc_r+0xea>
 8003a76:	6823      	ldr	r3, [r4, #0]
 8003a78:	4639      	mov	r1, r7
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	eb04 0903 	add.w	r9, r4, r3
 8003a80:	f000 fbea 	bl	8004258 <_sbrk_r>
 8003a84:	4581      	cmp	r9, r0
 8003a86:	d142      	bne.n	8003b0e <_malloc_r+0xea>
 8003a88:	6821      	ldr	r1, [r4, #0]
 8003a8a:	1a6d      	subs	r5, r5, r1
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	4630      	mov	r0, r6
 8003a90:	f7ff ffa6 	bl	80039e0 <sbrk_aligned>
 8003a94:	3001      	adds	r0, #1
 8003a96:	d03a      	beq.n	8003b0e <_malloc_r+0xea>
 8003a98:	6823      	ldr	r3, [r4, #0]
 8003a9a:	442b      	add	r3, r5
 8003a9c:	6023      	str	r3, [r4, #0]
 8003a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	bb62      	cbnz	r2, 8003b00 <_malloc_r+0xdc>
 8003aa6:	f8c8 7000 	str.w	r7, [r8]
 8003aaa:	e00f      	b.n	8003acc <_malloc_r+0xa8>
 8003aac:	6822      	ldr	r2, [r4, #0]
 8003aae:	1b52      	subs	r2, r2, r5
 8003ab0:	d420      	bmi.n	8003af4 <_malloc_r+0xd0>
 8003ab2:	2a0b      	cmp	r2, #11
 8003ab4:	d917      	bls.n	8003ae6 <_malloc_r+0xc2>
 8003ab6:	1961      	adds	r1, r4, r5
 8003ab8:	42a3      	cmp	r3, r4
 8003aba:	6025      	str	r5, [r4, #0]
 8003abc:	bf18      	it	ne
 8003abe:	6059      	strne	r1, [r3, #4]
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	bf08      	it	eq
 8003ac4:	f8c8 1000 	streq.w	r1, [r8]
 8003ac8:	5162      	str	r2, [r4, r5]
 8003aca:	604b      	str	r3, [r1, #4]
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 f82f 	bl	8003b30 <__malloc_unlock>
 8003ad2:	f104 000b 	add.w	r0, r4, #11
 8003ad6:	1d23      	adds	r3, r4, #4
 8003ad8:	f020 0007 	bic.w	r0, r0, #7
 8003adc:	1ac2      	subs	r2, r0, r3
 8003ade:	bf1c      	itt	ne
 8003ae0:	1a1b      	subne	r3, r3, r0
 8003ae2:	50a3      	strne	r3, [r4, r2]
 8003ae4:	e7af      	b.n	8003a46 <_malloc_r+0x22>
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	42a3      	cmp	r3, r4
 8003aea:	bf0c      	ite	eq
 8003aec:	f8c8 2000 	streq.w	r2, [r8]
 8003af0:	605a      	strne	r2, [r3, #4]
 8003af2:	e7eb      	b.n	8003acc <_malloc_r+0xa8>
 8003af4:	4623      	mov	r3, r4
 8003af6:	6864      	ldr	r4, [r4, #4]
 8003af8:	e7ae      	b.n	8003a58 <_malloc_r+0x34>
 8003afa:	463c      	mov	r4, r7
 8003afc:	687f      	ldr	r7, [r7, #4]
 8003afe:	e7b6      	b.n	8003a6e <_malloc_r+0x4a>
 8003b00:	461a      	mov	r2, r3
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	d1fb      	bne.n	8003b00 <_malloc_r+0xdc>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6053      	str	r3, [r2, #4]
 8003b0c:	e7de      	b.n	8003acc <_malloc_r+0xa8>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	4630      	mov	r0, r6
 8003b14:	f000 f80c 	bl	8003b30 <__malloc_unlock>
 8003b18:	e794      	b.n	8003a44 <_malloc_r+0x20>
 8003b1a:	6005      	str	r5, [r0, #0]
 8003b1c:	e7d6      	b.n	8003acc <_malloc_r+0xa8>
 8003b1e:	bf00      	nop
 8003b20:	200002ec 	.word	0x200002ec

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	@ (8003b2c <__malloc_lock+0x8>)
 8003b26:	f7ff bf0f 	b.w	8003948 <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	200002e4 	.word	0x200002e4

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	@ (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f7ff bf0a 	b.w	800394a <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	200002e4 	.word	0x200002e4

08003b3c <_sungetc_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	1c4b      	adds	r3, r1, #1
 8003b40:	4614      	mov	r4, r2
 8003b42:	d103      	bne.n	8003b4c <_sungetc_r+0x10>
 8003b44:	f04f 35ff 	mov.w	r5, #4294967295
 8003b48:	4628      	mov	r0, r5
 8003b4a:	bd38      	pop	{r3, r4, r5, pc}
 8003b4c:	8993      	ldrh	r3, [r2, #12]
 8003b4e:	f023 0320 	bic.w	r3, r3, #32
 8003b52:	8193      	strh	r3, [r2, #12]
 8003b54:	6853      	ldr	r3, [r2, #4]
 8003b56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b58:	b2cd      	uxtb	r5, r1
 8003b5a:	b18a      	cbz	r2, 8003b80 <_sungetc_r+0x44>
 8003b5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	dd08      	ble.n	8003b74 <_sungetc_r+0x38>
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	1e5a      	subs	r2, r3, #1
 8003b66:	6022      	str	r2, [r4, #0]
 8003b68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8003b6c:	6863      	ldr	r3, [r4, #4]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	6063      	str	r3, [r4, #4]
 8003b72:	e7e9      	b.n	8003b48 <_sungetc_r+0xc>
 8003b74:	4621      	mov	r1, r4
 8003b76:	f000 fb34 	bl	80041e2 <__submore>
 8003b7a:	2800      	cmp	r0, #0
 8003b7c:	d0f1      	beq.n	8003b62 <_sungetc_r+0x26>
 8003b7e:	e7e1      	b.n	8003b44 <_sungetc_r+0x8>
 8003b80:	6921      	ldr	r1, [r4, #16]
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	b141      	cbz	r1, 8003b98 <_sungetc_r+0x5c>
 8003b86:	4291      	cmp	r1, r2
 8003b88:	d206      	bcs.n	8003b98 <_sungetc_r+0x5c>
 8003b8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8003b8e:	42a9      	cmp	r1, r5
 8003b90:	d102      	bne.n	8003b98 <_sungetc_r+0x5c>
 8003b92:	3a01      	subs	r2, #1
 8003b94:	6022      	str	r2, [r4, #0]
 8003b96:	e7ea      	b.n	8003b6e <_sungetc_r+0x32>
 8003b98:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8003b9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ba0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003bac:	6023      	str	r3, [r4, #0]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e7de      	b.n	8003b70 <_sungetc_r+0x34>

08003bb2 <__ssrefill_r>:
 8003bb2:	b510      	push	{r4, lr}
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003bb8:	b169      	cbz	r1, 8003bd6 <__ssrefill_r+0x24>
 8003bba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bbe:	4299      	cmp	r1, r3
 8003bc0:	d001      	beq.n	8003bc6 <__ssrefill_r+0x14>
 8003bc2:	f7ff fec3 	bl	800394c <_free_r>
 8003bc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	2000      	movs	r0, #0
 8003bcc:	6360      	str	r0, [r4, #52]	@ 0x34
 8003bce:	b113      	cbz	r3, 8003bd6 <__ssrefill_r+0x24>
 8003bd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003bd2:	6023      	str	r3, [r4, #0]
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	6923      	ldr	r3, [r4, #16]
 8003bd8:	6023      	str	r3, [r4, #0]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	6063      	str	r3, [r4, #4]
 8003bde:	89a3      	ldrh	r3, [r4, #12]
 8003be0:	f043 0320 	orr.w	r3, r3, #32
 8003be4:	81a3      	strh	r3, [r4, #12]
 8003be6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bea:	e7f3      	b.n	8003bd4 <__ssrefill_r+0x22>

08003bec <__ssvfiscanf_r>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003bfc:	49a5      	ldr	r1, [pc, #660]	@ (8003e94 <__ssvfiscanf_r+0x2a8>)
 8003bfe:	91a0      	str	r1, [sp, #640]	@ 0x280
 8003c00:	f10d 0804 	add.w	r8, sp, #4
 8003c04:	49a4      	ldr	r1, [pc, #656]	@ (8003e98 <__ssvfiscanf_r+0x2ac>)
 8003c06:	4fa5      	ldr	r7, [pc, #660]	@ (8003e9c <__ssvfiscanf_r+0x2b0>)
 8003c08:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003c0c:	4606      	mov	r6, r0
 8003c0e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	7813      	ldrb	r3, [r2, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8158 	beq.w	8003eca <__ssvfiscanf_r+0x2de>
 8003c1a:	5cf9      	ldrb	r1, [r7, r3]
 8003c1c:	f011 0108 	ands.w	r1, r1, #8
 8003c20:	f102 0501 	add.w	r5, r2, #1
 8003c24:	d019      	beq.n	8003c5a <__ssvfiscanf_r+0x6e>
 8003c26:	6863      	ldr	r3, [r4, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	dd0f      	ble.n	8003c4c <__ssvfiscanf_r+0x60>
 8003c2c:	6823      	ldr	r3, [r4, #0]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	5cba      	ldrb	r2, [r7, r2]
 8003c32:	0712      	lsls	r2, r2, #28
 8003c34:	d401      	bmi.n	8003c3a <__ssvfiscanf_r+0x4e>
 8003c36:	462a      	mov	r2, r5
 8003c38:	e7eb      	b.n	8003c12 <__ssvfiscanf_r+0x26>
 8003c3a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003c3c:	3201      	adds	r2, #1
 8003c3e:	9245      	str	r2, [sp, #276]	@ 0x114
 8003c40:	6862      	ldr	r2, [r4, #4]
 8003c42:	3301      	adds	r3, #1
 8003c44:	3a01      	subs	r2, #1
 8003c46:	6062      	str	r2, [r4, #4]
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	e7ec      	b.n	8003c26 <__ssvfiscanf_r+0x3a>
 8003c4c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003c4e:	4621      	mov	r1, r4
 8003c50:	4630      	mov	r0, r6
 8003c52:	4798      	blx	r3
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d0e9      	beq.n	8003c2c <__ssvfiscanf_r+0x40>
 8003c58:	e7ed      	b.n	8003c36 <__ssvfiscanf_r+0x4a>
 8003c5a:	2b25      	cmp	r3, #37	@ 0x25
 8003c5c:	d012      	beq.n	8003c84 <__ssvfiscanf_r+0x98>
 8003c5e:	4699      	mov	r9, r3
 8003c60:	6863      	ldr	r3, [r4, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f340 8093 	ble.w	8003d8e <__ssvfiscanf_r+0x1a2>
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	7813      	ldrb	r3, [r2, #0]
 8003c6c:	454b      	cmp	r3, r9
 8003c6e:	f040 812c 	bne.w	8003eca <__ssvfiscanf_r+0x2de>
 8003c72:	6863      	ldr	r3, [r4, #4]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8003c7a:	3201      	adds	r2, #1
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	6022      	str	r2, [r4, #0]
 8003c80:	9345      	str	r3, [sp, #276]	@ 0x114
 8003c82:	e7d8      	b.n	8003c36 <__ssvfiscanf_r+0x4a>
 8003c84:	9141      	str	r1, [sp, #260]	@ 0x104
 8003c86:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003c88:	7853      	ldrb	r3, [r2, #1]
 8003c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c8c:	bf02      	ittt	eq
 8003c8e:	2310      	moveq	r3, #16
 8003c90:	1c95      	addeq	r5, r2, #2
 8003c92:	9341      	streq	r3, [sp, #260]	@ 0x104
 8003c94:	220a      	movs	r2, #10
 8003c96:	46a9      	mov	r9, r5
 8003c98:	f819 1b01 	ldrb.w	r1, [r9], #1
 8003c9c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8003ca0:	2b09      	cmp	r3, #9
 8003ca2:	d91e      	bls.n	8003ce2 <__ssvfiscanf_r+0xf6>
 8003ca4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8003ea0 <__ssvfiscanf_r+0x2b4>
 8003ca8:	2203      	movs	r2, #3
 8003caa:	4650      	mov	r0, sl
 8003cac:	f7fc fab8 	bl	8000220 <memchr>
 8003cb0:	b138      	cbz	r0, 8003cc2 <__ssvfiscanf_r+0xd6>
 8003cb2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003cb4:	eba0 000a 	sub.w	r0, r0, sl
 8003cb8:	2301      	movs	r3, #1
 8003cba:	4083      	lsls	r3, r0
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	9341      	str	r3, [sp, #260]	@ 0x104
 8003cc0:	464d      	mov	r5, r9
 8003cc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003cc6:	2b78      	cmp	r3, #120	@ 0x78
 8003cc8:	d806      	bhi.n	8003cd8 <__ssvfiscanf_r+0xec>
 8003cca:	2b57      	cmp	r3, #87	@ 0x57
 8003ccc:	d810      	bhi.n	8003cf0 <__ssvfiscanf_r+0x104>
 8003cce:	2b25      	cmp	r3, #37	@ 0x25
 8003cd0:	d0c5      	beq.n	8003c5e <__ssvfiscanf_r+0x72>
 8003cd2:	d857      	bhi.n	8003d84 <__ssvfiscanf_r+0x198>
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d065      	beq.n	8003da4 <__ssvfiscanf_r+0x1b8>
 8003cd8:	2303      	movs	r3, #3
 8003cda:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003cdc:	230a      	movs	r3, #10
 8003cde:	9342      	str	r3, [sp, #264]	@ 0x108
 8003ce0:	e078      	b.n	8003dd4 <__ssvfiscanf_r+0x1e8>
 8003ce2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003ce4:	fb02 1103 	mla	r1, r2, r3, r1
 8003ce8:	3930      	subs	r1, #48	@ 0x30
 8003cea:	9143      	str	r1, [sp, #268]	@ 0x10c
 8003cec:	464d      	mov	r5, r9
 8003cee:	e7d2      	b.n	8003c96 <__ssvfiscanf_r+0xaa>
 8003cf0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003cf4:	2a20      	cmp	r2, #32
 8003cf6:	d8ef      	bhi.n	8003cd8 <__ssvfiscanf_r+0xec>
 8003cf8:	a101      	add	r1, pc, #4	@ (adr r1, 8003d00 <__ssvfiscanf_r+0x114>)
 8003cfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003db3 	.word	0x08003db3
 8003d04:	08003cd9 	.word	0x08003cd9
 8003d08:	08003cd9 	.word	0x08003cd9
 8003d0c:	08003e0d 	.word	0x08003e0d
 8003d10:	08003cd9 	.word	0x08003cd9
 8003d14:	08003cd9 	.word	0x08003cd9
 8003d18:	08003cd9 	.word	0x08003cd9
 8003d1c:	08003cd9 	.word	0x08003cd9
 8003d20:	08003cd9 	.word	0x08003cd9
 8003d24:	08003cd9 	.word	0x08003cd9
 8003d28:	08003cd9 	.word	0x08003cd9
 8003d2c:	08003e23 	.word	0x08003e23
 8003d30:	08003e09 	.word	0x08003e09
 8003d34:	08003d8b 	.word	0x08003d8b
 8003d38:	08003d8b 	.word	0x08003d8b
 8003d3c:	08003d8b 	.word	0x08003d8b
 8003d40:	08003cd9 	.word	0x08003cd9
 8003d44:	08003dc5 	.word	0x08003dc5
 8003d48:	08003cd9 	.word	0x08003cd9
 8003d4c:	08003cd9 	.word	0x08003cd9
 8003d50:	08003cd9 	.word	0x08003cd9
 8003d54:	08003cd9 	.word	0x08003cd9
 8003d58:	08003e33 	.word	0x08003e33
 8003d5c:	08003dcd 	.word	0x08003dcd
 8003d60:	08003dab 	.word	0x08003dab
 8003d64:	08003cd9 	.word	0x08003cd9
 8003d68:	08003cd9 	.word	0x08003cd9
 8003d6c:	08003e2f 	.word	0x08003e2f
 8003d70:	08003cd9 	.word	0x08003cd9
 8003d74:	08003e09 	.word	0x08003e09
 8003d78:	08003cd9 	.word	0x08003cd9
 8003d7c:	08003cd9 	.word	0x08003cd9
 8003d80:	08003db3 	.word	0x08003db3
 8003d84:	3b45      	subs	r3, #69	@ 0x45
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d8a6      	bhi.n	8003cd8 <__ssvfiscanf_r+0xec>
 8003d8a:	2305      	movs	r3, #5
 8003d8c:	e021      	b.n	8003dd2 <__ssvfiscanf_r+0x1e6>
 8003d8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003d90:	4621      	mov	r1, r4
 8003d92:	4630      	mov	r0, r6
 8003d94:	4798      	blx	r3
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f43f af66 	beq.w	8003c68 <__ssvfiscanf_r+0x7c>
 8003d9c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f040 808b 	bne.w	8003eba <__ssvfiscanf_r+0x2ce>
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	e08b      	b.n	8003ec2 <__ssvfiscanf_r+0x2d6>
 8003daa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003dac:	f042 0220 	orr.w	r2, r2, #32
 8003db0:	9241      	str	r2, [sp, #260]	@ 0x104
 8003db2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db8:	9241      	str	r2, [sp, #260]	@ 0x104
 8003dba:	2210      	movs	r2, #16
 8003dbc:	2b6e      	cmp	r3, #110	@ 0x6e
 8003dbe:	9242      	str	r2, [sp, #264]	@ 0x108
 8003dc0:	d902      	bls.n	8003dc8 <__ssvfiscanf_r+0x1dc>
 8003dc2:	e005      	b.n	8003dd0 <__ssvfiscanf_r+0x1e4>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9342      	str	r3, [sp, #264]	@ 0x108
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e002      	b.n	8003dd2 <__ssvfiscanf_r+0x1e6>
 8003dcc:	2308      	movs	r3, #8
 8003dce:	9342      	str	r3, [sp, #264]	@ 0x108
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003dd4:	6863      	ldr	r3, [r4, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	dd39      	ble.n	8003e4e <__ssvfiscanf_r+0x262>
 8003dda:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003ddc:	0659      	lsls	r1, r3, #25
 8003dde:	d404      	bmi.n	8003dea <__ssvfiscanf_r+0x1fe>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	781a      	ldrb	r2, [r3, #0]
 8003de4:	5cba      	ldrb	r2, [r7, r2]
 8003de6:	0712      	lsls	r2, r2, #28
 8003de8:	d438      	bmi.n	8003e5c <__ssvfiscanf_r+0x270>
 8003dea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	dc47      	bgt.n	8003e80 <__ssvfiscanf_r+0x294>
 8003df0:	466b      	mov	r3, sp
 8003df2:	4622      	mov	r2, r4
 8003df4:	a941      	add	r1, sp, #260	@ 0x104
 8003df6:	4630      	mov	r0, r6
 8003df8:	f000 f86c 	bl	8003ed4 <_scanf_chars>
 8003dfc:	2801      	cmp	r0, #1
 8003dfe:	d064      	beq.n	8003eca <__ssvfiscanf_r+0x2de>
 8003e00:	2802      	cmp	r0, #2
 8003e02:	f47f af18 	bne.w	8003c36 <__ssvfiscanf_r+0x4a>
 8003e06:	e7c9      	b.n	8003d9c <__ssvfiscanf_r+0x1b0>
 8003e08:	220a      	movs	r2, #10
 8003e0a:	e7d7      	b.n	8003dbc <__ssvfiscanf_r+0x1d0>
 8003e0c:	4629      	mov	r1, r5
 8003e0e:	4640      	mov	r0, r8
 8003e10:	f000 f9ae 	bl	8004170 <__sccl>
 8003e14:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e1a:	9341      	str	r3, [sp, #260]	@ 0x104
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e7d7      	b.n	8003dd2 <__ssvfiscanf_r+0x1e6>
 8003e22:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003e24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e28:	9341      	str	r3, [sp, #260]	@ 0x104
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e7d1      	b.n	8003dd2 <__ssvfiscanf_r+0x1e6>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e7cf      	b.n	8003dd2 <__ssvfiscanf_r+0x1e6>
 8003e32:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003e34:	06c3      	lsls	r3, r0, #27
 8003e36:	f53f aefe 	bmi.w	8003c36 <__ssvfiscanf_r+0x4a>
 8003e3a:	9b00      	ldr	r3, [sp, #0]
 8003e3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003e3e:	1d19      	adds	r1, r3, #4
 8003e40:	9100      	str	r1, [sp, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	07c0      	lsls	r0, r0, #31
 8003e46:	bf4c      	ite	mi
 8003e48:	801a      	strhmi	r2, [r3, #0]
 8003e4a:	601a      	strpl	r2, [r3, #0]
 8003e4c:	e6f3      	b.n	8003c36 <__ssvfiscanf_r+0x4a>
 8003e4e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003e50:	4621      	mov	r1, r4
 8003e52:	4630      	mov	r0, r6
 8003e54:	4798      	blx	r3
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d0bf      	beq.n	8003dda <__ssvfiscanf_r+0x1ee>
 8003e5a:	e79f      	b.n	8003d9c <__ssvfiscanf_r+0x1b0>
 8003e5c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8003e5e:	3201      	adds	r2, #1
 8003e60:	9245      	str	r2, [sp, #276]	@ 0x114
 8003e62:	6862      	ldr	r2, [r4, #4]
 8003e64:	3a01      	subs	r2, #1
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	6062      	str	r2, [r4, #4]
 8003e6a:	dd02      	ble.n	8003e72 <__ssvfiscanf_r+0x286>
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	e7b6      	b.n	8003de0 <__ssvfiscanf_r+0x1f4>
 8003e72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8003e74:	4621      	mov	r1, r4
 8003e76:	4630      	mov	r0, r6
 8003e78:	4798      	blx	r3
 8003e7a:	2800      	cmp	r0, #0
 8003e7c:	d0b0      	beq.n	8003de0 <__ssvfiscanf_r+0x1f4>
 8003e7e:	e78d      	b.n	8003d9c <__ssvfiscanf_r+0x1b0>
 8003e80:	2b04      	cmp	r3, #4
 8003e82:	dc0f      	bgt.n	8003ea4 <__ssvfiscanf_r+0x2b8>
 8003e84:	466b      	mov	r3, sp
 8003e86:	4622      	mov	r2, r4
 8003e88:	a941      	add	r1, sp, #260	@ 0x104
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	f000 f87c 	bl	8003f88 <_scanf_i>
 8003e90:	e7b4      	b.n	8003dfc <__ssvfiscanf_r+0x210>
 8003e92:	bf00      	nop
 8003e94:	08003b3d 	.word	0x08003b3d
 8003e98:	08003bb3 	.word	0x08003bb3
 8003e9c:	08004540 	.word	0x08004540
 8003ea0:	08004520 	.word	0x08004520
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <__ssvfiscanf_r+0x2e4>)
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f43f aec5 	beq.w	8003c36 <__ssvfiscanf_r+0x4a>
 8003eac:	466b      	mov	r3, sp
 8003eae:	4622      	mov	r2, r4
 8003eb0:	a941      	add	r1, sp, #260	@ 0x104
 8003eb2:	4630      	mov	r0, r6
 8003eb4:	f3af 8000 	nop.w
 8003eb8:	e7a0      	b.n	8003dfc <__ssvfiscanf_r+0x210>
 8003eba:	89a3      	ldrh	r3, [r4, #12]
 8003ebc:	065b      	lsls	r3, r3, #25
 8003ebe:	f53f af71 	bmi.w	8003da4 <__ssvfiscanf_r+0x1b8>
 8003ec2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8003ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8003ecc:	e7f9      	b.n	8003ec2 <__ssvfiscanf_r+0x2d6>
 8003ece:	bf00      	nop
 8003ed0:	00000000 	.word	0x00000000

08003ed4 <_scanf_chars>:
 8003ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ed8:	4615      	mov	r5, r2
 8003eda:	688a      	ldr	r2, [r1, #8]
 8003edc:	4680      	mov	r8, r0
 8003ede:	460c      	mov	r4, r1
 8003ee0:	b932      	cbnz	r2, 8003ef0 <_scanf_chars+0x1c>
 8003ee2:	698a      	ldr	r2, [r1, #24]
 8003ee4:	2a00      	cmp	r2, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	f04f 32ff 	movne.w	r2, #4294967295
 8003eec:	2201      	moveq	r2, #1
 8003eee:	608a      	str	r2, [r1, #8]
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8003f84 <_scanf_chars+0xb0>
 8003ef6:	06d1      	lsls	r1, r2, #27
 8003ef8:	bf5f      	itttt	pl
 8003efa:	681a      	ldrpl	r2, [r3, #0]
 8003efc:	1d11      	addpl	r1, r2, #4
 8003efe:	6019      	strpl	r1, [r3, #0]
 8003f00:	6816      	ldrpl	r6, [r2, #0]
 8003f02:	2700      	movs	r7, #0
 8003f04:	69a0      	ldr	r0, [r4, #24]
 8003f06:	b188      	cbz	r0, 8003f2c <_scanf_chars+0x58>
 8003f08:	2801      	cmp	r0, #1
 8003f0a:	d107      	bne.n	8003f1c <_scanf_chars+0x48>
 8003f0c:	682b      	ldr	r3, [r5, #0]
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	6963      	ldr	r3, [r4, #20]
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	b953      	cbnz	r3, 8003f2c <_scanf_chars+0x58>
 8003f16:	2f00      	cmp	r7, #0
 8003f18:	d031      	beq.n	8003f7e <_scanf_chars+0xaa>
 8003f1a:	e022      	b.n	8003f62 <_scanf_chars+0x8e>
 8003f1c:	2802      	cmp	r0, #2
 8003f1e:	d120      	bne.n	8003f62 <_scanf_chars+0x8e>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003f28:	071b      	lsls	r3, r3, #28
 8003f2a:	d41a      	bmi.n	8003f62 <_scanf_chars+0x8e>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	06da      	lsls	r2, r3, #27
 8003f30:	bf5e      	ittt	pl
 8003f32:	682b      	ldrpl	r3, [r5, #0]
 8003f34:	781b      	ldrbpl	r3, [r3, #0]
 8003f36:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003f3a:	682a      	ldr	r2, [r5, #0]
 8003f3c:	686b      	ldr	r3, [r5, #4]
 8003f3e:	3201      	adds	r2, #1
 8003f40:	602a      	str	r2, [r5, #0]
 8003f42:	68a2      	ldr	r2, [r4, #8]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	3a01      	subs	r2, #1
 8003f48:	606b      	str	r3, [r5, #4]
 8003f4a:	3701      	adds	r7, #1
 8003f4c:	60a2      	str	r2, [r4, #8]
 8003f4e:	b142      	cbz	r2, 8003f62 <_scanf_chars+0x8e>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dcd7      	bgt.n	8003f04 <_scanf_chars+0x30>
 8003f54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003f58:	4629      	mov	r1, r5
 8003f5a:	4640      	mov	r0, r8
 8003f5c:	4798      	blx	r3
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d0d0      	beq.n	8003f04 <_scanf_chars+0x30>
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	f013 0310 	ands.w	r3, r3, #16
 8003f68:	d105      	bne.n	8003f76 <_scanf_chars+0xa2>
 8003f6a:	68e2      	ldr	r2, [r4, #12]
 8003f6c:	3201      	adds	r2, #1
 8003f6e:	60e2      	str	r2, [r4, #12]
 8003f70:	69a2      	ldr	r2, [r4, #24]
 8003f72:	b102      	cbz	r2, 8003f76 <_scanf_chars+0xa2>
 8003f74:	7033      	strb	r3, [r6, #0]
 8003f76:	6923      	ldr	r3, [r4, #16]
 8003f78:	443b      	add	r3, r7
 8003f7a:	6123      	str	r3, [r4, #16]
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f82:	bf00      	nop
 8003f84:	08004540 	.word	0x08004540

08003f88 <_scanf_i>:
 8003f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f8c:	4698      	mov	r8, r3
 8003f8e:	4b74      	ldr	r3, [pc, #464]	@ (8004160 <_scanf_i+0x1d8>)
 8003f90:	460c      	mov	r4, r1
 8003f92:	4682      	mov	sl, r0
 8003f94:	4616      	mov	r6, r2
 8003f96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	ab03      	add	r3, sp, #12
 8003f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003fa2:	4b70      	ldr	r3, [pc, #448]	@ (8004164 <_scanf_i+0x1dc>)
 8003fa4:	69a1      	ldr	r1, [r4, #24]
 8003fa6:	4a70      	ldr	r2, [pc, #448]	@ (8004168 <_scanf_i+0x1e0>)
 8003fa8:	2903      	cmp	r1, #3
 8003faa:	bf08      	it	eq
 8003fac:	461a      	moveq	r2, r3
 8003fae:	68a3      	ldr	r3, [r4, #8]
 8003fb0:	9201      	str	r2, [sp, #4]
 8003fb2:	1e5a      	subs	r2, r3, #1
 8003fb4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003fb8:	bf88      	it	hi
 8003fba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003fbe:	4627      	mov	r7, r4
 8003fc0:	bf82      	ittt	hi
 8003fc2:	eb03 0905 	addhi.w	r9, r3, r5
 8003fc6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003fca:	60a3      	strhi	r3, [r4, #8]
 8003fcc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003fd0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003fd4:	bf98      	it	ls
 8003fd6:	f04f 0900 	movls.w	r9, #0
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	463d      	mov	r5, r7
 8003fde:	f04f 0b00 	mov.w	fp, #0
 8003fe2:	6831      	ldr	r1, [r6, #0]
 8003fe4:	ab03      	add	r3, sp, #12
 8003fe6:	7809      	ldrb	r1, [r1, #0]
 8003fe8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f7fc f917 	bl	8000220 <memchr>
 8003ff2:	b328      	cbz	r0, 8004040 <_scanf_i+0xb8>
 8003ff4:	f1bb 0f01 	cmp.w	fp, #1
 8003ff8:	d159      	bne.n	80040ae <_scanf_i+0x126>
 8003ffa:	6862      	ldr	r2, [r4, #4]
 8003ffc:	b92a      	cbnz	r2, 800400a <_scanf_i+0x82>
 8003ffe:	6822      	ldr	r2, [r4, #0]
 8004000:	2108      	movs	r1, #8
 8004002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004006:	6061      	str	r1, [r4, #4]
 8004008:	6022      	str	r2, [r4, #0]
 800400a:	6822      	ldr	r2, [r4, #0]
 800400c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8004010:	6022      	str	r2, [r4, #0]
 8004012:	68a2      	ldr	r2, [r4, #8]
 8004014:	1e51      	subs	r1, r2, #1
 8004016:	60a1      	str	r1, [r4, #8]
 8004018:	b192      	cbz	r2, 8004040 <_scanf_i+0xb8>
 800401a:	6832      	ldr	r2, [r6, #0]
 800401c:	1c51      	adds	r1, r2, #1
 800401e:	6031      	str	r1, [r6, #0]
 8004020:	7812      	ldrb	r2, [r2, #0]
 8004022:	f805 2b01 	strb.w	r2, [r5], #1
 8004026:	6872      	ldr	r2, [r6, #4]
 8004028:	3a01      	subs	r2, #1
 800402a:	2a00      	cmp	r2, #0
 800402c:	6072      	str	r2, [r6, #4]
 800402e:	dc07      	bgt.n	8004040 <_scanf_i+0xb8>
 8004030:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8004034:	4631      	mov	r1, r6
 8004036:	4650      	mov	r0, sl
 8004038:	4790      	blx	r2
 800403a:	2800      	cmp	r0, #0
 800403c:	f040 8085 	bne.w	800414a <_scanf_i+0x1c2>
 8004040:	f10b 0b01 	add.w	fp, fp, #1
 8004044:	f1bb 0f03 	cmp.w	fp, #3
 8004048:	d1cb      	bne.n	8003fe2 <_scanf_i+0x5a>
 800404a:	6863      	ldr	r3, [r4, #4]
 800404c:	b90b      	cbnz	r3, 8004052 <_scanf_i+0xca>
 800404e:	230a      	movs	r3, #10
 8004050:	6063      	str	r3, [r4, #4]
 8004052:	6863      	ldr	r3, [r4, #4]
 8004054:	4945      	ldr	r1, [pc, #276]	@ (800416c <_scanf_i+0x1e4>)
 8004056:	6960      	ldr	r0, [r4, #20]
 8004058:	1ac9      	subs	r1, r1, r3
 800405a:	f000 f889 	bl	8004170 <__sccl>
 800405e:	f04f 0b00 	mov.w	fp, #0
 8004062:	68a3      	ldr	r3, [r4, #8]
 8004064:	6822      	ldr	r2, [r4, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d03d      	beq.n	80040e6 <_scanf_i+0x15e>
 800406a:	6831      	ldr	r1, [r6, #0]
 800406c:	6960      	ldr	r0, [r4, #20]
 800406e:	f891 c000 	ldrb.w	ip, [r1]
 8004072:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004076:	2800      	cmp	r0, #0
 8004078:	d035      	beq.n	80040e6 <_scanf_i+0x15e>
 800407a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800407e:	d124      	bne.n	80040ca <_scanf_i+0x142>
 8004080:	0510      	lsls	r0, r2, #20
 8004082:	d522      	bpl.n	80040ca <_scanf_i+0x142>
 8004084:	f10b 0b01 	add.w	fp, fp, #1
 8004088:	f1b9 0f00 	cmp.w	r9, #0
 800408c:	d003      	beq.n	8004096 <_scanf_i+0x10e>
 800408e:	3301      	adds	r3, #1
 8004090:	f109 39ff 	add.w	r9, r9, #4294967295
 8004094:	60a3      	str	r3, [r4, #8]
 8004096:	6873      	ldr	r3, [r6, #4]
 8004098:	3b01      	subs	r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	6073      	str	r3, [r6, #4]
 800409e:	dd1b      	ble.n	80040d8 <_scanf_i+0x150>
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	3301      	adds	r3, #1
 80040a4:	6033      	str	r3, [r6, #0]
 80040a6:	68a3      	ldr	r3, [r4, #8]
 80040a8:	3b01      	subs	r3, #1
 80040aa:	60a3      	str	r3, [r4, #8]
 80040ac:	e7d9      	b.n	8004062 <_scanf_i+0xda>
 80040ae:	f1bb 0f02 	cmp.w	fp, #2
 80040b2:	d1ae      	bne.n	8004012 <_scanf_i+0x8a>
 80040b4:	6822      	ldr	r2, [r4, #0]
 80040b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80040ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80040be:	d1bf      	bne.n	8004040 <_scanf_i+0xb8>
 80040c0:	2110      	movs	r1, #16
 80040c2:	6061      	str	r1, [r4, #4]
 80040c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040c8:	e7a2      	b.n	8004010 <_scanf_i+0x88>
 80040ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80040ce:	6022      	str	r2, [r4, #0]
 80040d0:	780b      	ldrb	r3, [r1, #0]
 80040d2:	f805 3b01 	strb.w	r3, [r5], #1
 80040d6:	e7de      	b.n	8004096 <_scanf_i+0x10e>
 80040d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80040dc:	4631      	mov	r1, r6
 80040de:	4650      	mov	r0, sl
 80040e0:	4798      	blx	r3
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d0df      	beq.n	80040a6 <_scanf_i+0x11e>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	05d9      	lsls	r1, r3, #23
 80040ea:	d50d      	bpl.n	8004108 <_scanf_i+0x180>
 80040ec:	42bd      	cmp	r5, r7
 80040ee:	d909      	bls.n	8004104 <_scanf_i+0x17c>
 80040f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80040f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80040f8:	4632      	mov	r2, r6
 80040fa:	4650      	mov	r0, sl
 80040fc:	4798      	blx	r3
 80040fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8004102:	464d      	mov	r5, r9
 8004104:	42bd      	cmp	r5, r7
 8004106:	d028      	beq.n	800415a <_scanf_i+0x1d2>
 8004108:	6822      	ldr	r2, [r4, #0]
 800410a:	f012 0210 	ands.w	r2, r2, #16
 800410e:	d113      	bne.n	8004138 <_scanf_i+0x1b0>
 8004110:	702a      	strb	r2, [r5, #0]
 8004112:	6863      	ldr	r3, [r4, #4]
 8004114:	9e01      	ldr	r6, [sp, #4]
 8004116:	4639      	mov	r1, r7
 8004118:	4650      	mov	r0, sl
 800411a:	47b0      	blx	r6
 800411c:	f8d8 3000 	ldr.w	r3, [r8]
 8004120:	6821      	ldr	r1, [r4, #0]
 8004122:	1d1a      	adds	r2, r3, #4
 8004124:	f8c8 2000 	str.w	r2, [r8]
 8004128:	f011 0f20 	tst.w	r1, #32
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	d00f      	beq.n	8004150 <_scanf_i+0x1c8>
 8004130:	6018      	str	r0, [r3, #0]
 8004132:	68e3      	ldr	r3, [r4, #12]
 8004134:	3301      	adds	r3, #1
 8004136:	60e3      	str	r3, [r4, #12]
 8004138:	6923      	ldr	r3, [r4, #16]
 800413a:	1bed      	subs	r5, r5, r7
 800413c:	445d      	add	r5, fp
 800413e:	442b      	add	r3, r5
 8004140:	6123      	str	r3, [r4, #16]
 8004142:	2000      	movs	r0, #0
 8004144:	b007      	add	sp, #28
 8004146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414a:	f04f 0b00 	mov.w	fp, #0
 800414e:	e7ca      	b.n	80040e6 <_scanf_i+0x15e>
 8004150:	07ca      	lsls	r2, r1, #31
 8004152:	bf4c      	ite	mi
 8004154:	8018      	strhmi	r0, [r3, #0]
 8004156:	6018      	strpl	r0, [r3, #0]
 8004158:	e7eb      	b.n	8004132 <_scanf_i+0x1aa>
 800415a:	2001      	movs	r0, #1
 800415c:	e7f2      	b.n	8004144 <_scanf_i+0x1bc>
 800415e:	bf00      	nop
 8004160:	080044fc 	.word	0x080044fc
 8004164:	080043e5 	.word	0x080043e5
 8004168:	080044c5 	.word	0x080044c5
 800416c:	08004534 	.word	0x08004534

08004170 <__sccl>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	780b      	ldrb	r3, [r1, #0]
 8004174:	4604      	mov	r4, r0
 8004176:	2b5e      	cmp	r3, #94	@ 0x5e
 8004178:	bf0b      	itete	eq
 800417a:	784b      	ldrbeq	r3, [r1, #1]
 800417c:	1c4a      	addne	r2, r1, #1
 800417e:	1c8a      	addeq	r2, r1, #2
 8004180:	2100      	movne	r1, #0
 8004182:	bf08      	it	eq
 8004184:	2101      	moveq	r1, #1
 8004186:	3801      	subs	r0, #1
 8004188:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800418c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004190:	42a8      	cmp	r0, r5
 8004192:	d1fb      	bne.n	800418c <__sccl+0x1c>
 8004194:	b90b      	cbnz	r3, 800419a <__sccl+0x2a>
 8004196:	1e50      	subs	r0, r2, #1
 8004198:	bd70      	pop	{r4, r5, r6, pc}
 800419a:	f081 0101 	eor.w	r1, r1, #1
 800419e:	54e1      	strb	r1, [r4, r3]
 80041a0:	4610      	mov	r0, r2
 80041a2:	4602      	mov	r2, r0
 80041a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80041a8:	2d2d      	cmp	r5, #45	@ 0x2d
 80041aa:	d005      	beq.n	80041b8 <__sccl+0x48>
 80041ac:	2d5d      	cmp	r5, #93	@ 0x5d
 80041ae:	d016      	beq.n	80041de <__sccl+0x6e>
 80041b0:	2d00      	cmp	r5, #0
 80041b2:	d0f1      	beq.n	8004198 <__sccl+0x28>
 80041b4:	462b      	mov	r3, r5
 80041b6:	e7f2      	b.n	800419e <__sccl+0x2e>
 80041b8:	7846      	ldrb	r6, [r0, #1]
 80041ba:	2e5d      	cmp	r6, #93	@ 0x5d
 80041bc:	d0fa      	beq.n	80041b4 <__sccl+0x44>
 80041be:	42b3      	cmp	r3, r6
 80041c0:	dcf8      	bgt.n	80041b4 <__sccl+0x44>
 80041c2:	3002      	adds	r0, #2
 80041c4:	461a      	mov	r2, r3
 80041c6:	3201      	adds	r2, #1
 80041c8:	4296      	cmp	r6, r2
 80041ca:	54a1      	strb	r1, [r4, r2]
 80041cc:	dcfb      	bgt.n	80041c6 <__sccl+0x56>
 80041ce:	1af2      	subs	r2, r6, r3
 80041d0:	3a01      	subs	r2, #1
 80041d2:	1c5d      	adds	r5, r3, #1
 80041d4:	42b3      	cmp	r3, r6
 80041d6:	bfa8      	it	ge
 80041d8:	2200      	movge	r2, #0
 80041da:	18ab      	adds	r3, r5, r2
 80041dc:	e7e1      	b.n	80041a2 <__sccl+0x32>
 80041de:	4610      	mov	r0, r2
 80041e0:	e7da      	b.n	8004198 <__sccl+0x28>

080041e2 <__submore>:
 80041e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041e6:	460c      	mov	r4, r1
 80041e8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80041ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80041ee:	4299      	cmp	r1, r3
 80041f0:	d11d      	bne.n	800422e <__submore+0x4c>
 80041f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041f6:	f7ff fc15 	bl	8003a24 <_malloc_r>
 80041fa:	b918      	cbnz	r0, 8004204 <__submore+0x22>
 80041fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004204:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004208:	63a3      	str	r3, [r4, #56]	@ 0x38
 800420a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800420e:	6360      	str	r0, [r4, #52]	@ 0x34
 8004210:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004214:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004218:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800421c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004220:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004224:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004228:	6020      	str	r0, [r4, #0]
 800422a:	2000      	movs	r0, #0
 800422c:	e7e8      	b.n	8004200 <__submore+0x1e>
 800422e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004230:	0077      	lsls	r7, r6, #1
 8004232:	463a      	mov	r2, r7
 8004234:	f000 f82e 	bl	8004294 <_realloc_r>
 8004238:	4605      	mov	r5, r0
 800423a:	2800      	cmp	r0, #0
 800423c:	d0de      	beq.n	80041fc <__submore+0x1a>
 800423e:	eb00 0806 	add.w	r8, r0, r6
 8004242:	4601      	mov	r1, r0
 8004244:	4632      	mov	r2, r6
 8004246:	4640      	mov	r0, r8
 8004248:	f000 f816 	bl	8004278 <memcpy>
 800424c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004250:	f8c4 8000 	str.w	r8, [r4]
 8004254:	e7e9      	b.n	800422a <__submore+0x48>
	...

08004258 <_sbrk_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d06      	ldr	r5, [pc, #24]	@ (8004274 <_sbrk_r+0x1c>)
 800425c:	2300      	movs	r3, #0
 800425e:	4604      	mov	r4, r0
 8004260:	4608      	mov	r0, r1
 8004262:	602b      	str	r3, [r5, #0]
 8004264:	f7fc fc08 	bl	8000a78 <_sbrk>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d102      	bne.n	8004272 <_sbrk_r+0x1a>
 800426c:	682b      	ldr	r3, [r5, #0]
 800426e:	b103      	cbz	r3, 8004272 <_sbrk_r+0x1a>
 8004270:	6023      	str	r3, [r4, #0]
 8004272:	bd38      	pop	{r3, r4, r5, pc}
 8004274:	200002e0 	.word	0x200002e0

08004278 <memcpy>:
 8004278:	440a      	add	r2, r1
 800427a:	4291      	cmp	r1, r2
 800427c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004280:	d100      	bne.n	8004284 <memcpy+0xc>
 8004282:	4770      	bx	lr
 8004284:	b510      	push	{r4, lr}
 8004286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800428a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800428e:	4291      	cmp	r1, r2
 8004290:	d1f9      	bne.n	8004286 <memcpy+0xe>
 8004292:	bd10      	pop	{r4, pc}

08004294 <_realloc_r>:
 8004294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004298:	4680      	mov	r8, r0
 800429a:	4615      	mov	r5, r2
 800429c:	460c      	mov	r4, r1
 800429e:	b921      	cbnz	r1, 80042aa <_realloc_r+0x16>
 80042a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042a4:	4611      	mov	r1, r2
 80042a6:	f7ff bbbd 	b.w	8003a24 <_malloc_r>
 80042aa:	b92a      	cbnz	r2, 80042b8 <_realloc_r+0x24>
 80042ac:	f7ff fb4e 	bl	800394c <_free_r>
 80042b0:	2400      	movs	r4, #0
 80042b2:	4620      	mov	r0, r4
 80042b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b8:	f000 f906 	bl	80044c8 <_malloc_usable_size_r>
 80042bc:	4285      	cmp	r5, r0
 80042be:	4606      	mov	r6, r0
 80042c0:	d802      	bhi.n	80042c8 <_realloc_r+0x34>
 80042c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042c6:	d8f4      	bhi.n	80042b2 <_realloc_r+0x1e>
 80042c8:	4629      	mov	r1, r5
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7ff fbaa 	bl	8003a24 <_malloc_r>
 80042d0:	4607      	mov	r7, r0
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d0ec      	beq.n	80042b0 <_realloc_r+0x1c>
 80042d6:	42b5      	cmp	r5, r6
 80042d8:	462a      	mov	r2, r5
 80042da:	4621      	mov	r1, r4
 80042dc:	bf28      	it	cs
 80042de:	4632      	movcs	r2, r6
 80042e0:	f7ff ffca 	bl	8004278 <memcpy>
 80042e4:	4621      	mov	r1, r4
 80042e6:	4640      	mov	r0, r8
 80042e8:	f7ff fb30 	bl	800394c <_free_r>
 80042ec:	463c      	mov	r4, r7
 80042ee:	e7e0      	b.n	80042b2 <_realloc_r+0x1e>

080042f0 <_strtol_l.constprop.0>:
 80042f0:	2b24      	cmp	r3, #36	@ 0x24
 80042f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f6:	4686      	mov	lr, r0
 80042f8:	4690      	mov	r8, r2
 80042fa:	d801      	bhi.n	8004300 <_strtol_l.constprop.0+0x10>
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d106      	bne.n	800430e <_strtol_l.constprop.0+0x1e>
 8004300:	f7ff faf8 	bl	80038f4 <__errno>
 8004304:	2316      	movs	r3, #22
 8004306:	6003      	str	r3, [r0, #0]
 8004308:	2000      	movs	r0, #0
 800430a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430e:	4834      	ldr	r0, [pc, #208]	@ (80043e0 <_strtol_l.constprop.0+0xf0>)
 8004310:	460d      	mov	r5, r1
 8004312:	462a      	mov	r2, r5
 8004314:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004318:	5d06      	ldrb	r6, [r0, r4]
 800431a:	f016 0608 	ands.w	r6, r6, #8
 800431e:	d1f8      	bne.n	8004312 <_strtol_l.constprop.0+0x22>
 8004320:	2c2d      	cmp	r4, #45	@ 0x2d
 8004322:	d12d      	bne.n	8004380 <_strtol_l.constprop.0+0x90>
 8004324:	782c      	ldrb	r4, [r5, #0]
 8004326:	2601      	movs	r6, #1
 8004328:	1c95      	adds	r5, r2, #2
 800432a:	f033 0210 	bics.w	r2, r3, #16
 800432e:	d109      	bne.n	8004344 <_strtol_l.constprop.0+0x54>
 8004330:	2c30      	cmp	r4, #48	@ 0x30
 8004332:	d12a      	bne.n	800438a <_strtol_l.constprop.0+0x9a>
 8004334:	782a      	ldrb	r2, [r5, #0]
 8004336:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800433a:	2a58      	cmp	r2, #88	@ 0x58
 800433c:	d125      	bne.n	800438a <_strtol_l.constprop.0+0x9a>
 800433e:	786c      	ldrb	r4, [r5, #1]
 8004340:	2310      	movs	r3, #16
 8004342:	3502      	adds	r5, #2
 8004344:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004348:	f10c 3cff 	add.w	ip, ip, #4294967295
 800434c:	2200      	movs	r2, #0
 800434e:	fbbc f9f3 	udiv	r9, ip, r3
 8004352:	4610      	mov	r0, r2
 8004354:	fb03 ca19 	mls	sl, r3, r9, ip
 8004358:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800435c:	2f09      	cmp	r7, #9
 800435e:	d81b      	bhi.n	8004398 <_strtol_l.constprop.0+0xa8>
 8004360:	463c      	mov	r4, r7
 8004362:	42a3      	cmp	r3, r4
 8004364:	dd27      	ble.n	80043b6 <_strtol_l.constprop.0+0xc6>
 8004366:	1c57      	adds	r7, r2, #1
 8004368:	d007      	beq.n	800437a <_strtol_l.constprop.0+0x8a>
 800436a:	4581      	cmp	r9, r0
 800436c:	d320      	bcc.n	80043b0 <_strtol_l.constprop.0+0xc0>
 800436e:	d101      	bne.n	8004374 <_strtol_l.constprop.0+0x84>
 8004370:	45a2      	cmp	sl, r4
 8004372:	db1d      	blt.n	80043b0 <_strtol_l.constprop.0+0xc0>
 8004374:	fb00 4003 	mla	r0, r0, r3, r4
 8004378:	2201      	movs	r2, #1
 800437a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800437e:	e7eb      	b.n	8004358 <_strtol_l.constprop.0+0x68>
 8004380:	2c2b      	cmp	r4, #43	@ 0x2b
 8004382:	bf04      	itt	eq
 8004384:	782c      	ldrbeq	r4, [r5, #0]
 8004386:	1c95      	addeq	r5, r2, #2
 8004388:	e7cf      	b.n	800432a <_strtol_l.constprop.0+0x3a>
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1da      	bne.n	8004344 <_strtol_l.constprop.0+0x54>
 800438e:	2c30      	cmp	r4, #48	@ 0x30
 8004390:	bf0c      	ite	eq
 8004392:	2308      	moveq	r3, #8
 8004394:	230a      	movne	r3, #10
 8004396:	e7d5      	b.n	8004344 <_strtol_l.constprop.0+0x54>
 8004398:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800439c:	2f19      	cmp	r7, #25
 800439e:	d801      	bhi.n	80043a4 <_strtol_l.constprop.0+0xb4>
 80043a0:	3c37      	subs	r4, #55	@ 0x37
 80043a2:	e7de      	b.n	8004362 <_strtol_l.constprop.0+0x72>
 80043a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80043a8:	2f19      	cmp	r7, #25
 80043aa:	d804      	bhi.n	80043b6 <_strtol_l.constprop.0+0xc6>
 80043ac:	3c57      	subs	r4, #87	@ 0x57
 80043ae:	e7d8      	b.n	8004362 <_strtol_l.constprop.0+0x72>
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	e7e1      	b.n	800437a <_strtol_l.constprop.0+0x8a>
 80043b6:	1c53      	adds	r3, r2, #1
 80043b8:	d108      	bne.n	80043cc <_strtol_l.constprop.0+0xdc>
 80043ba:	2322      	movs	r3, #34	@ 0x22
 80043bc:	f8ce 3000 	str.w	r3, [lr]
 80043c0:	4660      	mov	r0, ip
 80043c2:	f1b8 0f00 	cmp.w	r8, #0
 80043c6:	d0a0      	beq.n	800430a <_strtol_l.constprop.0+0x1a>
 80043c8:	1e69      	subs	r1, r5, #1
 80043ca:	e006      	b.n	80043da <_strtol_l.constprop.0+0xea>
 80043cc:	b106      	cbz	r6, 80043d0 <_strtol_l.constprop.0+0xe0>
 80043ce:	4240      	negs	r0, r0
 80043d0:	f1b8 0f00 	cmp.w	r8, #0
 80043d4:	d099      	beq.n	800430a <_strtol_l.constprop.0+0x1a>
 80043d6:	2a00      	cmp	r2, #0
 80043d8:	d1f6      	bne.n	80043c8 <_strtol_l.constprop.0+0xd8>
 80043da:	f8c8 1000 	str.w	r1, [r8]
 80043de:	e794      	b.n	800430a <_strtol_l.constprop.0+0x1a>
 80043e0:	08004540 	.word	0x08004540

080043e4 <_strtol_r>:
 80043e4:	f7ff bf84 	b.w	80042f0 <_strtol_l.constprop.0>

080043e8 <_strtoul_l.constprop.0>:
 80043e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043ec:	4e34      	ldr	r6, [pc, #208]	@ (80044c0 <_strtoul_l.constprop.0+0xd8>)
 80043ee:	4686      	mov	lr, r0
 80043f0:	460d      	mov	r5, r1
 80043f2:	4628      	mov	r0, r5
 80043f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043f8:	5d37      	ldrb	r7, [r6, r4]
 80043fa:	f017 0708 	ands.w	r7, r7, #8
 80043fe:	d1f8      	bne.n	80043f2 <_strtoul_l.constprop.0+0xa>
 8004400:	2c2d      	cmp	r4, #45	@ 0x2d
 8004402:	d12f      	bne.n	8004464 <_strtoul_l.constprop.0+0x7c>
 8004404:	782c      	ldrb	r4, [r5, #0]
 8004406:	2701      	movs	r7, #1
 8004408:	1c85      	adds	r5, r0, #2
 800440a:	f033 0010 	bics.w	r0, r3, #16
 800440e:	d109      	bne.n	8004424 <_strtoul_l.constprop.0+0x3c>
 8004410:	2c30      	cmp	r4, #48	@ 0x30
 8004412:	d12c      	bne.n	800446e <_strtoul_l.constprop.0+0x86>
 8004414:	7828      	ldrb	r0, [r5, #0]
 8004416:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800441a:	2858      	cmp	r0, #88	@ 0x58
 800441c:	d127      	bne.n	800446e <_strtoul_l.constprop.0+0x86>
 800441e:	786c      	ldrb	r4, [r5, #1]
 8004420:	2310      	movs	r3, #16
 8004422:	3502      	adds	r5, #2
 8004424:	f04f 38ff 	mov.w	r8, #4294967295
 8004428:	2600      	movs	r6, #0
 800442a:	fbb8 f8f3 	udiv	r8, r8, r3
 800442e:	fb03 f908 	mul.w	r9, r3, r8
 8004432:	ea6f 0909 	mvn.w	r9, r9
 8004436:	4630      	mov	r0, r6
 8004438:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800443c:	f1bc 0f09 	cmp.w	ip, #9
 8004440:	d81c      	bhi.n	800447c <_strtoul_l.constprop.0+0x94>
 8004442:	4664      	mov	r4, ip
 8004444:	42a3      	cmp	r3, r4
 8004446:	dd2a      	ble.n	800449e <_strtoul_l.constprop.0+0xb6>
 8004448:	f1b6 3fff 	cmp.w	r6, #4294967295
 800444c:	d007      	beq.n	800445e <_strtoul_l.constprop.0+0x76>
 800444e:	4580      	cmp	r8, r0
 8004450:	d322      	bcc.n	8004498 <_strtoul_l.constprop.0+0xb0>
 8004452:	d101      	bne.n	8004458 <_strtoul_l.constprop.0+0x70>
 8004454:	45a1      	cmp	r9, r4
 8004456:	db1f      	blt.n	8004498 <_strtoul_l.constprop.0+0xb0>
 8004458:	fb00 4003 	mla	r0, r0, r3, r4
 800445c:	2601      	movs	r6, #1
 800445e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004462:	e7e9      	b.n	8004438 <_strtoul_l.constprop.0+0x50>
 8004464:	2c2b      	cmp	r4, #43	@ 0x2b
 8004466:	bf04      	itt	eq
 8004468:	782c      	ldrbeq	r4, [r5, #0]
 800446a:	1c85      	addeq	r5, r0, #2
 800446c:	e7cd      	b.n	800440a <_strtoul_l.constprop.0+0x22>
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1d8      	bne.n	8004424 <_strtoul_l.constprop.0+0x3c>
 8004472:	2c30      	cmp	r4, #48	@ 0x30
 8004474:	bf0c      	ite	eq
 8004476:	2308      	moveq	r3, #8
 8004478:	230a      	movne	r3, #10
 800447a:	e7d3      	b.n	8004424 <_strtoul_l.constprop.0+0x3c>
 800447c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004480:	f1bc 0f19 	cmp.w	ip, #25
 8004484:	d801      	bhi.n	800448a <_strtoul_l.constprop.0+0xa2>
 8004486:	3c37      	subs	r4, #55	@ 0x37
 8004488:	e7dc      	b.n	8004444 <_strtoul_l.constprop.0+0x5c>
 800448a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800448e:	f1bc 0f19 	cmp.w	ip, #25
 8004492:	d804      	bhi.n	800449e <_strtoul_l.constprop.0+0xb6>
 8004494:	3c57      	subs	r4, #87	@ 0x57
 8004496:	e7d5      	b.n	8004444 <_strtoul_l.constprop.0+0x5c>
 8004498:	f04f 36ff 	mov.w	r6, #4294967295
 800449c:	e7df      	b.n	800445e <_strtoul_l.constprop.0+0x76>
 800449e:	1c73      	adds	r3, r6, #1
 80044a0:	d106      	bne.n	80044b0 <_strtoul_l.constprop.0+0xc8>
 80044a2:	2322      	movs	r3, #34	@ 0x22
 80044a4:	f8ce 3000 	str.w	r3, [lr]
 80044a8:	4630      	mov	r0, r6
 80044aa:	b932      	cbnz	r2, 80044ba <_strtoul_l.constprop.0+0xd2>
 80044ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80044b0:	b107      	cbz	r7, 80044b4 <_strtoul_l.constprop.0+0xcc>
 80044b2:	4240      	negs	r0, r0
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d0f9      	beq.n	80044ac <_strtoul_l.constprop.0+0xc4>
 80044b8:	b106      	cbz	r6, 80044bc <_strtoul_l.constprop.0+0xd4>
 80044ba:	1e69      	subs	r1, r5, #1
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	e7f5      	b.n	80044ac <_strtoul_l.constprop.0+0xc4>
 80044c0:	08004540 	.word	0x08004540

080044c4 <_strtoul_r>:
 80044c4:	f7ff bf90 	b.w	80043e8 <_strtoul_l.constprop.0>

080044c8 <_malloc_usable_size_r>:
 80044c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044cc:	1f18      	subs	r0, r3, #4
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bfbc      	itt	lt
 80044d2:	580b      	ldrlt	r3, [r1, r0]
 80044d4:	18c0      	addlt	r0, r0, r3
 80044d6:	4770      	bx	lr

080044d8 <_init>:
 80044d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044da:	bf00      	nop
 80044dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044de:	bc08      	pop	{r3}
 80044e0:	469e      	mov	lr, r3
 80044e2:	4770      	bx	lr

080044e4 <_fini>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	bf00      	nop
 80044e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ea:	bc08      	pop	{r3}
 80044ec:	469e      	mov	lr, r3
 80044ee:	4770      	bx	lr
